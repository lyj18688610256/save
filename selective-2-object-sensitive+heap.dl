       
       
.type Modifier = symbol
.decl isModifier(?m:Modifier)
.decl Modifier_abstract(?mod:Modifier)
.decl Modifier_final(?mod:Modifier)
.decl Modifier_public(?mod:Modifier)
.decl Modifier_private(?mod:Modifier)
.decl Modifier_static(?mod:Modifier)
.type Type = symbol
.type PrimitiveType = Type
.type ReferenceType = Type
.type NullType = ReferenceType
.type ArrayType = ReferenceType
.type ClassType = ReferenceType
.type InterfaceType = ReferenceType
.decl isType(?t:Type)
.decl isPrimitiveType(?t:PrimitiveType)
.decl isReferenceType(?t:ReferenceType)
.decl isNullType(?t:ReferenceType)
.decl isArrayType(?t:ArrayType)
.decl isClassType(?t:ClassType)
.decl isInterfaceType(?t:InterfaceType)
.decl DirectSuperclass(?class:ClassType, ?superclass:ClassType)
.decl DirectSuperinterface(?ref:ReferenceType, ?interface:InterfaceType)
.decl ConcreteClass(?ref:ClassType)
.decl MainClass(?class:ClassType)
.decl Type_boolean(?t:PrimitiveType)
.decl Type_byte(?t:PrimitiveType)
.decl Type_char(?t:PrimitiveType)
.decl Type_short(?t:PrimitiveType)
.decl Type_int(?t:PrimitiveType)
.decl Type_long(?t:PrimitiveType)
.decl Type_float(?t:PrimitiveType)
.decl Type_double(?t:PrimitiveType)
.decl Type_void(?t:Type)
.decl Type_null(?t:NullType)
.decl Type_object(?t:ReferenceType)
.decl isIntegerType(?type:Type)
.decl ClassModifier(?mod:Modifier, ?class:ReferenceType)
.type Field = symbol
.decl isField(?field:Field)
.decl Field_DeclaringType(?field:Field, ?declaringClass:ReferenceType)
.decl Field_SimpleName(?field:Field, ?simpleName:symbol)
.decl Field_Type(?field:Field, ?type:Type)
.decl Field_Modifier(?mod:Modifier, ?field:Field)
.type MethodDescriptor = symbol
.decl isMethodDescriptor(?md:MethodDescriptor)
.type Method = symbol
.decl isMethod(?m:Method)
.decl Method_DeclaringType(?method:Method, ?declaringType:ReferenceType)
.decl Method_ReturnType(?method:Method, ?returnType:Type)
.decl Method_SimpleName(?method:Method, ?simpleName:symbol)
.decl Method_ParamTypes(?method:Method, ?params:symbol)
.decl Method_Descriptor(?method:Method, ?descriptor:MethodDescriptor)
.decl Method_Arity(?method:Method, ?arity:number)
.type JVMDescriptor = symbol
.decl isJVMDescriptor(?jvmd:JVMDescriptor)
.decl Method_JVMDescriptor(?method:Method, ?descriptor:JVMDescriptor)
.decl Method_Modifier(?mod:Modifier, ?method:Method)
.decl Method_DeclaresException(?exceptionType:ReferenceType, ?method:Method)
.decl FormalParam(?index:number, ?method:Method, ?var:Var)
.decl ThisVar(?method:Method, ?var:Var)
.type Var = symbol
.decl isVar(v:Var)
.decl Var_Type(?var:Var, ?type:Type)
.decl Var_DeclaringMethod(?var:Var, ?method:Method)
.decl Var_SimpleName(?var:Var, ?simplename:symbol)
.type Value = symbol
.decl isValue(?value:Value)
.type NumConstant = Value
.decl isNumConstant(?n:NumConstant)
.type HeapAllocation = Value
.type NormalHeap = HeapAllocation
.type StringConstant = HeapAllocation
.type ClassHeap = HeapAllocation
.type MethodHandleConstant = HeapAllocation
.type MethodTypeConstant = HeapAllocation
.decl isHeapAllocation(?h:HeapAllocation)
.decl isNormalHeap(?h:NormalHeap)
.decl isStringConstant(?h:StringConstant)
.decl isClassHeap(?h:ClassHeap)
.decl isMethodHandleConstant(?h:MethodHandleConstant)
.decl isMethodTypeConstant(?h:MethodTypeConstant)
.decl isStringRaw(?id:symbol)
.decl HeapAllocation_Type(?heap:HeapAllocation, ?type:ReferenceType)
.decl OriginalHeapAllocation_Type(?heap:HeapAllocation, ?type:ReferenceType)
.decl HeapAllocation_EmptyArray(?heap:HeapAllocation)
.decl HeapAllocation_Null(?null:HeapAllocation)
.decl MainMethodArgArray(?heap:HeapAllocation)
.decl MainMethodArgArrayContent(?heap:HeapAllocation)
.decl ClassHeap_InstanceType(?classHeap:ClassHeap, ?instanceType:ReferenceType)
.decl MethodHandleConstant_Method(?heap:MethodHandleConstant, ?method:Method)
.decl MethodHandleConstant_ReturnType(?heap:MethodHandleConstant, ?retType:Type)
.decl MethodHandleConstant_ParamTypes(?heap:MethodHandleConstant, ?paramTypes:symbol)
.decl MethodHandleConstant_Arity(?heap:MethodHandleConstant, ?arity:number)
.decl MethodTypeConstant_Arity(?heap:MethodTypeConstant, ?arity:number)
.decl MethodTypeConstant_ReturnType(?heap:MethodTypeConstant, ?retType:Type)
.decl MethodTypeConstant_ParamTypes(?heap:MethodTypeConstant, ?paramTypes:symbol)
.type Instruction = symbol
.decl isInstruction(?insn:Instruction)
.decl Instruction_Index(?insn:Instruction, ?index:number)
.decl Instruction_Line(?insn:Instruction, ?index:number)
.decl Instruction_Method(?insn:Instruction, ?inMethod:Method)
.type Throw_Insn = Instruction
.type ThrowNull_Insn = Throw_Insn
.type Goto_Insn = Instruction
.type If_Insn = Instruction
.type Switch_Insn = Instruction
.type TableSwitch_Insn = Switch_Insn
.type LookupSwitch_Insn = Switch_Insn
.type MonitorInstruction = Instruction
.type EnterMonitor_Insn = MonitorInstruction
.type ExitMonitor_Insn = MonitorInstruction
.type FieldInstruction = Instruction
.type LoadInstanceField_Insn = FieldInstruction
.type StoreInstanceField_Insn = FieldInstruction
.type LoadStaticField_Insn = FieldInstruction
.type StoreStaticField_Insn = FieldInstruction
.type ArrayInstruction = Instruction
.type LoadArrayIndex_Insn = ArrayInstruction
.type StoreArrayIndex_Insn = ArrayInstruction
.decl isThrow_Insn(?insn:Throw_Insn)
.decl isThrowNull_Insn(?insn:ThrowNull_Insn)
.decl isGoto_Insn(?insn:Goto_Insn)
.decl isIf_Insn(?insn:If_Insn)
.decl isSwitch_Insn(?insn:Switch_Insn)
.decl isTableSwitch_Insn(?insn:TableSwitch_Insn)
.decl isLookupSwitch_Insn(?insn:LookupSwitch_Insn)
.decl isMonitorInstruction(?insn:MonitorInstruction)
.decl isEnterMonitor_Insn(?insn:EnterMonitor_Insn)
.decl isExitMonitor_Insn(?insn:ExitMonitor_Insn)
.decl isFieldInstruction(?insn:FieldInstruction)
.decl isLoadInstanceField_Insn(?insn:LoadInstanceField_Insn)
.decl isStoreInstanceField_Insn(?insn:StoreInstanceField_Insn)
.decl isLoadStaticField_Insn(?insn:LoadStaticField_Insn)
.decl isStoreStaticField_Insn(?insn:StoreStaticField_Insn)
.decl isArrayInstruction(?insn:ArrayInstruction)
.decl isLoadArrayIndex_Insn(?insn:LoadArrayIndex_Insn)
.decl isStoreArrayIndex_Insn(?insn:StoreArrayIndex_Insn)
.type AssignInstruction = Instruction
.type AssignOper_Insn = AssignInstruction
.type AssignBinop_Insn = AssignOper_Insn
.type AssignUnop_Insn = AssignOper_Insn
.type AssignLocal_Insn = AssignOper_Insn
.type AssignInstanceOf_Insn = AssignInstruction
.type AssignNull_Insn = AssignInstruction
.type AssignNumConstant_Insn = AssignInstruction
.type AssignCast_Insn = AssignInstruction
.type AssignCastNull_Insn = AssignCast_Insn
.type AssignCastNumConstant_Insn = AssignCast_Insn
.type AssignHeapAllocation_Insn = AssignInstruction
.type ReturnInstruction = Instruction
.type ReturnVoid_Insn = ReturnInstruction
.type ReturnNonvoid_Insn = ReturnInstruction
.decl isAssignInstruction(?insn:AssignInstruction)
.decl isAssignOper_Insn(?insn:AssignOper_Insn)
.decl isAssignBinop_Insn(?insn:AssignBinop_Insn)
.decl isAssignUnop_Insn(?insn:AssignUnop_Insn)
.decl isAssignLocal_Insn(?insn:AssignLocal_Insn)
.decl isAssignInstanceOf_Insn(?insn:AssignInstanceOf_Insn)
.decl isAssignNull_Insn(?insn:AssignNull_Insn)
.decl isAssignNumConstant_Insn(?insn:AssignNumConstant_Insn)
.decl isAssignCast_Insn(?insn:AssignCast_Insn)
.decl isAssignCastNull_Insn(?insn:AssignCastNull_Insn)
.decl isAssignCastNumConstant_Insn(?insn:AssignCastNumConstant_Insn)
.decl isAssignHeapAllocation_Insn(?insn:AssignHeapAllocation_Insn)
.decl isReturnInstruction(?insn:ReturnInstruction)
.decl isReturnVoid_Insn(?insn:ReturnVoid_Insn)
.decl isReturnNonvoid_Insn(?insn:ReturnNonvoid_Insn)
.type MethodInvocation = Instruction
.type VirtualMethodInvocation_Insn = MethodInvocation
.type SpecialMethodInvocation_Insn = MethodInvocation
.type StaticMethodInvocation_Insn = MethodInvocation
.type SuperMethodInvocation_Insn = MethodInvocation
.type DynamicMethodInvocation_Insn = MethodInvocation
.decl isMethodInvocation(?insn:MethodInvocation)
.decl isVirtualMethodInvocation_Insn(?insn:VirtualMethodInvocation_Insn)
.decl isSpecialMethodInvocation_Insn(?insn:SpecialMethodInvocation_Insn)
.decl isStaticMethodInvocation_Insn(?insn:StaticMethodInvocation_Insn)
.decl isSuperMethodInvocation_Insn(?insn:SuperMethodInvocation_Insn)
.decl isDynamicMethodInvocation_Insn(?insn:DynamicMethodInvocation_Insn)
.type UnsupportedInstruction = Instruction
.type AssignPhantomInvoke = UnsupportedInstruction
.type BreakpointStmt = UnsupportedInstruction
.decl isUnsupportedInstruction(?insn:UnsupportedInstruction)
.decl isAssignPhantomInvoke(?insn:AssignPhantomInvoke)
.decl isBreakpointStmt(?insn:BreakpointStmt)
.decl DummyIf_Var(?insn:If_Insn, ?Var:Var)
.decl If_Var(?insn:If_Insn, ?pos:number, ?var:Var)
.decl If_Constant(?insn:If_Insn, ?pos: number, ?cons: NumConstant)
.decl Throw_Var(?insn:Throw_Insn, ?var:Var)
.decl Goto_Target(?insn:Goto_Insn, ?index:number)
.decl If_Target(?insn:If_Insn, ?index:number)
.decl Switch_Key(?insn:Switch_Insn, ?key:Var)
.decl Switch_Target(?insn:Switch_Insn, ?value:number, ?index:number)
.decl Switch_DefaultTarget(?insn:Switch_Insn, ?index:number)
.decl EnterMonitor_Var(?insn:EnterMonitor_Insn, ?var:Var)
.decl ExitMonitor_Var(?insn:ExitMonitor_Insn, ?var:Var)
.decl FieldInstruction_Signature(?insn:FieldInstruction, ?sign:Field)
.decl LoadInstanceField_Base(?insn:LoadInstanceField_Insn, ?var:Var)
.decl LoadInstanceField_To(?insn:LoadInstanceField_Insn, ?var:Var)
.decl StoreInstanceField_From(?insn:StoreInstanceField_Insn, ?var:Var)
.decl StoreInstanceField_Base(?insn:StoreInstanceField_Insn, ?var:Var)
.decl LoadStaticField_To(?insn:LoadStaticField_Insn, ?var:Var)
.decl StoreStaticField_From(?insn:StoreStaticField_Insn, ?var:Var)
.decl ArrayInsnIndex(?insn:Instruction, ?index:Var)
.decl ArrayNumIndex(?insn:Instruction, ?index:number)
.decl ComponentType(?arrayType:ArrayType, ?componentType:Type)
.decl LoadArrayIndex_Base(?insn:LoadArrayIndex_Insn, ?var:Var)
.decl LoadArrayIndex_To(?insn:LoadArrayIndex_Insn, var:Var)
.decl StoreArrayIndex_From(?insn:StoreArrayIndex_Insn, ?var:Var)
.decl StoreArrayIndex_Base(?insn:StoreArrayIndex_Insn, ?var:Var)
.decl ArrayAllocation(?insn:Instruction, ?pos:number, ?sizeVar:Var)
.decl AssignInstruction_To(?insn:AssignInstruction, ?to:Var)
.decl AssignNumConstant_Id(?insn:AssignNumConstant_Insn, ?const:symbol)
.decl AssignCast_From(?insn:AssignCast_Insn, ?from:Var)
.decl AssignCast_Type(?insn:AssignCast_Insn, ?type:Type)
.decl AssignCastNumConstant_Id(?insn:AssignCastNumConstant_Insn, ?const:symbol)
.decl AssignLocal_From(?insn:AssignLocal_Insn, ?from:Var)
.decl AssignInstanceOf_From(?insn:AssignInstanceOf_Insn, ?from:Var)
.decl AssignInstanceOf_Type(?insn:AssignInstanceOf_Insn, ?type:Type)
.decl AssignOper_From(?insn:AssignOper_Insn, ?pos:number, ?from:Var)
.decl AssignOper_FromConstant(?insn:AssignOper_Insn, ?pos: number, ?from:NumConstant)
.decl AssignHeapAllocation_Heap(?insn:AssignHeapAllocation_Insn, ?heap:HeapAllocation)
.decl ReturnNonvoid_Var(?return:ReturnNonvoid_Insn, ?var:Var)
.decl MethodInvocation_Line(?invocation:MethodInvocation, ?line:number)
.decl MethodInvocation_Method(?invocation:MethodInvocation, ?signature:Method)
.decl AssignReturnValue(?invocation:MethodInvocation, ?to:Var)
.decl ActualParam(?index:number, ?invocation:MethodInvocation, ?var:Var)
.decl VirtualMethodInvocation_Base(?invocation:VirtualMethodInvocation_Insn, ?base:Var)
.decl VirtualMethodInvocation_SimpleName(?invocation:MethodInvocation, ?simplename:symbol)
.decl VirtualMethodInvocation_Descriptor(?invocation:MethodInvocation, ?descriptor:MethodDescriptor)
.decl SuperMethodInvocation_Base(?invocation:SuperMethodInvocation_Insn, ?base:Var)
.decl SuperMethodInvocation_SimpleName(?invocation:MethodInvocation, ?simplename:symbol)
.decl SuperMethodInvocation_Descriptor(?invocation:MethodInvocation, ?descriptor:MethodDescriptor)
.decl DynamicMethodInvocation_Bootstrap(?invocation:DynamicMethodInvocation_Insn, ?bootSignature:Method)
.decl DynamicMethodInvocation_DynName(?invocation:DynamicMethodInvocation_Insn, ?dynName:symbol)
.decl DynamicMethodInvocation_DynReturnType(?invocation:DynamicMethodInvocation_Insn, ?dynRetType:Type)
.decl DynamicMethodInvocation_DynParamTypes(?invocation:DynamicMethodInvocation_Insn, ?dynParamTypes:symbol)
.decl DynamicMethodInvocation_DynArity(?invocation:DynamicMethodInvocation_Insn, ?dynArity:number)
.decl DynamicMethodInvocation_HandleTag(?instruction:DynamicMethodInvocation_Insn, ?tag:number)
.decl BootstrapParam(?index:number, ?invocation:DynamicMethodInvocation_Insn, ?var:Var)
.decl StaticMethodInvocation_SimpleName(?invocation:MethodInvocation, ?simplename:symbol)
.decl StaticMethodInvocation_Descriptor(?invocation:MethodInvocation, ?descriptor:MethodDescriptor)
.decl SpecialMethodInvocation_Base(?invocation:SpecialMethodInvocation_Insn, ?base:Var)
.decl SpecialMethodInvocation_SimpleName(?invocation:MethodInvocation, ?simplename:symbol)
.decl SpecialMethodInvocation_Descriptor(?invocation:MethodInvocation, ?descriptor:MethodDescriptor)
.decl MethodInvocation_Base(?invocation:MethodInvocation, ?base:Var)
.type ExceptionHandler = Instruction
.decl isExceptionHandler(?handler:ExceptionHandler)
.decl ExceptionHandler_Method(?handler:ExceptionHandler, ?inmethod:Method)
.decl ExceptionHandler_Index(?handler:ExceptionHandler, ?index:number)
.decl ExceptionHandler_Type(?handler:ExceptionHandler, ?type:Type)
.decl ExceptionHandler_FormalParam(?handler:ExceptionHandler, ?var:Var)
.decl ExceptionHandler_Begin(?handler:ExceptionHandler, ?index:number)
.decl ExceptionHandler_End(?handler:ExceptionHandler, ?index:number)
.decl ExceptionHandler_Previous(?handler:ExceptionHandler, ?previous:ExceptionHandler)
.decl ApplicationClass(?ref:ReferenceType)
.decl ApplicationField(?field:Field)
.decl ApplicationMethod(?method:Method)
.decl ApplicationVar(?var:Var)
.decl ApplicationInvocation(?invocation:MethodInvocation)
.decl ApplicationAllocation(?allocation:HeapAllocation)
.decl Properties(?path:StringConstant, ?key:StringConstant, ?value:StringConstant)
.decl NativeReturnVar(?var:Var, ?method:Method)
.type Annotation = ReferenceType
.decl isAnnotation(?a:Annotation)
.decl Type_Annotation(?type:ReferenceType, ?annotation:Annotation)
.decl Method_Annotation(?method:Method, ?annotation:Annotation)
.decl Field_Annotation(?fld:Field, ?annotation:Annotation)
.decl Param_Annotation(?method:Method, ?index:number, ?annotation:Annotation)
.decl AnnotationElement(?annotationKind:symbol, ?element:symbol, ?parentId:symbol, ?id:symbol, ?name:symbol, ?value1:symbol, ?value2:symbol)
.decl isOpaqueMethod(?m:Method)
.decl Stats_Metrics(order:symbol, msg:symbol, c:number)
.decl Throw(?insn:Throw_Insn, ?var:Var)
.decl LoadInstanceField(?base:Var, ?sig:Field, ?to:Var, ?inmethod:Method)
.decl StoreInstanceField(?from:Var, ?base:Var, ?signature:Field, ?inmethod:Method)
.decl LoadStaticField(?sig:Field, ?to:Var, ?inmethod:Method)
.decl StoreStaticField(?from:Var, ?signature:Field, ?inmethod:Method)
.decl LoadArrayIndex(?base:Var, ?to:Var, ?inmethod:Method)
.decl StoreArrayIndex(?from:Var, ?base:Var, ?inmethod:Method)
.decl AssignCast(?type:Type, ?from:Var, ?to:Var, ?inmethod:Method)
.decl AssignLocal(?from:Var, ?to:Var, ?inmethod:Method)
.decl AssignNull(?to:Var, ?inmethod:Method)
.decl AssignHeapAllocation(?heap:HeapAllocation, ?to:Var, ?inmethod:Method)
.decl ReturnVar(?var:Var, ?method:Method)
.decl VirtualMethodInvocation(?invocation:MethodInvocation, ?signature:Method, ?inmethod:Method)
.decl SuperMethodInvocation(?invocation:MethodInvocation, ?signature:Method, ?inmethod:Method)
.decl StaticMethodInvocation(?invocation:MethodInvocation, ?signature:Method, ?inmethod:Method)
Throw(?insn, ?var) :-
 isThrow_Insn(?insn),
 Throw_Var(?insn, ?var).
LoadInstanceField(?base, ?sig, ?to, ?inmethod) :-
 isLoadInstanceField_Insn(?insn),
 Instruction_Method(?insn, ?inmethod),
 LoadInstanceField_Base(?insn, ?base),
 FieldInstruction_Signature(?insn, ?sig),
 LoadInstanceField_To(?insn, ?to).
StoreInstanceField(?from, ?base, ?sig, ?inmethod) :-
 isStoreInstanceField_Insn(?insn),
 Instruction_Method(?insn, ?inmethod),
 StoreInstanceField_From(?insn, ?from),
 StoreInstanceField_Base(?insn, ?base),
 FieldInstruction_Signature(?insn, ?sig).
LoadStaticField(?sig, ?to, ?inmethod) :-
 isLoadStaticField_Insn(?insn),
 Instruction_Method(?insn, ?inmethod),
 FieldInstruction_Signature(?insn, ?sig),
 LoadStaticField_To(?insn, ?to).
StoreStaticField(?from, ?sig, ?inmethod) :-
 isStoreStaticField_Insn(?insn),
 Instruction_Method(?insn, ?inmethod),
 StoreStaticField_From(?insn, ?from),
 FieldInstruction_Signature(?insn, ?sig).
LoadArrayIndex(?base, ?to, ?inmethod) :-
 isLoadArrayIndex_Insn(?insn),
 Instruction_Method(?insn, ?inmethod),
 LoadArrayIndex_Base(?insn, ?base),
 LoadArrayIndex_To(?insn, ?to).
StoreArrayIndex(?from, ?base, ?inmethod) :-
 isStoreArrayIndex_Insn(?insn),
 Instruction_Method(?insn, ?inmethod),
 StoreArrayIndex_From(?insn, ?from),
 StoreArrayIndex_Base(?insn, ?base).
AssignCast(?type, ?from, ?to, ?inmethod) :-
 isAssignCast_Insn(?insn),
 Instruction_Method(?insn, ?inmethod),
 AssignCast_From(?insn, ?from),
 AssignInstruction_To(?insn, ?to),
 AssignCast_Type(?insn, ?type).
AssignLocal(?from, ?to, ?inmethod) :-
 isAssignLocal_Insn(?insn),
 AssignInstruction_To(?insn, ?to),
 Instruction_Method(?insn, ?inmethod),
 AssignLocal_From(?insn, ?from).
AssignNull(?to, ?inmethod) :-
 isAssignNull_Insn(?insn),
 AssignInstruction_To(?insn, ?to),
 Instruction_Method(?insn, ?inmethod).
AssignHeapAllocation(?heap, ?to, ?inmethod) :-
 isAssignHeapAllocation_Insn(?insn),
 Instruction_Method(?insn, ?inmethod),
 AssignHeapAllocation_Heap(?insn, ?heap),
 AssignInstruction_To(?insn, ?to).
ReturnVar(?var, ?method) :-
 isReturnNonvoid_Insn(?insn),
 Instruction_Method(?insn, ?method),
 ReturnNonvoid_Var(?insn, ?var).
ReturnVar(?var, ?method) :-
 NativeReturnVar(?var, ?method).
VirtualMethodInvocation(?invocation, ?signature, ?inmethod) :-
 isVirtualMethodInvocation_Insn(?invocation),
 Instruction_Method(?invocation, ?inmethod),
 MethodInvocation_Method(?invocation, ?signature).
StaticMethodInvocation(?invocation, ?signature, ?inmethod) :-
 isStaticMethodInvocation_Insn(?invocation),
 Instruction_Method(?invocation, ?inmethod),
 MethodInvocation_Method(?invocation, ?signature).
SuperMethodInvocation(?invocation, ?signature, ?inmethod) :-
 isSuperMethodInvocation_Insn(?invocation),
 Instruction_Method(?invocation, ?inmethod),
 MethodInvocation_Method(?invocation, ?signature).
VirtualMethodInvocation_SimpleName(?invocation, ?simplename),
VirtualMethodInvocation_Descriptor(?invocation, ?descriptor) :-
 isVirtualMethodInvocation_Insn(?invocation),
 MethodInvocation_Method(?invocation, ?signature),
 Method_SimpleName(?signature, ?simplename),
 Method_Descriptor(?signature, ?descriptor).
StaticMethodInvocation_SimpleName(?invocation, ?simplename),
StaticMethodInvocation_Descriptor(?invocation, ?descriptor) :-
 isStaticMethodInvocation_Insn(?invocation),
 MethodInvocation_Method(?invocation, ?signature),
 Method_SimpleName(?signature, ?simplename),
 Method_Descriptor(?signature, ?descriptor).
SpecialMethodInvocation_SimpleName(?invocation, ?simplename),
SpecialMethodInvocation_Descriptor(?invocation, ?descriptor) :-
 isSpecialMethodInvocation_Insn(?invocation),
 MethodInvocation_Method(?invocation, ?signature),
 Method_SimpleName(?signature, ?simplename),
 Method_Descriptor(?signature, ?descriptor).
SuperMethodInvocation_SimpleName(?invocation, ?simplename),
SuperMethodInvocation_Descriptor(?invocation, ?descriptor) :-
 isSuperMethodInvocation_Insn(?invocation),
 MethodInvocation_Method(?invocation, ?signature),
 Method_SimpleName(?signature, ?simplename),
 Method_Descriptor(?signature, ?descriptor).
.decl MethodInvocation_SimpleName(?invocation:Instruction, ?simpleName:symbol)
MethodInvocation_SimpleName(?invocation, ?simplename) :-
 VirtualMethodInvocation_SimpleName(?invocation, ?simplename).
MethodInvocation_SimpleName(?invocation, ?simplename) :-
 SpecialMethodInvocation_SimpleName(?invocation, ?simplename).
MethodInvocation_SimpleName(?invocation, ?simplename) :-
 StaticMethodInvocation_SimpleName(?invocation, ?simplename).
MethodInvocation_SimpleName(?invocation, ?simplename) :-
 SuperMethodInvocation_SimpleName(?invocation, ?simplename).
.decl KeepMethod(?m:Method)
.decl KeepClassMembers(?m:Method)
.decl KeepClassesWithMembers(?m:Method)
.decl KeepClass(?c:ReferenceType)
.decl RootCodeElement(?id:symbol)
.input KeepMethod(filename="KeepMethod.facts")
.input KeepClassMembers(filename="KeepClassMembers.facts")
.input KeepClassesWithMembers(filename="KeepClassesWithMembers.facts")
.input KeepClass(filename="KeepClass.facts")
.input RootCodeElement(filename="RootCodeElement.facts")
.type OpaqueInstruction = Instruction
.decl isOpaqueInstruction(?insn:OpaqueInstruction)
.decl ClassLoaderMethod(?method:Method, ?argIdx:number)
.output ClassLoaderMethod
isOpaqueInstruction(?instruction) :-
   _StaticMethodInvocation(?instruction, _, ?signature, _),
   isOpaqueMethod(?signature).
isOpaqueInstruction(?instruction) :-
   _SpecialMethodInvocation(?instruction, _, ?signature, _, _),
   isOpaqueMethod(?signature).
isOpaqueInstruction(?instruction) :-
   _VirtualMethodInvocation(?instruction, _, ?signature, _, _),
   isOpaqueMethod(?signature).
ClassLoaderMethod(?m, 0) :- isMethod(?m), ?m = "<dalvik.system.DexFile: java.lang.Class defineClassNative(java.lang.String,java.lang.ClassLoader,java.lang.Object,dalvik.system.DexFile)>".
ClassLoaderMethod(?m, 0) :- isMethod(?m), ?m = "<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>".
ClassLoaderMethod(?m, 0) :- isMethod(?m), ?m = "<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>".
ClassLoaderMethod(?m, 0) :- isMethod(?m), ?m = "<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>".
ClassLoaderMethod(?m, 0) :- isMethod(?m), ?m = "<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>".
ClassLoaderMethod(?m, 0) :- isMethod(?m), ?m = "<java.lang.ClassLoader: java.lang.Class findSystemClass(java.lang.String)>".
ClassLoaderMethod(?m, 0) :- isMethod(?m), ?m = "<java.lang.ClassLoader: java.lang.Class findBootstrapClassOrNull(java.lang.String)>".
ClassLoaderMethod(?m, 0) :- isMethod(?m), ?m = "<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>".
ClassLoaderMethod(?m, 0) :- isMethod(?m), ?m = "<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>".
ClassLoaderMethod(?m, 0) :- isMethod(?m), ?m = "<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.CodeSource)>".
ClassLoaderMethod(?m, 0) :- isMethod(?m), ?m = "<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.CodeSource)>".
ClassLoaderMethod(?m, 1) :- isMethod(?m), ?m = "<java.lang.VMClassLoader: java.lang.Class findLoadedClass(java.lang.ClassLoader,java.lang.String)>".
.decl MTEntryPoint(?id:number, ?invo:MethodInvocation, ?sig:Method)
MTEntryPoint(1, ?invo, ?signature) :- _StaticMethodInvocation(?invo, _, ?signature, _), ?signature = "<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class)>".
MTEntryPoint(2, ?invo, ?signature) :- _StaticMethodInvocation(?invo, _, ?signature, _), ?signature = "<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class)>".
MTEntryPoint(3, ?invo, ?signature) :- _StaticMethodInvocation(?invo, _, ?signature, _), ?signature = "<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class,java.lang.Class[])>".
MTEntryPoint(4, ?invo, ?signature) :- _StaticMethodInvocation(?invo, _, ?signature, _), ?signature = "<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class[])>".
MTEntryPoint(5, ?invo, ?signature) :- _StaticMethodInvocation(?invo, _, ?signature, _), ?signature = "<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.invoke.MethodType)>".
MTEntryPoint(6, ?invo, ?signature) :- _StaticMethodInvocation(?invo, _, ?signature, _), ?signature = "<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.util.List)>".
isOpaqueMethod(?method) :- ClassLoaderMethod(?method, _).
isOpaqueMethod(?method) :- MTEntryPoint(_, _, ?method).
isOpaqueMethod(m) :- isMethod(m), m = "<java.lang.Class: java.lang.String getSimpleName()>".
isOpaqueMethod(m) :- isMethod(m), m = "<java.lang.Class: java.lang.Object[] getEnumConstants()>".
isOpaqueMethod(m) :- isMethod(m), m = "<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>".
isOpaqueMethod(m) :- isMethod(m), m = "<java.lang.invoke.MethodType: java.lang.Class parameterType(int)>".
isOpaqueMethod(m) :- isMethod(m), m = "<java.lang.invoke.MethodType: java.lang.Class returnType()>".
isType(?t) :- isPrimitiveType(?t) ; isReferenceType(?t).
isReferenceType(?t) :-
  isNullType(?t) ; isArrayType(?t) ; isClassType(?t) ; isInterfaceType(?t) ; isAnnotation(?t).
isHeapAllocation(?h) :-
  isNormalHeap(?h) ; isStringConstant(?h) ; isClassHeap(?h) ; isMethodHandleConstant(?h) ; isMethodTypeConstant(?h).
isInstruction(?i) :-
  isThrow_Insn(?i) ; isGoto_Insn(?i) ; isIf_Insn(?i) ; isSwitch_Insn(?i) ; isMonitorInstruction(?i) ;
  isFieldInstruction(?i) ; isArrayInstruction(?i) ; isAssignInstruction(?i) ;
  isReturnInstruction(?i) ; isMethodInvocation(?i) ; isUnsupportedInstruction(?i).
isThrowNull_Insn(?i) :- isThrow_Insn(?i).
isSwitch_Insn(?i) :- isTableSwitch_Insn(?i) ; isLookupSwitch_Insn(?i).
isMonitorInstruction(?i) :- isEnterMonitor_Insn(?i) ; isExitMonitor_Insn(?i).
isFieldInstruction(?i) :-
  isLoadInstanceField_Insn(?i) ; isStoreInstanceField_Insn(?i) ;
  isLoadStaticField_Insn(?i) ; isStoreStaticField_Insn(?i).
isArrayInstruction(?i) :- isLoadArrayIndex_Insn(?i) ; isStoreArrayIndex_Insn(?i).
isAssignInstruction(?i) :-
  isAssignOper_Insn(?i) ; isAssignInstanceOf_Insn(?i) ; isAssignNull_Insn(?i) ;
  isAssignNumConstant_Insn(?i) ; isAssignCast_Insn(?i) ; isAssignHeapAllocation_Insn(?i).
isAssignOper_Insn(?i) :-
  isAssignBinop_Insn(?i) ; isAssignUnop_Insn(?i) ; isAssignLocal_Insn(?i).
isAssignCast_Insn(?i) :- isAssignCastNumConstant_Insn(?i) ; isAssignCastNull_Insn(?i).
isReturnInstruction(?i) :- isReturnVoid_Insn(?i) ; isReturnNonvoid_Insn(?i).
isMethodInvocation(?i) :-
  isVirtualMethodInvocation_Insn(?i) ; isSpecialMethodInvocation_Insn(?i) ; isStaticMethodInvocation_Insn(?i) ;
  isSuperMethodInvocation_Insn(?i) ; isDynamicMethodInvocation_Insn(?i).
isUnsupportedInstruction(?i) :- isAssignPhantomInvoke(?i) ; isBreakpointStmt(?i).
.decl _ClassType(?class:ClassType)
.input _ClassType(filename="ClassType.facts")
isClassType(?class) :- _ClassType(?class).
.decl _ArrayType(?arrayType:ArrayType)
.input _ArrayType(filename="ArrayType.facts")
isArrayType(?arrayType) :- _ArrayType(?arrayType).
.decl _InterfaceType(?interface:InterfaceType)
.input _InterfaceType(filename="InterfaceType.facts")
isInterfaceType(?interface) :- _InterfaceType(?interface).
.decl _ComponentType(?arrayType:ArrayType, ?componentType:Type)
.input _ComponentType(filename="ComponentType.facts")
isArrayType(?arrayType),
isType(?componentType),
ComponentType(?arrayType, ?componentType) :-
  _ComponentType(?arrayType, ?componentType).
.decl _ActualParam(?index:number, ?invocation:MethodInvocation, ?var:Var)
.input _ActualParam(filename="ActualParam.facts")
isMethodInvocation(?invocation),
isVar(?var),
ActualParam(?index, ?invocation, ?var) :-
  _ActualParam(?index, ?invocation, ?var).
.decl _BootstrapParam(?index:number, ?invocation:MethodInvocation, ?var:Var)
.input _BootstrapParam(filename="BootstrapParam.facts")
isDynamicMethodInvocation_Insn(?invocation),
isVar(?var),
BootstrapParam(?index, ?invocation, ?var) :-
  _BootstrapParam(?index, ?invocation, ?var).
.decl _DirectSuperinterface(?class:ReferenceType, ?interface:InterfaceType)
.input _DirectSuperinterface(filename="DirectSuperinterface.facts")
isReferenceType(?class),
isInterfaceType(?interface),
DirectSuperinterface(?class, ?interface) :-
  _DirectSuperinterface(?class, ?interface).
.decl _DirectSuperclass(?class:ClassType, ?superclass:ClassType)
.input _DirectSuperclass(filename="DirectSuperclass.facts")
isClassType(?class),
isClassType(?superclass),
DirectSuperclass(?class, ?superclass) :-
  _DirectSuperclass(?class, ?superclass).
.decl _Field_Modifier(?modifier:Modifier, ?field:Field)
.input _Field_Modifier(filename="Field-Modifier.facts")
isModifier(?modifier),
isField(?field),
Field_Modifier(?modifier, ?field) :-
  _Field_Modifier(?modifier, ?field).
.decl _ClassModifier(?modifier:Modifier, ?class:ReferenceType)
.input _ClassModifier(filename="ClassModifier.facts")
ClassModifier(?modifier, ?class) :-
  _ClassModifier(?modifier, ?class).
.decl _FormalParam(?index:number, ?method:Method, ?var:Var)
.input _FormalParam(filename="FormalParam.facts")
isMethod(?method),
isVar(?var),
FormalParam(?index, ?method, ?var) :-
  _FormalParam(?index, ?method, ?var).
.decl _Method_DeclaresException(?exceptionType:ReferenceType, ?method:Method)
.input _Method_DeclaresException(filename="Method-DeclaresException.facts")
isReferenceType(?exceptionType),
isMethod(?method),
Method_DeclaresException(?exceptionType, ?method) :-
  _Method_DeclaresException(?exceptionType, ?method).
.decl _Method_Modifier(?mod:Modifier, ?method:Method)
.input _Method_Modifier(filename="Method-Modifier.facts")
isModifier(?mod),
isMethod(?method),
Method_Modifier(?mod, ?method) :-
  _Method_Modifier(?mod, ?method).
.decl _NativeReturnVar(?var:Var, ?method:Method)
.input _NativeReturnVar(filename="NativeReturnVar.facts")
isVar(?var),
isMethod(?method),
NativeReturnVar(?var, ?method) :-
  _NativeReturnVar(?var, ?method).
.decl _Var_Type(?var:Var, ?type:Type)
.input _Var_Type(filename="Var-Type.facts")
isVar(?var),
isType(?type),
Var_Type(?var, ?type) :-
  _Var_Type(?var, ?type).
.decl _Var_DeclaringMethod(?var:Var, ?method:Method)
.input _Var_DeclaringMethod(filename="Var-DeclaringMethod.facts")
isVar(?var),
isMethod(?method),
Var_DeclaringMethod(?var, ?method) :-
  _Var_DeclaringMethod(?var, ?method).
.decl _Var_SimpleName(?var:Var, ?simplename:symbol)
.input _Var_SimpleName(filename="Var-SimpleName.facts")
isVar(?var),
Var_SimpleName(?var, ?simplename) :-
  _Var_SimpleName(?var, ?simplename).
.decl _ApplicationClass(?type:ReferenceType)
.input _ApplicationClass(filename="ApplicationClass.facts")
isReferenceType(?type),
ApplicationClass(?type) :-
  _ApplicationClass(?type).
.decl _ApplicationPackage(?package:symbol)
.input _ApplicationPackage(filename="ApplicationPackage.facts")
.decl _ThisVar(?method:Method, ?var:Var)
.input _ThisVar(filename="ThisVar.facts")
isMethod(?method),
isVar(?var),
ThisVar(?method, ?var) :-
  _ThisVar(?method, ?var).
.decl _ExceptionHandler_Previous(?handler:ExceptionHandler, ?previous:ExceptionHandler)
.input _ExceptionHandler_Previous(filename="ExceptionHandler-Previous.facts")
isExceptionHandler(?handler),
isExceptionHandler(?previous),
ExceptionHandler_Previous(?handler, ?previous) :-
  _ExceptionHandler_Previous(?handler, ?previous).
.decl _AssignReturnValue(?invocation:MethodInvocation, ?to:Var)
.input _AssignReturnValue(filename="AssignReturnValue.facts")
isMethodInvocation(?invocation),
isVar(?to),
AssignReturnValue(?invocation, ?to) :-
  _AssignReturnValue(?invocation, ?to).
.input Properties
.decl _OperatorAt(?instruction:Instruction, ?operator:symbol)
.input _OperatorAt(filename="OperatorAt.facts")
.input MainClass
.decl _ClassArtifact(?artifact:symbol, ?className:ReferenceType, ?subArtifact:symbol, ?size:number)
.input _ClassArtifact(filename="Class-Artifact.facts")
.decl _NormalHeap(?id:NormalHeap, ?type:ReferenceType)
.input _NormalHeap(filename="NormalHeap.facts")
isType(?type),
isNormalHeap(?id),
OriginalHeapAllocation_Type(?id, ?type),
HeapAllocation_Type(?id, ?type) :-
  _NormalHeap(?id, ?type).
isClassType("java.lang.String").
.decl _StringConstant(?id:StringConstant)
.input _StringConstant(filename="StringConstant.facts")
isStringConstant(?id),
OriginalHeapAllocation_Type(?id, "java.lang.String"),
HeapAllocation_Type(?id, "java.lang.String") :-
  _StringConstant(?id).
.decl _StringRaw(?id:symbol, ?rawId:symbol)
.input _StringRaw(filename="StringRaw.facts")
.decl String_toRaw(?id:symbol, ?rawId:symbol)
isStringRaw(?id),
String_toRaw(?id, ?rawId) :-
  _StringRaw(?id, ?rawId).
.decl _ClassHeap(?id:ClassHeap, ?instanceType:ReferenceType)
.input _ClassHeap(filename="ClassHeap.facts")
isType(?instanceType),
isClassHeap(?id),
ClassHeap_InstanceType(?id, ?instanceType),
OriginalHeapAllocation_Type(?id, "java.lang.Class"),
HeapAllocation_Type(?id, "java.lang.Class") :-
  _ClassHeap(?id, ?instanceType).
.decl _MethodHandleConstant(?id:MethodHandleConstant, ?method:Method, ?retType:Type, ?paramTypes:symbol, ?arity:number)
.input _MethodHandleConstant(filename="MethodHandleConstant.facts")
isType("java.lang.invoke.MethodHandle").
isReferenceType("java.lang.invoke.MethodHandle").
isClassType("java.lang.invoke.MethodHandle").
isMethodHandleConstant(?id),
OriginalHeapAllocation_Type(?id, "java.lang.invoke.MethodHandle"),
MethodHandleConstant_Method(?id, ?method),
MethodHandleConstant_Arity(?id, ?arity),
MethodHandleConstant_ReturnType(?id, ?retType),
MethodHandleConstant_ParamTypes(?id, ?paramTypes),
HeapAllocation_Type(?id, "java.lang.invoke.MethodHandle") :-
  _MethodHandleConstant(?id, ?method, ?retType, ?paramTypes, ?arity).
.decl _MethodTypeConstant(?id:MethodTypeConstant, ?arity:number, ?retType:Type, ?paramTypes:symbol)
.input _MethodTypeConstant(filename="MethodTypeConstant.facts")
isMethodTypeConstant(?id),
HeapAllocation_Type(?id, "java.lang.invoke.MethodType"),
MethodTypeConstant_Arity(?id, ?arity),
MethodTypeConstant_ReturnType(?id, ?retType),
MethodTypeConstant_ParamTypes(?id, ?paramTypes),
OriginalHeapAllocation_Type(?id, "java.lang.invoke.MethodType") :-
  _MethodTypeConstant(?id, ?arity, ?retType, ?paramTypes).
.decl _MethodTypeConstantParam(?id:MethodTypeConstant, ?idx:number, ?type:Type)
.input _MethodTypeConstantParam(filename="MethodTypeConstantParam.facts")
.decl _NativeLibEntryPoint(?lib:symbol, ?function:symbol, ?addr:symbol)
.input _NativeLibEntryPoint(filename="NativeLibEntryPoint.facts")
.decl _NativeMethodTypeCandidate(?lib:symbol, ?function:symbol, ?descriptor:symbol, ?offset2:number)
.input _NativeMethodTypeCandidate(filename="NativeMethodTypeCandidate.facts")
.decl _NativeNameCandidate(?lib:symbol, ?function:symbol, ?name:symbol, ?offset1:number)
.input _NativeNameCandidate(filename="NativeNameCandidate.facts")
.decl _NativeMethodId(?javaMethod:Method, ?nativeId:symbol)
.input _NativeMethodId(filename="NativeMethodId.facts")
.decl _NativeXRef(?string:symbol, ?lib:symbol, ?function:symbol, ?dataAddr:number)
.input _NativeXRef(filename="NativeXRef.facts")
.decl _EmptyArray(?id:HeapAllocation)
.input _EmptyArray(filename="EmptyArray.facts")
HeapAllocation_EmptyArray(?id) :-
  _EmptyArray(?id).
.decl _ArrayAllocation(?instruction:Instruction, ?pos:number, ?sizeVar:Var)
.input _ArrayAllocation(filename="ArrayAllocation.facts")
ArrayAllocation(?insn, ?pos, ?sizeVar) :-
  _ArrayAllocation(?insn, ?pos, ?sizeVar).
.decl _AssignHeapAllocation(?instruction:AssignHeapAllocation_Insn, ?index:number, ?heap:HeapAllocation, ?to:Var, ?inmethod:Method, ?linenumber:number)
.input _AssignHeapAllocation(filename="AssignHeapAllocation.facts")
isAssignHeapAllocation_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Line(?instruction, ?linenumber),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to),
AssignHeapAllocation_Heap(?instruction, ?heap) :-
  _AssignHeapAllocation(?instruction, ?index, ?heap, ?to, ?method, ?linenumber).
.decl _AssignLocal(?instruction:AssignLocal_Insn, ?index:number, ?from:Var, ?to:Var, ?inmethod:Method)
.input _AssignLocal(filename="AssignLocal.facts")
isAssignLocal_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignLocal_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
  _AssignLocal(?instruction, ?index, ?from, ?to, ?method).
.decl _AssignBinop(?instruction:AssignBinop_Insn, ?index:number, ?to:Var, ?inmethod:Method)
.input _AssignBinop(filename="AssignBinop.facts")
isAssignBinop_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
  _AssignBinop(?instruction, ?index, ?to, ?method).
.decl _AssignUnop(?instruction:AssignUnop_Insn, ?index:number, ?to:Var, ?inmethod:Method)
.input _AssignUnop(filename="AssignUnop.facts")
isAssignUnop_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
  _AssignUnop(?instruction, ?index, ?to, ?method).
.decl _AssignOperFrom(?instruction:AssignOper_Insn, ?pos: number, ?from:Var)
.input _AssignOperFrom(filename="AssignOperFrom.facts")
AssignOper_From(?instruction, ?pos, ?from) :-
  _AssignOperFrom(?instruction, ?pos, ?from).
.decl _AssignOperFromConstant(?instruction:AssignOper_Insn, ?pos: number, ?from:NumConstant)
.input _AssignOperFromConstant(filename="AssignOperFromConstant.facts")
AssignOper_FromConstant(?instruction, ?pos, ?from) :-
  _AssignOperFromConstant(?instruction, ?pos, ?from).
.decl _IfConstant(?instruction:If_Insn, ?pos:number, ?cons:NumConstant)
.input _IfConstant(filename="IfConstant.facts")
If_Constant(?instruction, ?pos, ?cons) :-
  _IfConstant(?instruction, ?pos, ?cons).
.decl _IfVar(?instruction:If_Insn, ?pos:number, ?var:Var)
.input _IfVar(filename="IfVar.facts")
If_Var(?instruction, ?pos, ?var) :-
  _IfVar(?instruction, ?pos, ?var).
.decl _DummyIfVar(?instruction:If_Insn, ?var:Var)
.input _DummyIfVar(filename="DummyIfVar.facts")
DummyIf_Var(?instruction, ?var) :-
  _DummyIfVar(?instruction, ?var).
.decl _AssignCast(?instruction:AssignCast_Insn, ?index:number, ?from:Var, ?to:Var, ?type:Type, ?inmethod:Method)
.input _AssignCast(filename="AssignCast.facts")
isAssignCast_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCast_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
  _AssignCast(?instruction, ?index, ?from, ?to, ?type, ?method).
.decl _AssignCastNumConstant(?instruction:AssignCastNumConstant_Insn, ?index:number, ?const:symbol, ?to:Var, ?type:Type, ?inmethod:Method)
.input _AssignCastNumConstant(filename="AssignCastNumConstant.facts")
isAssignCastNumConstant_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCastNumConstant_Id(?instruction, ?const),
AssignInstruction_To(?instruction, ?to) :-
  _AssignCastNumConstant(?instruction, ?index, ?const, ?to, ?type, ?method).
.decl _AssignCastNull(?instruction:AssignCastNull_Insn, ?index:number, ?to:Var, ?type:Type, ?method:Method)
.input _AssignCastNull(filename="AssignCastNull.facts")
isAssignCastNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignInstruction_To(?instruction, ?to) :-
  _AssignCastNull(?instruction, ?index, ?to, ?type, ?method).
.decl _AssignNumConstant(?instruction:AssignNumConstant_Insn, ?index:number, ?const:NumConstant, ?to:Var, ?inmethod:Method)
.input _AssignNumConstant(filename="AssignNumConstant.facts")
isNumConstant(?const),
isAssignNumConstant_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignNumConstant_Id(?instruction, ?const),
AssignInstruction_To(?instruction, ?to) :-
  _AssignNumConstant(?instruction, ?index, ?const, ?to, ?method).
.decl _AssignNull(?instruction:AssignNull_Insn, ?index:number, ?to:Var, ?method:Method)
.input _AssignNull(filename="AssignNull.facts")
isAssignNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
  _AssignNull(?instruction, ?index, ?to, ?method).
.decl _AssignInstanceOf(?instruction:AssignInstanceOf_Insn, ?index:number, ?from:Var, ?to:Var, ?type:Type, ?inmethod:Method)
.input _AssignInstanceOf(filename="AssignInstanceOf.facts")
isAssignInstanceOf_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstanceOf_From(?instruction, ?from),
AssignInstanceOf_Type(?instruction, ?type),
AssignInstruction_To(?instruction, ?to) :-
  _AssignInstanceOf(?instruction, ?index, ?from, ?to, ?type, ?method).
.decl _Field(?signature:Field, ?declaringClass:ReferenceType, ?simplename:symbol, ?type:Type)
.input _Field(filename="Field.facts")
isField(?signature),
Field_DeclaringType(?signature, ?declaringType),
Field_SimpleName(?signature, ?simplename),
Field_Type(?signature, ?type) :-
  _Field(?signature, ?declaringType, ?simplename, ?type).
.decl _EnterMonitor(?instruction:EnterMonitor_Insn, ?index:number, ?var:Var, ?method:Method)
.input _EnterMonitor(filename="EnterMonitor.facts")
isEnterMonitor_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
EnterMonitor_Var(?instruction, ?var) :-
  _EnterMonitor(?instruction, ?index, ?var, ?method).
.decl _ExitMonitor(?instruction:ExitMonitor_Insn, ?index:number, ?var:Var, ?method:Method)
.input _ExitMonitor(filename="ExitMonitor.facts")
isExitMonitor_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
ExitMonitor_Var(?instruction, ?var) :-
  _ExitMonitor(?instruction, ?index, ?var, ?method).
.decl _MethodInvocation_Line(?instruction:MethodInvocation, line:number)
.input _MethodInvocation_Line(filename="MethodInvocation-Line.facts")
isMethodInvocation(?instruction),
MethodInvocation_Line(?instruction, ?line) :-
  _MethodInvocation_Line(?instruction, ?line).
MethodInvocation_Base(?invocation, ?base) :-
  VirtualMethodInvocation_Base(?invocation, ?base).
MethodInvocation_Base(?invocation, ?base) :-
  SpecialMethodInvocation_Base(?invocation, ?base).
.decl _StaticMethodInvocation(?instruction:StaticMethodInvocation_Insn, ?index:number, ?signature:Method, ?method:Method)
.input _StaticMethodInvocation(filename="StaticMethodInvocation.facts")
isMethod(?signature),
isMethodInvocation(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature) :-
  _StaticMethodInvocation(?instruction, ?index, ?signature, ?method).
isStaticMethodInvocation_Insn(?instruction) :-
  _StaticMethodInvocation(?instruction, _, ?signature, _),
  !isOpaqueMethod(?signature).
.decl _SpecialMethodInvocation(?instruction:SpecialMethodInvocation_Insn, ?index:number, ?signature:Method, ?base:Var, ?method:Method)
.input _SpecialMethodInvocation(filename="SpecialMethodInvocation.facts")
isMethod(?signature),
isMethodInvocation(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature) :-
  _SpecialMethodInvocation(?instruction, ?index, ?signature, _, ?method).
isSpecialMethodInvocation_Insn(?instruction),
SpecialMethodInvocation_Base(?instruction, ?base) :-
  _SpecialMethodInvocation(?instruction, _, ?signature, ?base, _),
  !isOpaqueMethod(?signature).
.decl _VirtualMethodInvocation(?instruction:VirtualMethodInvocation_Insn, ?index:number, ?signature:Method, ?base:Var, ?method:Method)
.input _VirtualMethodInvocation(filename="VirtualMethodInvocation.facts")
isMethod(?signature),
isMethodInvocation(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature) :-
  _VirtualMethodInvocation(?instruction, ?index, ?signature, _, ?method).
isVirtualMethodInvocation_Insn(?instruction),
VirtualMethodInvocation_Base(?instruction, ?base) :-
  _VirtualMethodInvocation(?instruction, _, ?signature, ?base, _),
  !isOpaqueMethod(?signature).
.decl _SuperMethodInvocation(?instruction:SuperMethodInvocation_Insn, ?index:number, ?signature:Method, ?base:Var, ?method:Method)
.input _SuperMethodInvocation(filename="SuperMethodInvocation.facts")
isMethod(?signature),
isMethodInvocation(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature),
isSuperMethodInvocation_Insn(?instruction),
SuperMethodInvocation_Base(?instruction, ?base) :-
  _SuperMethodInvocation(?instruction, ?index, ?signature, ?base, ?method).
.decl _DynamicMethodInvocation(?instruction:DynamicMethodInvocation_Insn, ?index:number, ?bootSignature:Method, ?dynName:symbol, ?dynRetType:Type, ?dynArity:number, ?dynParamTypes:symbol, ?tag:number, ?method:Method)
.input _DynamicMethodInvocation(filename="DynamicMethodInvocation.facts")
isDynamicMethodInvocation_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
DynamicMethodInvocation_Bootstrap(?instruction, ?bootSignature),
DynamicMethodInvocation_DynName(?instruction, ?dynName),
DynamicMethodInvocation_DynReturnType(?instruction, ?dynRetType),
DynamicMethodInvocation_DynParamTypes(?instruction, ?dynParamTypes),
DynamicMethodInvocation_HandleTag(?instruction, ?tag),
DynamicMethodInvocation_DynArity(?instruction, ?dynArity) :-
  _DynamicMethodInvocation(?instruction, ?index, ?bootSignature, ?dynName, ?dynRetType, ?dynArity, ?dynParamTypes, ?tag, ?method).
.decl _DynamicMethodInvocation_DynParamType(?invocation:DynamicMethodInvocation_Insn, ?idx:number, ?pType:Type)
.input _DynamicMethodInvocation_DynParamType(filename="DynamicMethodInvocation-ParamType.facts")
.decl _PolymorphicInvocation(?invocation:MethodInvocation, ?simpleName:symbol)
.input _PolymorphicInvocation(filename="PolymorphicInvocation.facts")
.decl _Throw(?instruction:Throw_Insn, ?index:number, ?var:Var, ?method:Method)
.input _Throw(filename="Throw.facts")
isThrow_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Throw(?instruction, ?var),
Throw_Var(?instruction, ?var) :-
  _Throw(?instruction, ?index, ?var, ?method).
.decl _ThrowNull(?instruction:ThrowNull_Insn, ?index:number, ?method:Method)
.input _ThrowNull(filename="ThrowNull.facts")
isThrowNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
  _ThrowNull(?instruction, ?index, ?method).
.decl _ExceptionHandler(?handler:ExceptionHandler, ?method:Method, ?index:number, ?type:ReferenceType, ?begin:number, ?end:number)
.input _ExceptionHandler(filename="ExceptionHandler.facts")
isExceptionHandler(?handler),
isInstruction(?handler),
Instruction_Index(?handler, ?index),
Instruction_Method(?handler, ?method),
ExceptionHandler_Method(?handler, ?method),
ExceptionHandler_Index(?handler, ?index),
ExceptionHandler_Type(?handler, ?type),
ExceptionHandler_Begin(?handler, ?begin),
ExceptionHandler_End(?handler, ?end) :-
  _ExceptionHandler(?handler, ?method, ?index, ?type, ?begin, ?end).
.input ExceptionHandler_FormalParam(filename="ExceptionHandler-FormalParam.facts")
.decl _Method(?method:Method, ?simplename:symbol, ?descriptor:symbol, ?declaringType:ReferenceType, ?returnType:Type, ?jvmDescriptor:JVMDescriptor, ?arity:number)
.input _Method(filename="Method.facts")
isMethod(?method),
isJVMDescriptor(?jvmDescriptor),
Method_SimpleName(?method, ?simplename),
Method_ParamTypes(?method, ?params),
Method_DeclaringType(?method, ?declaringType),
Method_JVMDescriptor(?method, ?jvmDescriptor),
Method_Arity(?method, ?arity),
Method_ReturnType(?method, ?returnType) :-
  _Method(?method, ?simplename, ?params, ?declaringType, ?returnType, ?jvmDescriptor, ?arity).
isMethodDescriptor(?descriptor),
Method_Descriptor(?method, ?descriptor) :-
  Method_ReturnType(?method, ?returnType),
  Method_ParamTypes(?method, ?params),
  ?descriptor = cat(?returnType, cat("(", cat(?params, ")"))).
.decl _StoreInstanceField(?instruction:StoreInstanceField_Insn, ?index:number, ?from:Var, ?base:Var, ?signature:Field, ?method:Method)
.input _StoreInstanceField(filename="StoreInstanceField.facts")
isStoreInstanceField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreInstanceField_Base(?instruction, ?base),
StoreInstanceField_From(?instruction, ?from) :-
  _StoreInstanceField(?instruction, ?index, ?from, ?base, ?signature, ?method).
.decl _LoadInstanceField(?instruction:LoadInstanceField_Insn, ?index:number, ?to:Var, ?base:Var, ?signature:Field, ?method:Method)
.input _LoadInstanceField(filename="LoadInstanceField.facts")
isLoadInstanceField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadInstanceField_Base(?instruction, ?base),
LoadInstanceField_To(?instruction, ?to) :-
  _LoadInstanceField(?instruction, ?index, ?to, ?base, ?signature, ?method).
.decl _StoreStaticField(?instruction:StoreStaticField_Insn, ?index:number, ?from:Var, ?signature:Field, ?method:Method)
.input _StoreStaticField(filename="StoreStaticField.facts")
isStoreStaticField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreStaticField_From(?instruction, ?from) :-
  _StoreStaticField(?instruction, ?index, ?from, ?signature, ?method).
.decl _LoadStaticField(?instruction:LoadStaticField_Insn, ?index:number, ?to:Var, ?signature:Field, ?method:Method)
.input _LoadStaticField(filename="LoadStaticField.facts")
isLoadStaticField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadStaticField_To(?instruction, ?to) :-
  _LoadStaticField(?instruction, ?index, ?to, ?signature, ?method).
.decl _StoreArrayIndex(?instruction:StoreArrayIndex_Insn, ?index:number, ?from:Var, ?base:Var, ?method:Method)
.input _StoreArrayIndex(filename="StoreArrayIndex.facts")
isStoreArrayIndex_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
StoreArrayIndex_Base(?instruction, ?base),
StoreArrayIndex_From(?instruction, ?from) :-
  _StoreArrayIndex(?instruction, ?index, ?from, ?base, ?method).
.decl _LoadArrayIndex(?instruction:LoadArrayIndex_Insn, ?index:number, ?to:Var, ?base:Var, ?method:Method)
.input _LoadArrayIndex(filename="LoadArrayIndex.facts")
isLoadArrayIndex_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
LoadArrayIndex_Base(?instruction, ?base),
LoadArrayIndex_To(?instruction, ?to) :-
  _LoadArrayIndex(?instruction, ?index, ?to, ?base, ?method).
.decl _ArrayInsnIndex(?instruction:Instruction, ?index:Var)
.input _ArrayInsnIndex(filename="ArrayInsnIndex.facts")
ArrayInsnIndex(?instruction, ?index) :-
  _ArrayInsnIndex(?instruction, ?index).
.decl _ArrayNumIndex(?instruction:Instruction, ?index:number)
.input _ArrayNumIndex(filename="ArrayNumIndex.facts")
ArrayNumIndex(?instruction, ?index) :-
  _ArrayNumIndex(?instruction, ?index).
.decl _Goto(?instruction:Goto_Insn, ?index:number, ?to:number, ?method:Method)
.input _Goto(filename="Goto.facts")
isGoto_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Goto_Target(?instruction, ?to) :-
  _Goto(?instruction, ?index, ?to, ?method).
.decl _If(?instruction:If_Insn, ?index:number, ?to:number, ?method:Method)
.input _If(filename="If.facts")
isIf_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
If_Target(?instruction, ?to) :-
  _If(?instruction, ?index, ?to, ?method).
.decl _TableSwitch(?instruction:TableSwitch_Insn, ?index:number, ?key:Var, ?method:Method)
.input _TableSwitch(filename="TableSwitch.facts")
isTableSwitch_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Switch_Key(?instruction, ?key) :-
  _TableSwitch(?instruction, ?index, ?key, ?method).
.decl _LookupSwitch(?instruction:LookupSwitch_Insn, ?index:number, ?key:Var, ?method:Method)
.input _LookupSwitch(filename="LookupSwitch.facts")
isLookupSwitch_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Switch_Key(?instruction, ?key) :-
  _LookupSwitch(?instruction, ?index, ?key, ?method).
.decl _TableSwitch_Target(?instruction:Switch_Insn, ?value:number, ?target:number)
.input _TableSwitch_Target(filename="TableSwitch-Target.facts")
Switch_Target(?instruction, ?value, ?target) :-
  _TableSwitch_Target(?instruction, ?value, ?target).
.decl _LookupSwitch_Target(?instruction:Switch_Insn, ?value:number, ?target:number)
.input _LookupSwitch_Target(filename="LookupSwitch-Target.facts")
Switch_Target(?instruction, ?value, ?target) :-
  _LookupSwitch_Target(?instruction, ?value, ?target).
.decl _TableSwitch_DefaultTarget(?instruction:Switch_Insn, ?target:number)
.input _TableSwitch_DefaultTarget(filename="TableSwitch-Default.facts")
Switch_DefaultTarget(?instruction, ?target) :-
  _TableSwitch_DefaultTarget(?instruction, ?target).
.decl _LookupSwitch_DefaultTarget(?instruction:Switch_Insn, ?target:number)
.input _LookupSwitch_DefaultTarget(filename="LookupSwitch-Default.facts")
Switch_DefaultTarget(?instruction, ?target) :-
  _LookupSwitch_DefaultTarget(?instruction, ?target).
.decl _Return(?instruction:ReturnNonvoid_Insn, ?index:number, ?var:Var, ?method:Method)
.input _Return(filename="Return.facts")
isReturnNonvoid_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
ReturnNonvoid_Var(?instruction, ?var) :-
  _Return(?instruction, ?index, ?var, ?method).
.decl _ReturnVoid(?instruction:ReturnVoid_Insn, ?index:number, ?method:Method)
.input _ReturnVoid(filename="ReturnVoid.facts")
isReturnVoid_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
  _ReturnVoid(?instruction, ?index, ?method).
.decl _AssignPhantomInvoke(?instruction:AssignPhantomInvoke, ?index:number, ?method:Method)
.input _AssignPhantomInvoke(filename="AssignPhantomInvoke.facts")
isAssignPhantomInvoke(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
  _AssignPhantomInvoke(?instruction, ?index, ?method).
.decl _BreakpointStmt(?instruction:BreakpointStmt, ?index:number, ?method:Method)
.input _BreakpointStmt(filename="BreakpointStmt.facts")
isBreakpointStmt(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
  _BreakpointStmt(?instruction, ?index, ?method).
.decl _UnsupportedInstruction(?instruction:UnsupportedInstruction, ?index:number, ?method:Method)
.input _UnsupportedInstruction(filename="UnsupportedInstruction.facts")
isUnsupportedInstruction(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
  _UnsupportedInstruction(?instruction, ?index, ?method).
isModifier(?x), Modifier_abstract(?x) :- ?x = "abstract".
isModifier(?x), Modifier_public(?x) :- ?x = "public".
isModifier(?x), Modifier_private(?x) :- ?x = "private".
isModifier(?x), Modifier_final(?x) :- ?x = "final".
isModifier(?x), Modifier_static(?x) :- ?x = "static".
isPrimitiveType(?t), Type_boolean(?t) :- ?t = "boolean".
isPrimitiveType(?t), Type_byte(?t) :- ?t = "byte".
isPrimitiveType(?t), Type_char(?t) :- ?t = "char".
isPrimitiveType(?t), Type_short(?t) :- ?t = "short".
isPrimitiveType(?t), Type_int(?t) :- ?t = "int".
isPrimitiveType(?t), Type_long(?t) :- ?t = "long".
isPrimitiveType(?t), Type_float(?t) :- ?t = "float".
isPrimitiveType(?t), Type_double(?t) :- ?t = "double".
isPrimitiveType(?t), Type_void(?t) :- ?t = "void".
isNullType(?t), Type_null(?t) :- ?t = "null_type".
isClassType(?t), Type_object(?t) :- ?t = "java.lang.Object".
.input Type_Annotation(filename="Type-Annotation.facts")
.input Method_Annotation(filename="Method-Annotation.facts")
.input Field_Annotation(filename="Field-Annotation.facts")
.input Param_Annotation(filename="Param-Annotation.facts")
isAnnotation(?annotation) :- isReferenceType(?annotation), Type_Annotation(_, ?annotation).
isAnnotation(?annotation) :- isReferenceType(?annotation), Method_Annotation(_, ?annotation).
isAnnotation(?annotation) :- isReferenceType(?annotation), Field_Annotation(_, ?annotation).
isAnnotation(?annotation) :- isReferenceType(?annotation), Param_Annotation(_, _, ?annotation).
.input AnnotationElement(filename="AnnotationElement.facts")
.decl PhantomType(?t:ReferenceType)
.input PhantomType(filename="PhantomType.facts")
.decl PhantomMethod(?m:Method)
.input PhantomMethod(filename="PhantomMethod.facts")
.decl PhantomBasedMethod(?m:Method)
.input PhantomBasedMethod(filename="PhantomBasedMethod.facts")
isHeapAllocation(?heap), isMethodHandleConstant(?heap), MethodHandleConstant_Method(?heap, ?method), HeapAllocation_Type(?heap, "java.lang.invoke.MethodHandle") :-
  MethodHandleConstant_Method(?heap, ?method).
isHeapAllocation(?null), HeapAllocation_Type(?null, ?type),
HeapAllocation_Null(?null) :-
  ?null = "<<null pseudo heap>>",
  Type_null(?type).
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type),
MainMethodArgArray(?heap) :-
  ?heap = "<<main method array>>",
  ?type = "java.lang.String[]".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type),
MainMethodArgArrayContent(?heap) :-
  ?heap = "<<main method array content>>",
  ?type = "java.lang.String".
ApplicationField(?field) :-
  Field_DeclaringType(?field, ?type),
  ApplicationClass(?type).
ApplicationMethod(?method) :-
  Method_DeclaringType(?method, ?class),
  ApplicationClass(?class).
ApplicationVar(?var) :-
  Var_DeclaringMethod(?var, ?method),
  ApplicationMethod(?method).
ApplicationInvocation(?invocation) :-
  isMethodInvocation(?invocation),
  Instruction_Method(?invocation, ?method),
  ApplicationMethod(?method).
ApplicationAllocation(?heap) :-
  isAssignHeapAllocation_Insn(?insn),
  Instruction_Method(?insn, ?method),
  ApplicationMethod(?method),
  AssignHeapAllocation_Heap(?insn, ?heap).
ConcreteClass(?class) :-
  isClassType(?class),
  !ClassModifier("abstract", ?class).
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/new java.lang.String[]/0",
  ?type = "java.lang.String[]".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/new java.lang.String/0",
  ?type = "java.lang.String".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<sun.misc.Perf: java.nio.ByteBuffer createLong(java.lang.String,int,int,long)>/new java.nio.DirectByteBuffer/0",
  ?type = "java.nio.DirectByteBuffer".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<string-constant>>",
  ?type = "java.lang.String".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<reflection-string-constant>>",
  ?type = "java.lang.String".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<string-buffer>>",
  ?type = "java.lang.StringBuffer".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<string-builder>>",
  ?type = "java.lang.StringBuilder".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<system-thread-group>>",
  ?type = "java.lang.ThreadGroup".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<main-thread-group>>",
  ?type = "java.lang.ThreadGroup".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<main-thread>>",
  ?type = "java.lang.Thread".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<initial-context>>",
  ?type = "java.lang.Object".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<jvm-startup-context>>",
  ?type = "java.lang.Object".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<jvm-startup-hcontext>>",
  ?type = "java.lang.Object".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<clinit-context>>",
  ?type = "java.lang.Object".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<immutable-context>>",
  ?type = "java.lang.Object".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<immutable-hcontext>>",
  ?type = "java.lang.Object".
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) :-
  ?heap = "<<immutable>>",
  ?type = "java.lang.Object".
.decl CreateIntValue(?n:symbol, ?declaringType:ReferenceType)
.decl NumConstantRawInt(?const:symbol)
.input NumConstantRawInt(filename="NumConstantRawInt.facts")
CreateIntValue(?const, "java.lang.Object") :- NumConstantRawInt(?const).
.decl XMLNode(?file:symbol, ?nodeId:symbol, ?parentNodeId:symbol, ?namespaceURI:symbol, ?localName:symbol, ?qName:symbol)
.input XMLNode(filename="XMLNode.facts")
.decl XMLNodeAttribute(?file:symbol, ?nodeId:symbol, ?index:symbol, ?localName:symbol, ?qName:symbol, ?value:symbol)
.input XMLNodeAttribute(filename="XMLNodeAttribute.facts")
.decl XMLNodeData(?file:symbol, ?nodeId:symbol, ?data:symbol)
.input XMLNodeData(filename="XMLNodeData.facts")
       
.comp Basic {
.decl AllocatedObjectSupportsFinalize(?heap:HeapAllocation, ?inmethod:Method)
.decl OverridesFinalize(?class:Type)
AllocatedObjectSupportsFinalize(?heap, ?inmethod) :-
    AssignHeapAllocation(?heap, _, ?inmethod),
    HeapAllocation_Type(?heap, ?class),
    OverridesFinalize(?class).
OverridesFinalize(?class) :-
    MethodLookup("finalize", "void()", ?class, ?method),
    ?method != "<java.lang.Object: void finalize()>".
.decl MethodLookup(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)
.decl _MethodLookup_WithLen(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method, ?len:number)
.decl _MethodLookup_MoreThanOne(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType)
.decl _MethodLookup_ClassResolution(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)
.decl _MethodLookup_ClosestInterface(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)
.decl _MethodLookup_MultiClosestInterfaces(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType)
.decl _MethodLookup_ImpossibleClosest(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)
MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
    _MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method, _),
    !_MethodLookup_MoreThanOne(?simplename, ?descriptor, ?type).
MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
    _MethodLookup_ClassResolution(?simplename, ?descriptor, ?type, ?method).
MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
    _MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method),
    !_MethodLookup_MultiClosestInterfaces(?simplename, ?descriptor, ?type).
MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
    _MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method),
    !_MethodLookup_ImpossibleClosest(?simplename, ?descriptor, ?type, ?method).
_MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method, 0) :-
    MethodImplemented(?simplename, ?descriptor, ?type, ?method).
_MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method, n + 1) :-
    DirectSuperclass(?type, ?supertype),
    _MethodLookup_WithLen(?simplename, ?descriptor, ?supertype, ?method, n),
    !MethodImplemented(?simplename, ?descriptor, ?type, _).
_MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method, n + 1) :-
    DirectSuperinterface(?type, ?supertype),
    _MethodLookup_WithLen(?simplename, ?descriptor, ?supertype, ?method, n),
    !MethodImplemented(?simplename, ?descriptor, ?type, _).
_MethodLookup_MoreThanOne(?simplename, ?descriptor, ?type) :-
    _MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method1, _),
    _MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method2, _),
    ?method1 != ?method2.
_MethodLookup_ClassResolution(?simplename, ?descriptor, ?type, ?method) :-
    _MethodLookup_MoreThanOne(?simplename, ?descriptor, ?type),
    _MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method, _),
    Method_DeclaringType(?method, ?supertype),
    isClassType(?supertype).
_MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method) :-
    _MethodLookup_MoreThanOne(?simplename, ?descriptor, ?type),
    ?minLen = min ?len : { _MethodLookup_WithLen(?simplename, ?descriptor, ?type, _, ?len) },
    _MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method, ?minLen),
    !_MethodLookup_ClassResolution(?simplename, ?descriptor, ?type, _).
_MethodLookup_MultiClosestInterfaces(?simplename, ?descriptor, ?type) :-
    _MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method1),
    _MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method2),
    ?method1 != ?method2.
_MethodLookup_ImpossibleClosest(?simplename, ?descriptor, ?type, ?method2) :-
    _MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method1),
    _MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method2),
    Method_DeclaringType(?method1, ?type1),
    Method_DeclaringType(?method2, ?type2),
    SubtypeOf(?type1, ?type2),
    ?type1 != ?type2.
.decl MethodImplemented(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)
.decl MethodOverridesOther(?methodSub:Method, ?methodSuper:Method)
MethodOverridesOther(?methSub, ?methSuper) :-
  SubtypeOf(?subtype, ?supertype),
  Method_DeclaringType(?methSuper, ?supertype),
  Method_SimpleName(?methSuper, ?simplename),
  Method_Descriptor(?methSuper, ?descriptor),
  MethodLookup(?simplename, ?descriptor, ?subtype, ?methSub),
  ?methSub != ?methSuper.
MethodLookup(?simplename, ?descriptor, ?arraytype, ?method) :-
    isArrayType(?arraytype),
    isType(?objectType),
    MethodImplemented(?simplename, ?descriptor, ?objectType, ?method),
    ?objectType = "java.lang.Object".
MethodImplemented(?simplename, ?descriptor, ?type, ?method) :-
    Method_SimpleName(?method, ?simplename),
    Method_Descriptor(?method, ?descriptor),
    Method_DeclaringType(?method, ?type),
    ! Method_Modifier("abstract", ?method).
.decl _BridgeMethod(?bridge:Method, ?name:symbol, ?type:Type)
.decl MethodMightBeCovariantBridge(?bridge:Method, ?meth:Method)
_BridgeMethod(?bridge, ?name, ?type) :-
   Method_Modifier("bridge", ?bridge),
   Method_SimpleName(?bridge, ?name),
   Method_DeclaringType(?bridge, ?type),
   ?name != "<clinit>",
   ?name != "<init>".
MethodMightBeCovariantBridge(?bridge, ?meth) :-
   Method_SimpleName(?meth, ?name),
   _BridgeMethod(?bridge, ?name, ?bridgetype),
   Method_DeclaringType(?meth, ?bridgetype),
   !Method_Modifier("bridge", ?meth).
.decl MethodNotCovariantBridge(?meth1:Method, ?meth2:Method)
MethodNotCovariantBridge(?meth1, ?meth2) :-
   MethodMightBeCovariantBridge(?meth1, ?meth2),
   FormalParam(?sameIndex, ?meth1, ?formal1),
   _Var_Type(?formal1, ?type1),
   FormalParam(?sameIndex, ?meth2, ?formal2),
   _Var_Type(?formal2, ?type2),
   ?type1 != ?type2.
MethodNotCovariantBridge(?meth1, ?meth2) :-
   MethodMightBeCovariantBridge(?meth1, ?meth2),
   FormalParam(?sameIndex, ?meth1, _),
   !FormalParam(?sameIndex, ?meth2, _).
MethodNotCovariantBridge(?meth1, ?meth2) :-
   MethodMightBeCovariantBridge(?meth1, ?meth2),
   FormalParam(?sameIndex, ?meth2, _),
   !FormalParam(?sameIndex, ?meth1, _).
.decl Method_CovariantBridge(?bridge:Method, ?cometh:Method)
Method_CovariantBridge(?bridge, ?cometh) :-
   MethodMightBeCovariantBridge(?bridge, ?cometh),
   !MethodNotCovariantBridge(?bridge, ?cometh),
   Method_ReturnType(?bridge, ?retType),
   Method_ReturnType(?cometh, ?coRetType),
   SubtypeOfDifferent(?coRetType, ?retType).
.decl MethodImplementedModuloCovariance(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)
MethodImplementedModuloCovariance(?name, ?descriptor, ?type, ?method) :-
    MethodImplemented(?name, ?descriptor, ?type, ?method).
MethodImplementedModuloCovariance(?name, ?descriptor, ?type, ?comethod) :-
    MethodImplementedModuloCovariance(?name, _, ?type, ?comethod),
    Method_CovariantBridge(?method, ?comethod),
    Method_SimpleName(?method, ?name),
    Method_Descriptor(?method, ?descriptor).
.decl ResolveInvocation(?type:Type, ?invocation:MethodInvocation, ?tomethod:Method)
.decl VirtualMethodInvocation_BaseType(?invocation:MethodInvocation, ?type:Type)
VirtualMethodInvocation_BaseType(?invocation, ?basetype) :-
    VirtualMethodInvocation_Base(?invocation, ?base),
    Var_Type(?base, ?basetype).
ResolveInvocation(?type, ?invocation, ?tomethod) :-
    VirtualMethodInvocation_SimpleName(?invocation, ?simplename),
    VirtualMethodInvocation_Descriptor(?invocation, ?descriptor),
    VirtualMethodInvocation_BaseType(?invocation, ?basetype),
    SubtypeOf(?type, ?basetype),
    MethodLookup(?simplename, ?descriptor, ?type, ?tomethod).
ResolveInvocation(?basetype, ?invocation, ?tomethod) :-
    SuperMethodInvocation_SimpleName(?invocation, ?simplename),
    SuperMethodInvocation_Descriptor(?invocation, ?descriptor),
    SuperMethodInvocation_Base(?invocation, ?base),
    Var_Type(?base, ?basetype),
    DirectSuperclass(?basetype, ?supertype),
    MethodLookup(?simplename, ?descriptor, ?supertype, ?tomethod).
.decl ConcreteMethodDeclared(?meth:Method, ?class:ClassType)
ConcreteMethodDeclared(?meth, ?class) :-
  isClassType(?class),
  Method_DeclaringType(?meth, ?class),
  !Method_Modifier("abstract", ?meth).
.decl MethodDeclaredOrInherited(?meth:Method, ?class:ReferenceType)
MethodDeclaredOrInherited(?meth, ?class) :-
  Method_DeclaringType(?meth, ?class).
MethodDeclaredOrInherited(?meth, ?class) :-
  MethodDeclaredOrInherited(?meth, ?superClass),
  DirectSuperclass(?class, ?superClass).
MethodDeclaredOrInherited(?meth, ?class) :-
  MethodDeclaredOrInherited(?meth, ?superInterface),
  !Method_Modifier("abstract", ?meth),
  DirectSuperinterface(?class, ?superInterface).
.decl MethodsOfSameOrSuperType(?method1:Method, ?method2:Method)
MethodsOfSameOrSuperType(?method1, ?method2) :-
  MethodDeclaredOrInherited(?method1, ?class),
  MethodDeclaredOrInherited(?method2, ?class).
.decl MethodsOfSameNonSDKType(?method1:Method, ?method2:Method, ?class:Type)
MethodsOfSameNonSDKType(?method1, ?method2, ?class) :-
  Method_DeclaringType(?method1, ?class),
  !match("java.*", ?class),
  !match("sun.*", ?class),
  Method_DeclaringType(?method2, ?class).
.decl Superinterface(?k:InterfaceType, ?c:ReferenceType)
Superinterface(?k, ?c) :-
    DirectSuperinterface(?c, ?k).
Superinterface(?k, ?c) :-
    DirectSuperinterface(?c, ?j),
    Superinterface(?k, ?j).
Superinterface(?k, ?c) :-
    DirectSuperclass(?c, ?super),
    Superinterface(?k, ?super).
.decl DirectSubclass(?a:ClassType, ?c:ClassType)
.decl Subclass(?c:ClassType, ?a:ClassType)
.decl Superclass(?c:ClassType, ?a:ClassType)
DirectSubclass(?a, ?c) :-
    DirectSuperclass(?a, ?c).
Subclass(?c, ?a) :-
    DirectSubclass(?a, ?c).
Subclass(?c, ?a) :-
    Subclass(?b, ?a),
    DirectSubclass(?b, ?c).
Superclass(?c, ?a) :-
    Subclass(?a, ?c).
.decl SubtypeOf(?subtype:Type, ?type:Type)
.decl SupertypeOf(?supertype:Type, ?type:Type)
.decl Unsubclassable(?type:ReferenceType)
.decl Subclassable(?type:ReferenceType)
.decl SubtypeOfDifferent(?subtype:Type, ?type:Type)
.decl ClassConstructor(?method:Method, ?type:ClassType)
SupertypeOf(?s, ?t) :-
    SubtypeOf(?t, ?s).
SubtypeOf(?s, ?s) :-
    isClassType(?s).
SubtypeOf(?s, ?t) :-
    Subclass(?t, ?s).
SubtypeOf(?s, ?t) :-
    isClassType(?s),
    Superinterface(?t, ?s).
SubtypeOf(?s, ?t) :-
    isInterfaceType(?s),
    isType(?t),
    ?t = "java.lang.Object".
SubtypeOf(?s, ?s) :-
    isInterfaceType(?s).
SubtypeOf(?s, ?t) :-
    isInterfaceType(?s),
    Superinterface(?t, ?s).
SubtypeOf(?s, ?t) :-
    isArrayType(?s),
    isType(?t),
    ?t = "java.lang.Object".
SubtypeOf(?s, ?t) :-
    isArrayType(?s),
    isArrayType(?t),
    ComponentType(?s, ?sc),
    ComponentType(?t, ?sc),
    isPrimitiveType(?sc).
SubtypeOf(?s, ?t) :-
    ComponentType(?s, ?sc),
    ComponentType(?t, ?tc),
    isReferenceType(?sc),
    isReferenceType(?tc),
    SubtypeOf(?sc, ?tc).
SubtypeOf(?s, ?t) :-
    isArrayType(?s),
    isInterfaceType(?t),
    isType(?t),
    ?t = "java.lang.Cloneable".
SubtypeOf(?s, ?t) :-
    isArrayType(?s),
    isInterfaceType(?t),
    isType(?t),
    ?t = "java.io.Serializable".
SubtypeOf(?s, ?t) :-
    Type_null(?s),
    isReferenceType(?t),
    ?t != ?s.
SubtypeOf(?s, ?t) :-
    Type_float(?s),
    Type_double(?t).
SubtypeOf(?s, ?t) :-
    Type_long(?s),
    Type_float(?t).
SubtypeOf(?s, ?t) :-
    Type_int(?s),
    Type_long(?t).
SubtypeOf(?s, ?t) :-
    Type_char(?s),
    Type_int(?t).
SubtypeOf(?s, ?t) :-
    Type_short(?s),
    Type_int(?t).
SubtypeOf(?s, ?t) :-
    Type_byte(?s),
    Type_short(?t).
SubtypeOf(?t, ?t) :-
    isType(?t).
SubtypeOfDifferent(?s, ?t) :-
    SubtypeOf(?s, ?t),
    ?s != ?t.
Unsubclassable("java.lang.ClassLoader").
Unsubclassable("java.lang.SecurityManager").
Subclassable(?type) :-
    ClassModifier("public", ?type),
    ! ClassModifier("final", ?type),
    ClassConstructor(?method, ?type),
    Method_Modifier("public", ?method),
    ! Unsubclassable(?type).
Subclassable(?type) :-
    ClassModifier("public", ?type),
    ! ClassModifier("final", ?type),
    ClassConstructor(?method, ?type),
    Method_Modifier("protected", ?method),
    ! Unsubclassable(?type).
ClassConstructor(method, type) :-
    isClassType(type),
    MethodLookup(_, _, type, method),
    isMethod(method),
    match(".*<init>.*", method).
.decl Class_InterestingSubtype(?class:ReferenceType, ?subClass:ReferenceType)
.decl _Valid_Type(?type:ReferenceType)
Class_InterestingSubtype(?class, ?subClass) :-
  SubtypeOf(?subClass, ?class),
  _Valid_Type(?class),
  _Valid_Type(?subClass).
_Valid_Type(?type) :-
  isReferenceType(?type),
  (isClassType(?type) ; isInterfaceType(?type)).
isIntegerType(?type) :-
  Type_byte(?type) ; Type_short(?type) ; Type_int(?type) ; Type_long(?type).
.decl PossibleNativeCodeTargetMethod(?method:Method, ?function:symbol, ?file:symbol)
PossibleNativeCodeTargetMethod(?method, ?function, ?file) :-
  _NativeMethodTypeCandidate(?file, ?function, ?descriptor, _),
  _NativeNameCandidate(?file, ?function, ?name, _),
  Method_SimpleName(?method, ?name),
  Method_JVMDescriptor(?method, ?descriptor).
PossibleNativeCodeTargetMethod(?method, "<<UNKNOWN>>", ?file) :-
  _NativeMethodTypeCandidate(?file, ?function, ?descriptor, _),
  _NativeNameCandidate(?file, ?function, ?name, _),
  _NativeXRef(?descriptor, ?file, _, ?descriptorRefAddr),
  _NativeXRef(?name, ?file, _, ?nameRefAddr),
  Method_SimpleName(?method, ?name),
  Method_JVMDescriptor(?method, ?descriptor),
  (?nameRefAddr - ?descriptorRefAddr) <= 15,
  (?descriptorRefAddr - ?nameRefAddr) <= 15 .
.decl PossibleNativeCodeTargetMethodLocalized(?method:Method, ?function:symbol, ?file:symbol)
PossibleNativeCodeTargetMethodLocalized(?method, ?function, ?file) :-
  PossibleNativeCodeTargetMethod(?method, ?function, ?file),
  ?function != "-".
.decl OverloadedJNIMethod(?javaMethod:Method, ?type:ReferenceType, ?name:symbol, ?descriptor:symbol)
OverloadedJNIMethod(?javaMethod, ?type, ?name, ?descriptor) :-
  Method_Modifier("native", ?javaMethod),
  Method_SimpleName(?javaMethod, ?name),
  Method_Descriptor(?javaMethod, ?descriptor),
  Method_DeclaringType(?javaMethod, ?type),
  MethodLookup(?name, _, ?type, ?method1),
  MethodLookup(?name, _, ?type, ?method2),
  ?method1 != ?method2.
.decl JNIMethod_NativeId(?javaMethod:Method, ?nativeId:symbol)
JNIMethod_NativeId(?javaMethod, ?nativeId) :-
  _NativeMethodId(?javaMethod, ?nativeId),
  isMethod(?javaMethod).
JNIMethod_NativeId(?javaMethod, ?nativeId) :-
  OverloadedJNIMethod(?javaMethod, _, _, ?descriptor),
  _NativeMethodId(?javaMethod, ?nativeIdBase),
  ?nativeId = cat(?nativeIdBase, cat("__", ?descriptor)).
.decl MainMethodDeclaration(?method:Method)
MainMethodDeclaration(?method) :-
   MainClass(?type),
   Method_DeclaringType(?method, ?type),
   Method_SimpleName(?method, "main"),
   Method_Descriptor(?method, "void(java.lang.String[])"),
   Method_Modifier("public", ?method),
   Method_Modifier("static", ?method).
}
.init basic = Basic
       
.comp AbstractContextSensitivity<Configuration> {
.decl ClassInitializer(?type:Type, ?method:Method)
.decl InitializedClass(?classOrInterface:Type)
.decl Instruction_Throws(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?insn:Instruction)
.decl ExceptionHandler_InRange(?handler:ExceptionHandler, ?instruction:Instruction)
.decl ExceptionHandler_Before(?before:ExceptionHandler, ?handler:ExceptionHandler)
.decl ThrowPointsTo(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?method:Method)
.decl ExceptionHandler_SameInsn_Repr(?insn:Instruction, ?repr:ExceptionHandler)
.decl ExceptionHandler_SameInsn_PartialOrder(?h1:ExceptionHandler, ?h2:ExceptionHandler, ?insn:Instruction)
.decl ExceptionHandler_SameBlock_Repr(?handler:ExceptionHandler, ?repr:ExceptionHandler)
.decl ExceptionHandler_SameBlock_PartialOrder(?repr:ExceptionHandler, ?handler:ExceptionHandler)
.decl ExceptionHandler_TypeIsCaught(?type:Type, ?block:ExceptionHandler)
.decl ExceptionHandler_Impossible(?type:Type, ?h2:ExceptionHandler, ?insn:Instruction)
.decl ImplicitReachable(?sig:Method)
.decl ApplicationEntryPoint(?meth:Method)
.decl ForcedReachable(?method:Method)
.decl RunningThread(?hctx:configuration.HContext, ?value:Value)
.decl ReachableCurrentThreadInvocation(?callerCtx:configuration.Context, ?local:Var)
.decl FakeInvocation_ThreadGroupInit(?invo: MethodInvocation)
.decl FakeInvocation_MainThreadInit(?invo: MethodInvocation)
.decl FakeInvocation_SystemThreadGroupInit(?invo: MethodInvocation)
.decl StringFactoryVar(?var:Var)
.decl StringFactoryVarPointsTo(?factoryHctx:configuration.HContext, ?factoryValue:Value, ?ctx:configuration.Context, ?var:Var)
StringFactoryVar(?var) :-
  StringFactoryType(?type),
  Var_Type(?var, ?type).
StringFactoryVarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?var) :-
  StringFactoryVar(?var),
  VarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?var).
.decl VarAssignedToStringFactoryVar(?param:Var, ?base:Var)
VarAssignedToStringFactoryVar(?param, ?base) :-
  VirtualMethodInvocation_SimpleName(?invocation, "append"),
  VirtualMethodInvocation_Base(?invocation, ?base),
  StringFactoryVar(?base),
  ActualParam(0, ?invocation, ?param).
.decl VarAssignedFromStringFactoryVar(?ret:Var, ?base:Var)
VarAssignedFromStringFactoryVar(?ret, ?base) :-
  VirtualMethodInvocation_SimpleName(?invocation, "toString"),
  VirtualMethodInvocation_Base(?invocation, ?base),
  StringFactoryVar(?base),
  AssignReturnValue(?invocation, ?ret).
.decl VarFlowsIntoStringFactory(?factoryHctx:configuration.HContext, ?factoryValue:Value, ?ctx:configuration.Context, ?var:Var)
VarFlowsIntoStringFactory(?factoryHctx, ?factoryValue, ?ctx, ?var) :-
  VarOfReflectionInterest(?ctx, ?var),
  VarAssignedToStringFactoryVar(?var, ?factoryVar),
  StringFactoryVarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?factoryVar).
  .plan 1:(3,2,1)
.decl VarFlowsFromStringFactory(?ctx:configuration.Context, ?var:Var, ?factoryHctx:configuration.HContext, ?factoryValue:Value)
VarFlowsFromStringFactory(?ctx, ?var, ?factoryHctx, ?factoryValue) :-
  VarAssignedFromStringFactoryVar(?var, ?factoryVar),
  StringFactoryVarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?factoryVar).
.decl VarOfReflectionInterest(?ctx:configuration.Context, ?var:Var)
.decl ReflectionStringConstantVarPointsTo(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)
VarOfReflectionInterest(?ctx, ?var),
ReflectionStringConstantVarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  ReflectionSubstringObject(?value),
  VarPointsTo(?hctx, ?value, ?ctx, ?var).
.decl ReflectionStringConstantFlowsIntoStringFactory(?hctx:configuration.HContext, ?value:Value, ?factoryHctx:configuration.HContext, ?factoryValue:Value)
ReflectionStringConstantFlowsIntoStringFactory(?hctx, ?value, ?factoryHctx, ?factoryValue) :-
  VarFlowsIntoStringFactory(?factoryHctx, ?factoryValue, ?ctx, ?var),
  ReflectionStringConstantVarPointsTo(?hctx, ?value, ?ctx, ?var).
VarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  ReflectionStringConstantFlowsIntoStringFactory(?hctx, ?value, ?factoryHctx, ?factoryValue),
  VarFlowsFromStringFactory(?ctx, ?var, ?factoryHctx, ?factoryValue).
Instruction_Throws(?hctx, ?value, ?ctx, ?insn) :-
  Throw(?insn, ?var),
  VarPointsTo(?hctx, ?value, ?ctx, ?var).
Instruction_Throws(?hctx, ?value, ?callerCtx, ?invocation) :-
  ThrowPointsTo(?hctx, ?value, ?calleeCtx, ?tomethod),
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod).
 .plan 1:(2,1)
ThrowPointsTo(?hctx, ?value, ?ctx, ?method) :-
  Instruction_Throws(?hctx, ?value, ?ctx, ?insn),
  Instruction_Method(?insn, ?method),
  !ExceptionHandler_InRange(_, ?insn).
ThrowPointsTo(?hctx, ?value, ?ctx, ?method) :-
  Instruction_Throws(?hctx, ?value, ?ctx, ?insn),
  Value_Type(?value, ?valueType),
  Instruction_Method(?insn, ?method),
  ExceptionHandler_SameInsn_Repr(?insn, ?repr),
  ExceptionHandler_SameBlock_Repr(?repr, ?block),
  !ExceptionHandler_TypeIsCaught(?valueType, ?block).
 .plan 1:(2,1,3,4,5)
VarPointsTo(?hctx, ?value, ?ctx, ?param) :-
  Instruction_Throws(?hctx, ?value, ?ctx, ?insn),
  Value_Type(?value, ?valueType),
  ExceptionHandler_InRange(?handler, ?insn),
  ExceptionHandler_Type(?handler, ?handlerType),
  basic.SubtypeOf(?valueType, ?handlerType),
  ConcreteClass(?valueType),
  ExceptionHandler_FormalParam(?handler, ?param),
  !ExceptionHandler_Impossible(?valueType, ?handler, ?insn).
 .plan 1:(2,1,3,4,5,6,7)
ExceptionHandler_TypeIsCaught(?type, ?block) :-
  ExceptionHandler_InRange(?handler, ?insn),
  ExceptionHandler_SameInsn_Repr(?insn, ?repr),
  ExceptionHandler_SameBlock_Repr(?repr, ?block),
  ExceptionHandler_Type(?handler, ?handlerType),
  basic.SubtypeOf(?type, ?handlerType),
  ConcreteClass(?type).
ExceptionHandler_Impossible(?type, ?h2, ?insn) :-
  ExceptionHandler_InRange(?h1, ?insn),
  ExceptionHandler_InRange(?h2, ?insn),
  ExceptionHandler_Before(?h1, ?h2),
  ExceptionHandler_Type(?h1, ?h1Type),
  ExceptionHandler_Type(?h2, ?h2Type),
  basic.SubtypeOf(?type, ?h1Type),
  basic.SubtypeOf(?type, ?h2Type),
  ConcreteClass(?type).
ExceptionHandler_InRange(?handler, ?instruction) :-
  ExceptionHandler_Method(?handler, ?method),
  Instruction_Method(?instruction, ?method),
  Instruction_Index(?instruction, ?index),
  ExceptionHandler_Begin(?handler, ?beginIndex),
  ?beginIndex <= ?index,
  ExceptionHandler_End(?handler, ?endIndex),
  ?endIndex > ?index.
ExceptionHandler_Before(?previous, ?handler) :-
  ExceptionHandler_Previous(?handler, ?previous).
ExceptionHandler_Before(?before, ?handler) :-
  ExceptionHandler_Before(?middle, ?handler),
  ExceptionHandler_Previous(?middle, ?before).
ExceptionHandler_SameInsn_PartialOrder(?h1, ?h2, ?insn) :-
  ExceptionHandler_InRange(?h1, ?insn),
  ExceptionHandler_InRange(?h2, ?insn),
  ExceptionHandler_Before(?h1, ?h2).
ExceptionHandler_SameInsn_Repr(?insn, ?handler) :-
  ExceptionHandler_InRange(?handler, ?insn),
  !ExceptionHandler_SameInsn_PartialOrder(_, ?handler, ?insn).
ExceptionHandler_SameBlock_PartialOrder(?h1, ?h2) :-
  ExceptionHandler_Before(?h1, ?h2),
  ExceptionHandler_Index(?h1, ?h1Index),
  ExceptionHandler_Index(?h2, ?h2Index),
  ?h1Index = ?h2Index.
ExceptionHandler_SameBlock_Repr(?handler, ?handler) :-
  isExceptionHandler(?handler),
  !ExceptionHandler_SameBlock_PartialOrder(_, ?handler).
ExceptionHandler_SameBlock_Repr(?handler, ?repr) :-
  ExceptionHandler_SameBlock_PartialOrder(?repr, ?handler),
  !ExceptionHandler_SameBlock_PartialOrder(_, ?repr).
.type MethodType = Value
.type ParamTypes = symbol
.decl MethodType_ParamType(?mt:MethodType, ?index:number, ?pType:Type)
.decl MethodType_ParamTypes(?mt:MethodType, ?paramTypes:ParamTypes)
.decl MethodType_ReturnType(?mt:MethodType, ?retType:Type)
.decl MethodType_Arity(?mt:MethodType, ?arity:number)
.decl isInitialMethodType(?mt:MethodType)
MethodType_ParamType(?mt, ?idx, ?type) :- _MethodTypeConstantParam(?mt, ?idx, ?type).
MethodType_Arity(?mt, ?arity) :- MethodTypeConstant_Arity(?mt, ?arity).
MethodType_ReturnType(?mt, ?retType) :- MethodTypeConstant_ReturnType(?mt, ?retType).
MethodType_ParamTypes(?mt, ?paramTypes) :- MethodTypeConstant_ParamTypes(?mt, ?paramTypes).
HeapAllocation_ContextInsensitive(?heap) :-
  isMethodHandleConstant(?heap).
.type MethodHandle = Value
.decl MethodHandle_Method(?methodHandle:MethodHandle, ?method:Method)
.decl MethodHandle_MethodType(?mh:MethodHandle, ?mt:MethodType)
Value_isMock(?mt), isValue(?mt), Value_Type(?mt, "java.lang.invoke.MethodType"), Value_DeclaringType(?mt, "java.lang.Object"),
isInitialMethodType(?mt),
MethodHandle_Method(?methodHandle, ?method),
MethodHandle_MethodType(?methodHandle, ?mt),
MethodType_Arity(?mt, ?arity),
MethodType_ParamTypes(?mt, ?paramTypes),
MethodType_ReturnType(?mt, ?retType) :-
  MethodHandleConstant_Method(?methodHandle, ?method),
  MethodHandleConstant_ParamTypes(?methodHandle, ?paramTypes),
  MethodHandleConstant_ReturnType(?methodHandle, ?retType),
  MethodHandleConstant_Arity(?methodHandle, ?arity),
  ?mt = cat("<method type (", cat(?paramTypes, cat(")", cat(?retType, ">")))).
.decl MethodHandleCallGraphEdge_Candidate(?callerCtx:configuration.Context, ?i:MethodInvocation, ?m:Method, ?mh:MethodHandle, ?name:symbol)
MethodHandleCallGraphEdge_Candidate(?callerCtx, ?invo, ?method, ?mh, ?name) :-
  ReachableContext(?callerCtx, ?containingMethod),
  (_VirtualMethodInvocation(?invo, _, _, ?base, ?containingMethod) ;
   _SpecialMethodInvocation(?invo, _, _, ?base, ?containingMethod)),
  _PolymorphicInvocation(?invo, ?name),
  VarPointsTo(_, ?mh, ?callerCtx, ?base),
  MethodHandle_Method(?mh, ?method).
.plan 1:(4,5,2,1,3), 2:(5,4,2,1,3)
.decl MethodHandleCallGraphEdge(?callerCtx:configuration.Context, ?i:MethodInvocation, ?calleeCtx:configuration.Context, ?m:Method, ?mh:MethodHandle, ?name:symbol)
configuration.StaticContextRequest(?callerCtx, ?invo) :-
  MethodHandleCallGraphEdge_Candidate(?callerCtx, ?invo, ?method, _, _),
  Method_Modifier("static", ?method).
MethodHandleCallGraphEdge(?callerCtx, ?invo, ?calleeCtx, ?method, ?mh, ?name) :-
  configuration.StaticContextResponse(?callerCtx, ?invo, ?calleeCtx),
  MethodHandleCallGraphEdge_Candidate(?callerCtx, ?invo, ?method, ?mh, ?name).
MethodHandleCallGraphEdge(?callerCtx, ?invo, ?calleeCtx, ?method, ?mh, ?name) :-
  MethodHandleCallGraphEdge_Candidate(?callerCtx, ?invo, ?method, ?mh, ?name),
  !Method_Modifier("static", ?method),
  isImmutableContext(?calleeCtx).
ReachableContext(?calleeCtx, ?method) :-
  MethodHandleCallGraphEdge(_, _, ?calleeCtx, ?method, _, _).
.decl BoxTypeConversion(?original:Type, ?new:Type)
.decl BoxAllocation(?value:Value, ?type:Type)
BoxTypeConversion(?t1, ?t2),
Value_isMock(?mockAlloc), isValue(?mockAlloc), Value_Type(?mockAlloc, ?t2), Value_DeclaringType(?mockAlloc, "java.lang.Object"),
BoxAllocation(?mockAlloc, ?t2) :-
  PrimitiveType_Boxed(?t1, ?wrapperT),
  basic.SubtypeOf(?wrapperT, ?t2),
  ?mockAlloc = cat("<mock box allocation for type ", cat(?t2, ">")).
BoxTypeConversion(?t1, ?t2) :- PrimitiveType_Boxed(?t1, _), isNullType(?t2).
BoxTypeConversion(?t1, ?t2) :- PrimitiveType_Boxed(_, ?t2), isNullType(?t1).
BoxTypeConversion(?t1, ?t2) :- BoxTypeConversion(?t2, ?t1).
.decl CompatibleTypes(?t:Type, ?tConv:Type)
CompatibleTypes(?t, ?tConv) :- basic.SubtypeOf(?tConv, ?t).
CompatibleTypes(?t, ?tConv) :- BoxTypeConversion(?t, ?tConv).
.decl MethodHandleCGE_Arg(?callerCtx:configuration.Context, ?calleeCtx:configuration.Context, ?actual:Var, ?formal:Var, ?actualType:Type, ?formalType:Type, ?name:symbol)
MethodHandleCGE_Arg(?callerCtx, ?calleeCtx, ?actual, ?formal, ?actualType, ?formalType, ?name) :-
  MethodHandleCallGraphEdge(?callerCtx, ?invo, ?calleeCtx, ?method, _, ?name),
  !Method_Modifier("static", ?method),
  ActualParam(?idx, ?invo, ?actual),
  ?idx > 0,
  FormalParam(?idx - 1, ?method, ?formal),
  Var_Type(?actual, ?actualType),
  Var_Type(?formal, ?formalType).
MethodHandleCGE_Arg(?callerCtx, ?calleeCtx, ?actual, ?formal, ?actualType, ?formalType, ?name) :-
  MethodHandleCallGraphEdge(?callerCtx, ?invo, ?calleeCtx, ?method, _, ?name),
  Method_Modifier("static", ?method),
  ActualParam(?idx, ?invo, ?actual),
  FormalParam(?idx, ?method, ?formal),
  Var_Type(?actual, ?actualType),
  Var_Type(?formal, ?formalType).
VarPointsTo(?hctx, ?val, ?calleeCtx, ?formal) :-
  MethodHandleCGE_Arg(?callerCtx, ?calleeCtx, ?actual, ?formal, ?actualType, ?formalType, _),
  VarPointsTo(?hctx, ?val, ?callerCtx, ?actual),
  basic.SubtypeOf(?actualType, ?formalType).
VarPointsTo(?hctx, ?val, ?calleeCtx, ?this) :-
  MethodHandleCallGraphEdge(?callerCtx, ?invo, ?calleeCtx, ?method, _, _),
  !Method_Modifier("static", ?method),
  ActualParam(0, ?invo, ?actual),
  VarPointsTo(?hctx, ?val, ?callerCtx, ?actual),
  ThisVar(?method, ?this),
  Var_Type(?actual, ?actualType),
  Var_Type(?this, ?thisType),
  basic.SubtypeOf(?actualType, ?thisType).
VarPointsTo(?hctx, ?val, ?callerCtx, ?var) :-
  MethodHandleCallGraphEdge(?callerCtx, ?invo, ?calleeCtx, ?method, _, _),
  ReturnVar(?ret, ?method),
  VarPointsTo(?hctx, ?val, ?calleeCtx, ?ret),
  AssignReturnValue(?invo, ?var),
  Var_Type(?ret, ?retType),
  Var_Type(?var, ?varType),
  CompatibleTypes(?retType, ?varType).
OpaqueCallGraphEdge(?invo, ?sig),
Value_isMock(?adapterMH), isValue(?adapterMH), Value_Type(?adapterMH, "java.lang.invoke.MethodHandle"), Value_DeclaringType(?adapterMH, "java.lang.Object"),
VarPointsTo(?hctx, ?adapterMH, ?ctx, ?ret),
MethodHandle_Method(?adapterMH, ?mhMethod),
MethodHandle_MethodType(?adapterMH, ?mt) :-
  _VirtualMethodInvocation(?invo, _, ?sig, ?base, ?method),
  ReachableContext(?ctx, ?method),
  ?sig = "<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>",
  VarPointsTo(?hctx, ?mh, ?ctx, ?base),
  ActualParam(0, ?invo, ?arg),
  VarPointsTo(_, ?mt, ?ctx, ?arg),
  AssignReturnValue(?invo, ?ret),
  MethodHandle_Method(?mh, ?mhMethod),
  Method_ParamTypes(?mhMethod, _),
  ?adapterMH = cat("<adapter for ", cat(?mh, cat(" as ", ?mt))).
.decl MHLookup_Type(?value:Value, ?type:Type)
VarPointsTo(?hctx, ?value, ?calleeCtx, ?thisVar),
VarPointsTo(?hctx, ?value, ?callerCtx, ?ret),
Value_isMock(?value), isValue(?value), Value_Type(?value, ?type), Value_DeclaringType(?value, "java.lang.Object") :-
  MethodHandleCallGraphEdge(?callerCtx, ?invo, ?calleeCtx, ?method, ?mh, _),
  basic.ClassConstructor(?method, ?type),
  ThisVar(?method, ?thisVar),
  isImmutableHContext(?hctx),
  ?value = cat(?type, cat(" value constructed by method handle ", ?mh)),
  AssignReturnValue(?invo, ?ret),
  Var_Type(?ret, ?retType),
  basic.SubtypeOf(?type, ?retType).
.decl ReachableInvokedynamic(?invokedynamic:DynamicMethodInvocation_Insn, ?dynName:symbol, ?dynRetType:Type, ?ctx:configuration.Context)
ReachableInvokedynamic(?invokedynamic, ?dynName, ?dynRetType, ?ctx) :-
  isDynamicMethodInvocation_Insn(?invokedynamic),
  Instruction_Method(?invokedynamic, ?inMethod),
  DynamicMethodInvocation_DynName(?invokedynamic, ?dynName),
  DynamicMethodInvocation_DynReturnType(?invokedynamic, ?dynRetType),
  ReachableContext(?ctx, ?inMethod).
.decl isBootstrapMethodContext(?ctx:configuration.Context)
isBootstrapMethodContext(?ctx) :- isImmutableContext(?ctx).
.decl InvokedynamicBootCallGraphEdge(?callerCtx:configuration.Context, ?invokedynamic:DynamicMethodInvocation_Insn, ?calleeCtx:configuration.Context, ?bootMethod:Method)
InvokedynamicBootCallGraphEdge(?callerCtx, ?invokedynamic, ?calleeCtx, ?bootMethod) :-
  ReachableInvokedynamic(?invokedynamic, _, _, ?callerCtx),
  DynamicMethodInvocation_Bootstrap(?invokedynamic, ?bootMethod),
  isBootstrapMethodContext(?calleeCtx).
ReachableContext(?calleeCtx, ?bootMethod) :-
  InvokedynamicBootCallGraphEdge(_, _, ?calleeCtx, ?bootMethod).
.decl Invokedynamic_MethodType(?invokedynamic:DynamicMethodInvocation_Insn, ?mt:MethodType)
.decl PopulateMTParamTypes(?mt:Value, ?invokedynamic:DynamicMethodInvocation_Insn)
Value_isMock(?mt), isValue(?mt), Value_Type(?mt, "java.lang.invoke.MethodType"), Value_DeclaringType(?mt, "java.lang.Object"),
MethodType_ReturnType(?mt, ?dynRetType),
PopulateMTParamTypes(?mt, ?invokedynamic),
Invokedynamic_MethodType(?invokedynamic, ?mt) :-
  InvokedynamicBootCallGraphEdge(_, ?invokedynamic, _, _),
  DynamicMethodInvocation_DynReturnType(?invokedynamic, ?dynRetType),
  DynamicMethodInvocation_DynParamTypes(?invokedynamic, ?dynParamTypes),
  ?mt = cat("<method type (", cat(?dynParamTypes, cat(")", cat(?dynRetType, ">")))).
MethodType_ParamType(?mt, ?index, ?pType) :-
  PopulateMTParamTypes(?mt, ?invokedynamic),
  _DynamicMethodInvocation_DynParamType(?invokedynamic, ?index, ?pType).
VarPointsTo(?immHctx, ?mockMHLookup, ?calleeCtx, ?caller),
VarPointsTo(?immHctx, ?mt, ?calleeCtx, ?invokedTypeParam),
Value_isMock(?mockMHLookup), isValue(?mockMHLookup), Value_Type(?mockMHLookup, "java.lang.invoke.MethodHandles$Lookup"), Value_DeclaringType(?mockMHLookup, "java.lang.Object"),
MHLookup_Type(?mockMHLookup, ?callerClass) :-
  InvokedynamicBootCallGraphEdge(_, ?invokedynamic, ?calleeCtx, ?bootMethod),
  FormalParam(0, ?bootMethod, ?caller),
  FormalParam(2, ?bootMethod, ?invokedTypeParam),
  Invokedynamic_MethodType(?invokedynamic, ?mt),
  isImmutableHContext(?immHctx),
  Instruction_Method(?invokedynamic, ?method),
  Method_DeclaringType(?method, ?callerClass),
  ?mockMHLookup = cat("<mock method handles lookup object for type ", cat(?callerClass, ">")).
VarPointsTo(?immHctx, ?invokedName, ?calleeCtx, ?invokedNameParam) :-
  InvokedynamicBootCallGraphEdge(_, ?invokedynamic, ?calleeCtx, ?bootMethod),
  isStringConstant(?invokedName),
  FormalParam(1, ?bootMethod, ?invokedNameParam),
  DynamicMethodInvocation_DynName(?invokedynamic, ?invokedName),
  isImmutableHContext(?immHctx).
.decl MethodVarArgs(?method:Method, ?idx:number, ?formal:Var, ?type:ArrayType)
MethodVarArgs(?method, ?idx, ?formal, ?type) :-
  Method_Modifier("varargs", ?method),
  Method_Arity(?method, ?arity),
  ?idx = ?arity - 1,
  FormalParam(?idx, ?method, ?formal),
  Var_Type(?formal, ?type),
  isArrayType(?type).
ArrayIndexPointsTo(?immHctx, ?val, ?immHctx, ?mockArray),
Value_isMock(?mockArray), isValue(?mockArray), Value_Type(?mockArray, ?varArgsType), Value_DeclaringType(?mockArray, "java.lang.Object"),
VarPointsTo(?immHctx, ?mockArray, ?calleeCtx, ?formalVarArgs) :-
  InvokedynamicBootCallGraphEdge(_, ?invokedynamic, ?calleeCtx, ?bootMethod),
  MethodVarArgs(?bootMethod, ?bootIdx, ?formalVarArgs, ?varArgsType),
  BootstrapParam(?idx, ?invokedynamic, ?actual),
  ?idx > ?bootIdx - 3,
  VarPointsTo(_, ?val, _, ?actual),
  isImmutableHContext(?immHctx),
  ?mockArray = cat("<bootstrap varargs array for ", cat(?invokedynamic, ">")).
VarPointsTo(?hctx, ?val, ?calleeCtx, ?formal) :-
  InvokedynamicBootCallGraphEdge(_, ?invokedynamic, ?calleeCtx, ?bootMethod),
  !Method_Modifier("varargs", ?bootMethod),
  FormalParam(?idx + 3, ?bootMethod, ?formal),
  BootstrapParam(?idx, ?invokedynamic, ?actual),
  VarPointsTo(?hctx, ?val, _, ?actual).
.type CallSite = Value
.decl InvokedynamicCallSite(?callsite:CallSite, ?invokedynamic:DynamicMethodInvocation_Insn, ?dynName:symbol, ?K:number, ?ctx:configuration.Context)
InvokedynamicCallSite(?callsite, ?invokedynamic, ?dynName, ?K, ?callerCtx) :-
  ReachableInvokedynamic(?invokedynamic, ?dynName, _, ?callerCtx),
  DynamicMethodInvocation_DynArity(?invokedynamic, ?K),
  DynamicMethodInvocation_Bootstrap(?invokedynamic, ?bootMethod),
  ReturnVar(?bootRetVar, ?bootMethod),
  isBootstrapMethodContext(?calleeCtx),
  VarPointsTo(_, ?callsite, ?calleeCtx, ?bootRetVar).
.decl CallSiteContents(?invokedynamic:DynamicMethodInvocation_Insn, ?methodHandle:MethodHandle, ?method:Method, ?mt:MethodType, ?ctx:configuration.Context)
CallSiteContents(?invokedynamic, ?methodHandle, ?method, ?mt, ?ctx) :-
  InvokedynamicCallSite(?callsite, ?invokedynamic, _, _, ?ctx),
  Invokedynamic_MethodType(?invokedynamic, ?mt),
  InstanceFieldPointsTo(_, ?methodHandle, "<java.lang.invoke.CallSite: java.lang.invoke.MethodHandle target>", _, ?callsite),
  MethodHandle_Method(?methodHandle, ?method).
.decl CallSiteMatchesMethodHandleType(?invokedynamic:DynamicMethodInvocation_Insn, ?mh:MethodHandle, ?method:Method, ?ctx:configuration.Context)
CallSiteMatchesMethodHandleType(?invokedynamic, ?mh, ?method, ?ctx) :-
  CallSiteContents(?invokedynamic, ?mh, ?method, ?mtDyn, ?ctx),
  MethodHandle_MethodType(?mh, ?mtDyn).
CallSiteMatchesMethodHandleType(?invokedynamic, ?mh, ?method, ?ctx) :-
  CallSiteContents(?invokedynamic, ?mh, ?method, ?mt, ?ctx),
  MethodType_ReturnType(?mt, ?dynRetType),
  basic.ClassConstructor(?method, ?dynRetType),
  MethodHandle_Method(?mh, ?method).
.decl StaticMethodHandleCall(?callerCtx:configuration.Context, ?invo:MethodInvocation, ?method:Method, ?mh:MethodHandle)
StaticMethodHandleCall(?callerCtx, ?invokedynamic, ?method, ?mh),
configuration.StaticContextRequest(?callerCtx, ?invokedynamic) :-
  CallSiteMatchesMethodHandleType(?invokedynamic, ?mh, ?method, ?callerCtx),
  Method_Modifier("static", ?method).
MethodHandleCallGraphEdge(?callerCtx, ?invokedynamic, ?calleeCtx, ?method, ?mh, "invokeExact") :-
  StaticMethodHandleCall(?callerCtx, ?invokedynamic, ?method, ?mh),
  configuration.StaticContextResponse(?callerCtx, ?invokedynamic, ?calleeCtx).
MethodHandleCallGraphEdge(?callerCtx, ?invokedynamic, ?calleeCtx, ?method, ?mh, "invokeExact") :-
  CallSiteMatchesMethodHandleType(?invokedynamic, ?mh, ?method, ?callerCtx),
  !Method_Modifier("static", ?method),
  isImmutableContext(?calleeCtx).
ReachableContext(?calleeCtx, ?callee) :-
  MethodHandleCallGraphEdge(_, _, ?calleeCtx, ?callee, _, _).
.decl LambdaMetafactoryInvoke(?invokedynamic:DynamicMethodInvocation_Insn)
LambdaMetafactoryInvoke(?invokedynamic) :-
  DynamicMethodInvocation_Bootstrap(?invokedynamic, ?method),
  (?method = "<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>" ; ?method = "<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite altMetafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.Object[])>").
.decl ReachableLambdaMetafactoryInvoke(?invokedynamic:DynamicMethodInvocation_Insn, ?dynName:symbol, ?dynRetType:Type, ?ctx:configuration.Context)
ReachableLambdaMetafactoryInvoke(?invokedynamic, ?dynName, ?dynRetType, ?ctx) :-
  LambdaMetafactoryInvoke(?invokedynamic),
  ReachableInvokedynamic(?invokedynamic, ?dynName, ?dynRetType, ?ctx).
.decl UnhandledInvokedynamic(?invokedynamic:DynamicMethodInvocation_Insn, ?bootMethodId:symbol)
UnhandledInvokedynamic(?invokedynamic, ?bootMethodId) :-
  DynamicMethodInvocation_Bootstrap(?invokedynamic, ?bootMethodId),
  !LambdaMetafactoryInvoke(?invokedynamic).
.type Lambda = Value
.decl LambdaObject(?invokedynamic:DynamicMethodInvocation_Insn, ?lambda:Lambda, ?dynName:symbol, ?K:number, ?implMethod:Method, ?ctx:configuration.Context)
Value_isMock(?lambda), isValue(?lambda), Value_Type(?lambda, ?dynRetType), Value_DeclaringType(?lambda, "java.lang.Object"),
VarPointsTo(?hctx, ?lambda, ?callerCtx, ?ret),
LambdaObject(?invokedynamic, ?lambda, ?dynName, ?K, ?implMethod, ?callerCtx) :-
  ReachableLambdaMetafactoryInvoke(?invokedynamic, ?dynName, ?dynRetType, ?callerCtx),
  DynamicMethodInvocation_DynArity(?invokedynamic, ?K),
  BootstrapParam(1, ?invokedynamic, ?handleVar),
  VarPointsTo(?hctx, ?handleVal, ?callerCtx, ?handleVar),
  MethodHandleConstant_Method(?handleVal, ?implMethod),
  Method_SimpleName(?implMethod, ?handleMeth),
  Method_DeclaringType(?implMethod, ?handleType),
  ?lambda = cat(?invokedynamic, cat("::: ", cat(?dynRetType, cat("::: (Mock)::: ", cat("reference ", cat(?handleType, cat ("::", cat(?handleMeth, cat(" from ", cat(?implMethod, cat(" wrapped as ", cat(?dynRetType, cat(".", ?dynName))))))))))))),
  AssignReturnValue(?invokedynamic, ?ret).
.decl LambdaCaptured(?invokedynamic:DynamicMethodInvocation_Insn, ?val:Value, ?idx:number, ?hctx:configuration.HContext)
LambdaCaptured(?invokedynamic, ?val, ?idx, ?hctx) :-
  ReachableLambdaMetafactoryInvoke(?invokedynamic, _, _, ?callerCtx),
  DynamicMethodInvocation_DynArity(?invokedynamic, ?K),
  ?K > 0,
  ActualParam(?idx, ?invokedynamic, ?actual),
  VarPointsTo(?hctx, ?val, ?callerCtx, ?actual).
.decl LambdaCallGraphEdge(?callerCtx:configuration.Context, ?i:MethodInvocation, ?calleeCtx:configuration.Context, ?m:Method, ?lambda:Lambda)
LambdaCallGraphEdge(?callerCtx, ?i, ?calleeCtx, ?implMethod, ?lambda) :-
  LambdaObject(_, ?lambda, ?dynName, _, ?implMethod, _),
  VarPointsTo(_, ?lambda, ?callerCtx, ?var),
  VirtualMethodInvocation_Base(?i, ?var),
  VirtualMethodInvocation_SimpleName(?i, ?dynName),
  isImmutableContext(?calleeCtx).
ReachableContext(?calleeCtx, ?callee) :-
  LambdaCallGraphEdge(_, _, ?calleeCtx, ?callee, _).
VarPointsTo(?hctx, ?retVal, ?callerCtx, ?ret) :-
  LambdaCallGraphEdge(?callerCtx, ?i, ?calleeCtx, ?method, _),
  ReturnVar(?realReturnVar, ?method),
  VarPointsTo(?hctx, ?retVal, ?calleeCtx, ?realReturnVar),
  AssignReturnValue(?i, ?ret).
.decl CalledInstanceImplMethod(?invokedynamic:DynamicMethodInvocation_Insn, ?implMethod:Method, ?this:Var, ?thisType:Type, ?calleeCtx:configuration.Context, ?lambda:Lambda)
CalledInstanceImplMethod(?invokedynamic, ?implMethod, ?this, ?thisType, ?calleeCtx, ?lambda) :-
  LambdaCallGraphEdge(_, _, ?calleeCtx, ?implMethod, ?lambda),
  !Method_Modifier("static", ?implMethod),
  LambdaObject(?invokedynamic, ?lambda, _, _, ?implMethod, _),
  ThisVar(?implMethod, ?this),
  Var_Type(?this, ?thisType).
.decl Params_ReceiverShiftRight(?lambda:Lambda, ?implMethod:Method, ?shiftK:number, ?shiftN:number)
Params_ReceiverShiftRight(?lambda, ?implMethod, 0, 0) :-
  LambdaObject(_, ?lambda, _, _, ?implMethod, _),
  Method_Modifier("static", ?implMethod).
Params_ReceiverShiftRight(?lambda, ?implMethod, 0, 1) :-
  CalledInstanceImplMethod(?invokedynamic, ?implMethod, _, _, _, ?lambda),
  DynamicMethodInvocation_DynArity(?invokedynamic, 0).
Params_ReceiverShiftRight(?lambda, ?implMethod, 1, 0) :-
  CalledInstanceImplMethod(?invokedynamic, ?implMethod, _, _, _, ?lambda),
  LambdaCaptured(?invokedynamic, _, 0, _).
.decl LambdaArg(?calleeCtx:configuration.Context, ?formal:Var, ?formalType:Type, ?actual:Var, ?invokedynamic:DynamicMethodInvocation_Insn)
LambdaArg(?calleeCtx, ?formal, ?formalType, ?actual, ?invokedynamic) :-
  LambdaCallGraphEdge(_, ?i, ?calleeCtx, ?implMethod, ?lambda),
  Params_ReceiverShiftRight(?lambda, ?implMethod, ?shiftK, ?shiftN),
  LambdaObject(?invokedynamic, ?lambda, _, ?K, ?implMethod, _),
  ActualParam(?idx, ?i, ?actual),
  FormalParam(?K - ?shiftK + ?idx - ?shiftN, ?implMethod, ?formal),
  Var_Type(?formal, ?formalType).
VarPointsTo(?hctx, ?val, ?calleeCtx, ?formal) :-
  LambdaArg(?calleeCtx, ?formal, ?formalType, ?actual, _),
  VarPointsTo(?hctx, ?val, _, ?actual),
  Value_Type(?val, ?valType),
  basic.SubtypeOf(?valType, ?formalType).
.decl BoxingFunction(?functionType:ReferenceType, ?primType:Type, ?refType:ReferenceType)
BoxingFunction(?intArgLambdaType, "int", "java.lang.Integer") :-
  ?intArgLambdaType = "java.util.function.IntBinaryOperator";
  ?intArgLambdaType = "java.util.function.IntConsumer";
  ?intArgLambdaType = "java.util.function.IntFunction";
  ?intArgLambdaType = "java.util.function.IntPredicate";
  ?intArgLambdaType = "java.util.function.IntToDoubleFunction";
  ?intArgLambdaType = "java.util.function.IntToLongFunction";
  ?intArgLambdaType = "java.util.function.IntUnaryOperator";
  ?intArgLambdaType = "java.util.function.ObjIntConsumer".
BoxingFunction(?longArgLambdaType, "long", "java.lang.Long") :-
  ?longArgLambdaType = "java.util.function.LongBinaryOperator";
  ?longArgLambdaType = "java.util.function.LongConsumer";
  ?longArgLambdaType = "java.util.function.LongFunction";
  ?longArgLambdaType = "java.util.function.LongPredicate";
  ?longArgLambdaType = "java.util.function.LongToDoubleFunction";
  ?longArgLambdaType = "java.util.function.LongToIntFunction";
  ?longArgLambdaType = "java.util.function.LongUnaryOperator";
  ?longArgLambdaType = "java.util.function.ObjLongConsumer".
BoxingFunction(?doubleArgLambdaType, "double", "java.lang.Double") :-
  ?doubleArgLambdaType = "java.util.function.DoubleBinaryOperator";
  ?doubleArgLambdaType = "java.util.function.DoubleConsumer";
  ?doubleArgLambdaType = "java.util.function.DoubleFunction";
  ?doubleArgLambdaType = "java.util.function.DoublePredicate";
  ?doubleArgLambdaType = "java.util.function.DoubleToIntFunction";
  ?doubleArgLambdaType = "java.util.function.DoubleToLongFunction";
  ?doubleArgLambdaType = "java.util.function.DoubleUnaryOperator";
  ?doubleArgLambdaType = "java.util.function.ObjDoubleConsumer".
VarPointsTo(?hctx, ?val, ?calleeCtx, ?formal) :-
  LambdaArg(?calleeCtx, ?formal, ?formalType, ?actual, ?invokedynamic),
  ReachableLambdaMetafactoryInvoke(?invokedynamic, _, ?dynRetType, _),
  Var_Type(?actual, ?primType),
  BoxingFunction(?dynRetType, ?primType, ?formalType),
  BoxAllocation(?val, ?formalType),
  isImmutableHContext(?hctx).
VarPointsTo(?hctx, ?val, ?calleeCtx, ?formal) :-
  LambdaCallGraphEdge(_, _, ?calleeCtx, ?implMethod, ?lambda),
  Params_ReceiverShiftRight(?lambda, ?implMethod, ?shiftK, _),
  LambdaObject(?invokedynamic, ?lambda, _, ?K, ?implMethod, _),
  LambdaCaptured(?invokedynamic, ?val, ?idx, ?hctx),
  ?idx + ?shiftK <= ?K,
  FormalParam(?idx - ?shiftK, ?implMethod, ?formal),
  Value_Type(?val, ?valType),
  Var_Type(?formal, ?formalType),
  basic.SubtypeOf(?valType, ?formalType).
VarPointsTo(?hctx, ?thisValue, ?calleeCtx, ?this) :-
  Params_ReceiverShiftRight(?lambda, ?implMethod, 1, 0),
  CalledInstanceImplMethod(?invokedynamic, ?implMethod, ?this, ?thisType, ?calleeCtx, ?lambda),
  LambdaCaptured(?invokedynamic, ?thisValue, 0, ?hctx),
  Value_Type(?thisValue, ?thisValueType),
  basic.SubtypeOf(?thisValueType, ?thisType).
VarPointsTo(?hctx, ?argValue, ?calleeCtx, ?this) :-
  LambdaCallGraphEdge(?callerCtx, ?i, ?calleeCtx, ?implMethod, ?lambda),
  Params_ReceiverShiftRight(?lambda, ?implMethod, 0, 1),
  ActualParam(0, ?i, ?actual),
  VarPointsTo(?hctx, ?argValue, ?callerCtx, ?actual),
  Value_Type(?argValue, ?argType),
  ThisVar(?implMethod, ?this),
  Var_Type(?this, ?thisType),
  basic.SubtypeOf(?argType, ?thisType).
VarPointsTo(?hctx, ?mockObj, ?callerCtx, ?var),
VarPointsTo(?hctx, ?mockObj, ?calleeCtx, ?thisVar),
Value_isMock(?mockObj), isValue(?mockObj), Value_Type(?mockObj, ?type), Value_DeclaringType(?mockObj, "java.lang.Object") :-
  LambdaCallGraphEdge(?callerCtx, ?i, ?calleeCtx, ?implMethod, _),
  basic.ClassConstructor(?implMethod, ?type),
  AssignReturnValue(?i, ?var),
  ThisVar(?implMethod, ?thisVar),
  ?mockObj = cat("<mock object of type ", cat(?type, cat(" constructed by constructor reference at ", cat(?i, ">")))),
  isImmutableHContext(?hctx).
.decl ReifiedClass(?type:ReferenceType, ?value:Value)
.decl ReifiedConstructor(?constructor:Method, ?value:Value)
.decl ReifiedMethod(?method:Method, ?value:Value)
.decl ReifiedField(?field:Field, ?value:Value)
.decl ReflectiveValue(?value:Value)
.decl ReflectiveAllocation(?instruction:Instruction, ?type:ReferenceType, ?value:Value)
.decl java_lang_Object_getClass(?to:Var, ?from:Var)
.decl java_lang_Class_forName(?invocation:MethodInvocation, ?inmethod:Method)
.decl java_lang_Class_getAnnotations(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_Class_getName(?to:Var, ?from:Var)
.decl java_lang_Class_getCanonicalName(?to:Var, ?from:Var)
.decl java_lang_Class_getComponentType(?to:Var, ?from:Var)
.decl java_lang_Class_getDeclaredAnnotations(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_Class_getSuperclass(?to:Var, ?from:Var)
.decl java_lang_Class_getInterfaces(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_Class_getMethods(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_Class_getMethod(?to:Var, ?param:Var, ?from:Var)
.decl java_lang_Class_getDeclaredMethods(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_Class_getDeclaredMethod(?to:Var, ?param:Var, ?from:Var)
.decl java_lang_Class_getConstructors(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_Class_getConstructor(?to:Var, ?from:Var)
.decl java_lang_Class_getDeclaredConstructors(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_Class_getDeclaredConstructor(?to:Var, ?from:Var)
.decl java_lang_Class_getFields(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_Class_getField(?to:Var, ?param:Var, ?from:Var)
.decl java_lang_Class_getDeclaredFields(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_Class_getDeclaredField(?to:Var, ?param:Var, ?from:Var)
.decl java_lang_Class_getPrimitiveClass(?to:Var, ?name:Var)
.decl java_lang_Class_newInstance(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_reflect_Array_newInstance(?invocation:MethodInvocation, ?to:Var, ?param:Var)
.decl java_lang_reflect_Constructor_newInstance(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_reflect_Field_get(?invocation:MethodInvocation, ?to:Var, ?field:Var)
.decl java_lang_reflect_Field_get_base(?invocation:MethodInvocation, ?base:Var)
.decl java_lang_reflect_Field_getDeclaredAnnotations(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_reflect_Field_set(?invocation:MethodInvocation, ?from:Var, ?field:Var)
.decl java_lang_reflect_Field_set_base(?invocation:MethodInvocation, ?base:Var)
.decl java_lang_reflect_Method_invoke(?invocation:MethodInvocation, ?method:Var)
.decl java_lang_reflect_Method_getDeclaredAnnotations(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_reflect_Method_getParameterAnnotations(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_Class_getClassLoader(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl java_lang_ClassLoader_getResource(?invocation:MethodInvocation, ?to:Var, ?from:Var)
.decl StringPrecisionThreshold(?t:number)
  .decl FakeInvocation_RegisterFinalize0(?heap:HeapAllocation, ?invo:MethodInvocation)
  .decl FakeInvocation_RegisterFinalize(?value:Value, ?invo:MethodInvocation)
  .decl Value_isHeap(?value:Value)
  .decl Value_isMock(?value:Value)
  .decl Value_Num(?value:Value, ?const:symbol, ?valueType:Type)
  .decl Value_isNonHeap(?value:Value)
  .decl NotSpecialObject(?value:Value)
  .decl Value_Type(?value:Value, ?type:Type)
  .decl Value_DeclaringType(?value:Value, ?type:Type)
  .decl Value_Null(?null:Value)
.decl isContext(?ctx:configuration.Context)
.decl isHContext(?hctx:configuration.HContext)
.decl isImmutableContext(?ctx:configuration.Context)
.decl isInitialContext(?ctx:configuration.Context)
.decl isJVMStartupContext(?ctx:configuration.Context)
.decl isClinitContext(?ctx:configuration.Context)
.decl isImmutableHContext(?hctx:configuration.HContext)
.decl isJVMStartupHContext(?hctx:configuration.HContext)
.decl VarPointsTo(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)
.decl InstanceFieldPointsTo(?hctx:configuration.HContext, ?value:Value, ?sig:Field, ?basehctx:configuration.HContext, ?basevalue:Value)
.decl StaticFieldPointsTo(?hctx:configuration.HContext, ?value:Value, ?sig:Field)
.decl ArrayIndexPointsTo(?hctx:configuration.HContext, ?value:Value, ?basehctx:configuration.HContext, ?basevalue:Value)
.decl CallGraphEdge(?callerCtx:configuration.Context, ?invocation:MethodInvocation, ?calleeCtx:configuration.Context, ?method:Method) overridable
.decl OpaqueCallGraphEdge(?invocation:MethodInvocation, ?method:Method)
.decl Reachable(?method:Method)
.decl ReachableContext(?ctx:configuration.Context, ?method:Method)
.decl OptInterproceduralAssign(?toCtx:configuration.Context, ?to:Var, ?fromCtx:configuration.Context, ?from:Var)
.decl OptLoadArrayIndex(?to:Var, ?base:Var)
.decl OptStoreArrayIndex(?from:Var, ?base:Var)
.decl OptArgAssign(?toCtx:configuration.Context, ?to:Var, ?fromCtx:configuration.Context, ?from:Var, ?allowedType:Type)
.decl OptArgVarPointsTo(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)
.decl OptRetVarPointsTo(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)
.decl HeapInterproceduralAssign(?toCtx:configuration.Context, ?to:Var, ?fromCtx:configuration.Context, ?from:Var)
.decl LoadHeapInstanceField(?ctx:configuration.Context, ?to:Var, ?sig:Field, ?basehctx:configuration.HContext, ?basevalue:Value)
.decl StoreHeapInstanceField(?sig:Field, ?basehctx:configuration.HContext, ?basevalue:Value, ?ctx:configuration.Context, ?from:Var)
.decl LoadHeapArrayIndex(?ctx:configuration.Context, ?to:Var, ?basehctx:configuration.HContext, ?basevalue:Value)
.decl StoreHeapArrayIndex(?basehctx:configuration.HContext, ?basevalue:Value, ?ctx:configuration.Context, ?from:Var)
.decl SystemThreadGroup(?hctx:configuration.HContext, ?value:Value)
.decl MainThreadGroup(?hctx:configuration.HContext, ?value:Value)
.decl MainThread(?hctx:configuration.HContext, ?value:Value)
Value_DeclaringType(?value, "java.lang.System") :-
   ?value = "<<string-constant>>",
   isValue(?value) ;
   ?value = "<<reflection-string-constant>>",
   isValue(?value) ;
   ?value = "<<string-buffer>>",
   isValue(?value) ;
   ?value = "<<string-builder>>",
   isValue(?value) ;
   ?value = "<<initial-context>>",
   isValue(?value) ;
   ?value = "<<jvm-startup-context>>",
   isValue(?value) ;
   ?value = "<<jvm-startup-hcontext>>",
   isValue(?value) ;
   ?value = "<<clinit-context>>",
   isValue(?value) ;
   ?value = "<<system-thread-group>>",
   isValue(?value) ;
   ?value = "<<main-thread-group>>",
   isValue(?value) ;
   ?value = "<<main-thread>>",
   isValue(?value) ;
   ?value = "<<immutable-context>>",
   isValue(?value) ;
   ?value = "<<immutable-hcontext>>",
   isValue(?value) ;
   ?value = "<<immutable>>",
   isValue(?value).
.decl PrimitiveType_Boxed(?type:Type, ?boxedType:Type)
PrimitiveType_Boxed("boolean", "java.lang.Boolean" ).
PrimitiveType_Boxed("byte" , "java.lang.Byte" ).
PrimitiveType_Boxed("short" , "java.lang.Short" ).
PrimitiveType_Boxed("char" , "java.lang.Character").
PrimitiveType_Boxed("int" , "java.lang.Integer" ).
PrimitiveType_Boxed("long" , "java.lang.Long" ).
PrimitiveType_Boxed("float" , "java.lang.Float" ).
PrimitiveType_Boxed("double" , "java.lang.Double" ).
ClassInitializer(?type, ?method) :-
   basic.MethodImplemented("<clinit>", "void()", ?type, ?method).
InitializedClass(?superclass) :-
   InitializedClass(?class),
   DirectSuperclass(?class, ?superclass).
InitializedClass(?superinterface) :-
   InitializedClass(?classOrInterface),
   DirectSuperinterface(?classOrInterface, ?superinterface).
InitializedClass(?class) :-
   basic.MainMethodDeclaration(?method),
   Method_DeclaringType(?method, ?class).
InitializedClass(?class) :-
   Reachable(?inmethod),
   AssignHeapAllocation(?heap, _, ?inmethod),
   HeapAllocation_Type(?heap, ?class).
InitializedClass(?class) :-
   Reachable(?inmethod),
   Instruction_Method(?invocation, ?inmethod),
   isStaticMethodInvocation_Insn(?invocation),
   MethodInvocation_Method(?invocation, ?signature),
   Method_DeclaringType(?signature, ?class).
InitializedClass(?classOrInterface) :-
   Reachable(?inmethod),
   StoreStaticField(_, ?signature, ?inmethod),
   Field_DeclaringType(?signature, ?classOrInterface).
InitializedClass(?classOrInterface) :-
   Reachable(?inmethod),
   LoadStaticField(?signature, _, ?inmethod),
   Field_DeclaringType(?signature, ?classOrInterface).
.decl FinalizeContextRequest(?callerCtx:configuration.Context, ?hctx:configuration.HContext, ?fakeinvo:MethodInvocation, ?heapValue:Value, ?register:Method, ?formal:Var)
FinalizeContextRequest(?callerCtx, ?hctx, ?fakeinvo, ?heapValue, ?register, ?formal),
configuration.ContextRequest(?callerCtx, ?hctx, ?fakeinvo, ?heapValue, ?register, 1) :-
  FakeInvocation_RegisterFinalize(?heapValue, ?fakeinvo),
  basic.AllocatedObjectSupportsFinalize(?heapValue, ?inmethod),
  (!(HeapAllocation_Merge(?heapValue, _));
  HeapAllocation_Merge(?heapValue, ?heapValue)),
  ReachableContext(?callerCtx, ?inmethod),
  ?register = "<java.lang.ref.Finalizer: void register(java.lang.Object)>",
  isMethod(?register),
  FormalParam(0, ?register, ?formal),
  isImmutableHContext(?hctx).
ReachableContext(?calleeCtx, ?register),
VarPointsTo(?hctx, ?heapValue, ?calleeCtx, ?formal) :-
  configuration.ContextResponse(?callerCtx, ?hctx, ?fakeinvo, ?heapValue, ?register, ?calleeCtx),
  FinalizeContextRequest(?callerCtx, ?hctx, ?fakeinvo, ?heapValue, ?register, ?formal).
.plan 1:(2,1)
FakeInvocation_RegisterFinalize0(?val2, cat("<register-finalize ", cat(?val1, cat( "/", cat(?val2, "  >"))))),
isInstruction(cat("<register-finalize ", cat(?val1, cat( "/", cat(?val2, "  >"))))), isMethodInvocation(cat("<register-finalize ", cat(?val1, cat( "/", cat(?val2, "  >"))))) :-
    basic.AllocatedObjectSupportsFinalize(?val2, ?val1),
    isMethod(?val1),
    isHeapAllocation(?val2).
ImplicitReachable("<java.lang.System: void initializeSystemClass()>") :- isMethod("<java.lang.System: void initializeSystemClass()>").
ImplicitReachable("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>") :- isMethod("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>").
ImplicitReachable("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>") :- isMethod("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>").
ImplicitReachable("<java.lang.ThreadGroup: void <init>()>") :- isMethod("<java.lang.ThreadGroup: void <init>()>").
ImplicitReachable("<java.lang.Thread: void exit()>") :- isMethod("<java.lang.Thread: void exit()>").
ImplicitReachable("<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>") :- isMethod("<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>").
ImplicitReachable("<java.lang.ClassLoader: void <init>()>") :- isMethod("<java.lang.ClassLoader: void <init>()>").
ImplicitReachable("<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>") :- isMethod("<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>").
ImplicitReachable("<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>") :- isMethod("<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>").
ImplicitReachable("<java.lang.ClassLoader: void addClass(java.lang.Class)>") :- isMethod("<java.lang.ClassLoader: void addClass(java.lang.Class)>").
ImplicitReachable("<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>") :- isMethod("<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>").
ImplicitReachable("<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>") :- isMethod("<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>").
ApplicationEntryPoint(?meth) :-
  ForcedReachable(?meth),
  ApplicationMethod(?meth).
.decl ForcedReachableContext(?ctx:configuration.Context, ?meth:Method)
ForcedReachableContext(?ctx, ?method) :-
  ForcedReachable(?method),
  isImmutableContext(?ctx).
ReachableContext(?ctx, ?meth) :-
  ForcedReachableContext(?ctx, ?meth).
.decl FormalOfForcedReachableContext(?ctx:configuration.Context, ?formal:Var, ?formalType:Type)
FormalOfForcedReachableContext(?ctx, ?formal, ?formalType) :-
  ForcedReachableContext(?ctx, ?meth),
  FormalParam(_, ?meth, ?formal),
  Var_Type(?formal, ?formalType).
Value_isMock(?value), isValue(?value), Value_Type(?value, ?formalType), Value_DeclaringType(?value, "java.lang.Object"),
VarPointsTo(?hctx, ?value, ?ctx, ?formal) :-
  FormalOfForcedReachableContext(?ctx, ?formal, ?formalType),
  isImmutableHContext(?hctx),
  ?value = cat("<mock value for forced-reachable parameter ", cat(?formal, ">")).
ForcedReachable(?meth) :-
  (KeepMethod(?meth) ; RootCodeElement(?meth)),
  isMethod(?meth).
ForcedReachable(?meth) :-
  KeepClass(?class),
  basic.ClassConstructor(?meth, ?class),
  !FormalParam(_, ?meth, _).
ForcedReachableContext(?ctx, ?method) :-
  ( KeepClassMembers(?method) ; KeepClassesWithMembers(?method) ),
  Method_DeclaringType(?method, ?type),
  Method_DeclaringType(?someMethod, ?type),
  Reachable(?someMethod),
  isImmutableContext(?ctx).
VarPointsTo(?hctx, ?argArray, ?ctx, ?args),
ArrayIndexPointsTo(?hctx, ?argArrayContent, ?hctx, ?argArray) :-
   isImmutableHContext(?hctx),
   basic.MainMethodDeclaration(?mainMethod),
   ReachableContext(?ctx, ?mainMethod),
   FormalParam(0, ?mainMethod, ?args),
   MainMethodArgArray(?argArray),
   MainMethodArgArrayContent(?argArrayContent).
.decl SimulateNativeAllocation(?strMethod: Method, ?strHeap: HeapAllocation, ?strConstructor: Method)
AssignHeapAllocation(?strHeap, ?return, ?strMethod),
Value_DeclaringType(?strHeap, ?strType) :-
  SimulateNativeAllocation(?strMethod, ?strHeap, _),
  Method_DeclaringType(?strMethod, ?strType),
  NativeReturnVar(?return, ?strMethod),
  isHeapAllocation(?strHeap).
SpecialMethodInvocation_Base(?newInstrId, ?return),
Instruction_Method(?newInstrId, ?strMethod),
MethodInvocation_Method(?newInstrId, strConstructor),
isInstruction(?newInstrId), isMethodInvocation(?newInstrId), isSpecialMethodInvocation_Insn(?newInstrId),
Instruction_Index(?newInstrId, ?index) :-
  SimulateNativeAllocation(?strMethod, _, strConstructor),
  isMethod(?strMethod),
  NativeReturnVar(?return, ?strMethod),
  isMethod(strConstructor),
  ?index = 1,
  ?newInstrId = cat(?strMethod, cat("/native ", strConstructor)).
.decl SimulatedNativeAllocation(?heap:HeapAllocation, ?method:Method)
.output SimulatedNativeAllocation
AssignLocal(?this, ?ret, ?method) :-
  ?method = "<java.lang.Object: java.lang.Object clone()>",
  isMethod(?method),
  ThisVar(?method, ?this),
  ReturnVar(?ret, ?method).
StoreStaticField("<java.lang.System: void setIn0(java.io.InputStream)>/@parameter0", "<java.lang.System: java.io.InputStream in>", "<java.lang.System: void setIn0(java.io.InputStream)>") :- isMethod("<java.lang.System: void setIn0(java.io.InputStream)>"), isVar("<java.lang.System: void setIn0(java.io.InputStream)>/@parameter0"), isField("<java.lang.System: java.io.InputStream in>").
StoreStaticField("<java.lang.System: void setIn0(java.io.InputStream)>/v1", "<java.lang.System: java.io.InputStream in>", "<java.lang.System: void setIn0(java.io.InputStream)>") :- isMethod("<java.lang.System: void setIn0(java.io.InputStream)>"), isVar("<java.lang.System: void setIn0(java.io.InputStream)>/v1"), isField("<java.lang.System: java.io.InputStream in>").
StoreStaticField("<java.lang.System: void setOut0(java.io.PrintStream)>/@parameter0", "<java.lang.System: java.io.PrintStream out>", "<java.lang.System: void setOut0(java.io.PrintStream)>") :- isMethod("<java.lang.System: void setOut0(java.io.PrintStream)>"), isVar("<java.lang.System: void setOut0(java.io.PrintStream)>/@parameter0"), isField("<java.lang.System: java.io.PrintStream out>").
StoreStaticField("<java.lang.System: void setOut0(java.io.PrintStream)>/v1", "<java.lang.System: java.io.PrintStream out>", "<java.lang.System: void setOut0(java.io.PrintStream)>") :- isMethod("<java.lang.System: void setOut0(java.io.PrintStream)>"), isVar("<java.lang.System: void setOut0(java.io.PrintStream)>/v1"), isField("<java.lang.System: java.io.PrintStream out>").
StoreStaticField("<java.lang.System: void setErr0(java.io.PrintStream)>/@parameter0", "<java.lang.System: java.io.PrintStream err>", "<java.lang.System: void setErr0(java.io.PrintStream)>") :- isMethod("<java.lang.System: void setErr0(java.io.PrintStream)>"), isVar("<java.lang.System: void setErr0(java.io.PrintStream)>/@parameter0"), isField("<java.lang.System: java.io.PrintStream err>").
StoreStaticField("<java.lang.System: void setErr0(java.io.PrintStream)>/v1", "<java.lang.System: java.io.PrintStream err>", "<java.lang.System: void setErr0(java.io.PrintStream)>") :- isMethod("<java.lang.System: void setErr0(java.io.PrintStream)>"), isVar("<java.lang.System: void setErr0(java.io.PrintStream)>/v1"), isField("<java.lang.System: java.io.PrintStream err>").
isVar(cat(?invocation, "/@tmp-arraycopy")), Var_Type(cat(?invocation, "/@tmp-arraycopy"), ?tmpType), Var_DeclaringMethod(cat(?invocation, "/@tmp-arraycopy"), ?inmethod),
LoadArrayIndex(?src, cat(?invocation, "/@tmp-arraycopy"), ?inmethod),
StoreArrayIndex(cat(?invocation, "/@tmp-arraycopy"), ?dest, ?inmethod) :-
   ?arraycopy = "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",
   isMethod(?arraycopy),
   StaticMethodInvocation(?invocation, ?arraycopy, ?inmethod),
   ActualParam(0, ?invocation, ?src),
   ActualParam(2, ?invocation, ?dest),
   isMethodInvocation(?invocation),
   ?tmpType = "java.lang.Object",
   isType(?tmpType).
StoreArrayIndex(?from, ?base, ?inmethod) :-
  ?casObject = "<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>",
  isMethod(?casObject),
  VirtualMethodInvocation(?invocation, ?casObject, ?inmethod),
  ActualParam(0, ?invocation, ?base),
  ActualParam(3, ?invocation, ?from).
StoreArrayIndex(?from, ?base, ?inmethod) :-
  (?putObj = "<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>";
   ?putObj = "<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>";
   ?putObj = "<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>";
   ?putObj = "<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>"),
  isMethod(?putObj),
  VirtualMethodInvocation(?invocation, ?putObj, ?inmethod),
  ActualParam(0, ?invocation, ?base),
  ActualParam(2, ?invocation, ?from).
LoadArrayIndex(?base, ?to, ?inmethod) :-
  (?getObj = "<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>";
   ?getObj = "<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>";
   ?getObj = "<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>"),
  isMethod(?getObj),
  VirtualMethodInvocation(?invocation, ?getObj, ?inmethod),
  ActualParam(0, ?invocation, ?base),
  AssignReturnValue(?invocation, ?to).
SimulatedNativeAllocation("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/new java.lang.String[]/0", "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"). SimulatedNativeAllocation("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/new java.lang.String/0", "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"). AssignHeapAllocation("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/new java.lang.String[]/0", ?return, "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>") :- isMethod("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"), NativeReturnVar(?return, "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"), isHeapAllocation("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/new java.lang.String[]/0"). isVar(cat("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>", "/@native-array-element")), Var_Type(cat("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>", "/@native-array-element"), "java.lang.String"), Var_DeclaringMethod(cat("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>", "/@native-array-element"), "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"), AssignHeapAllocation("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/new java.lang.String/0", cat("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>", "/@native-array-element"), "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"), StoreArrayIndex(cat("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>", "/@native-array-element"), ?base, "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>") :- isMethod("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"), NativeReturnVar(?base, "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"), isType("java.lang.String"), isHeapAllocation("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/new java.lang.String/0").
isInstruction(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>", cat("/native ", "<java.lang.Object: void finalize()>"))), isMethodInvocation(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>", cat("/native ", "<java.lang.Object: void finalize()>"))), isVirtualMethodInvocation_Insn(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>", cat("/native ", "<java.lang.Object: void finalize()>"))), VirtualMethodInvocation(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>", cat("/native ", "<java.lang.Object: void finalize()>")), "<java.lang.Object: void finalize()>", "<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"), VirtualMethodInvocation_Base(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>", cat("/native ", "<java.lang.Object: void finalize()>")), ?base), Instruction_Method(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>", cat("/native ", "<java.lang.Object: void finalize()>")), "<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"), MethodInvocation_Method(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>", cat("/native ", "<java.lang.Object: void finalize()>")), "<java.lang.Object: void finalize()>"), Instruction_Index(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>", cat("/native ", "<java.lang.Object: void finalize()>")), ?index) :- isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"), FormalParam(0, "<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>", ?base), isMethod("<java.lang.Object: void finalize()>"), ?index = 1. isInstruction(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>", cat("/native ", "<java.lang.Object: void finalize()>"))), isMethodInvocation(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>", cat("/native ", "<java.lang.Object: void finalize()>"))), AssignReturnValue(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>", cat("/native ", "<java.lang.Object: void finalize()>")), ?return) :- isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"), NativeReturnVar(?return, "<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>").
isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>"))), isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>"))), isVirtualMethodInvocation_Insn(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>"))), VirtualMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>")), "<java.security.PrivilegedAction: java.lang.Object run()>", "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"), VirtualMethodInvocation_Base(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>")), ?base), Instruction_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>")), "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"), MethodInvocation_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>")), "<java.security.PrivilegedAction: java.lang.Object run()>"), Instruction_Index(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>")), ?index) :- isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"), FormalParam(0, "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>", ?base), isMethod("<java.security.PrivilegedAction: java.lang.Object run()>"), ?index = 1. isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>"))), isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>"))), AssignReturnValue(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>")), ?return) :- isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"), NativeReturnVar(?return, "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>").
isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>"))), isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>"))), isVirtualMethodInvocation_Insn(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>"))), VirtualMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>")), "<java.security.PrivilegedAction: java.lang.Object run()>", "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"), VirtualMethodInvocation_Base(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>")), ?base), Instruction_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>")), "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"), MethodInvocation_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>")), "<java.security.PrivilegedAction: java.lang.Object run()>"), Instruction_Index(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>")), ?index) :- isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"), FormalParam(0, "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>", ?base), isMethod("<java.security.PrivilegedAction: java.lang.Object run()>"), ?index = 1. isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>"))), isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>"))), AssignReturnValue(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedAction: java.lang.Object run()>")), ?return) :- isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"), NativeReturnVar(?return, "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>").
isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))), isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))), isVirtualMethodInvocation_Insn(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))), VirtualMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>")), "<java.security.PrivilegedExceptionAction: java.lang.Object run()>", "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"), VirtualMethodInvocation_Base(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>")), ?base), Instruction_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>")), "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"), MethodInvocation_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>")), "<java.security.PrivilegedExceptionAction: java.lang.Object run()>"), Instruction_Index(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>")), ?index) :- isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"), FormalParam(0, "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>", ?base), isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>"), ?index = 1. isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))), isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))), AssignReturnValue(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>")), ?return) :- isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"), NativeReturnVar(?return, "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>").
isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))), isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))), isVirtualMethodInvocation_Insn(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))), VirtualMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>")), "<java.security.PrivilegedExceptionAction: java.lang.Object run()>", "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"), VirtualMethodInvocation_Base(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>")), ?base), Instruction_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>")), "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"), MethodInvocation_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>")), "<java.security.PrivilegedExceptionAction: java.lang.Object run()>"), Instruction_Index(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>")), ?index) :- isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"), FormalParam(0, "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>", ?base), isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>"), ?index = 1. isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))), isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))), AssignReturnValue(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>", cat("/native ", "<java.security.PrivilegedExceptionAction: java.lang.Object run()>")), ?return) :- isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"), NativeReturnVar(?return, "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>").
SimulateNativeAllocation(
  "<sun.misc.Perf: java.nio.ByteBuffer createLong(java.lang.String,int,int,long)>",
  "<sun.misc.Perf: java.nio.ByteBuffer createLong(java.lang.String,int,int,long)>/new java.nio.DirectByteBuffer/0",
  "<java.nio.DirectByteBuffer: void <init>()>").
.decl StoreIntoWeakReference(?basehctx:configuration.HContext, ?basevalue:Value, ?ctx:configuration.Context, ?from:Var)
.decl LoadFromReference(?ctx:configuration.Context, ?to:Var, ?basehctx:configuration.HContext, ?basevalue:Value)
.decl StoreIntoWeakReferenceArgs(?from:Var, ?base:Var)
StoreIntoWeakReferenceArgs(?from, ?base) :-
  ?weakRefCtor = "<java.lang.ref.WeakReference: void <init>(java.lang.Object)>",
  MethodInvocation_Method(?invo, ?weakRefCtor),
  OptSpecialMethodInvocationBase(?invo, ?base),
  ActualParam(0, ?invo, ?from).
StoreIntoWeakReference(?basehctx, ?basevalue, ?ctx, ?from) :-
  StoreIntoWeakReferenceArgs(?from, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).
.decl LoadFromReferenceArgs(?base:Var, ?to:Var)
LoadFromReferenceArgs(?base, ?to) :-
  ?refGet = "<java.lang.ref.Reference: java.lang.Object getReferent()>",
  MethodInvocation_Method(?invo, ?refGet),
  OptSpecialMethodInvocationBase(?invo, ?base),
  AssignReturnValue(?invo, ?to).
LoadFromReference(?ctx, ?to, ?basehctx, ?basevalue) :-
  LoadFromReferenceArgs(?base, ?to),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).
HeapInterproceduralAssign(?ctxTo, ?to, ?ctxFrom, ?from) :-
  LoadFromReference(?ctxTo, ?to, ?basehctx, ?basevalue),
  StoreIntoWeakReference(?basehctx, ?basevalue, ?ctxFrom, ?from),
  !Value_Null(?basevalue).
  .plan 1:(2,1)
.decl isNativeContext(?ctx:configuration.Context)
isNativeContext(?ctx) :- isImmutableContext(?ctx).
StaticFieldPointsTo(?hctx, ?value, ?pending) :-
   ?pending = "<java.lang.ref.Reference: java.lang.ref.Reference pending>",
   ( ?this = "<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this" ;
   ?this = "<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/v1"),
   isField(?pending),
   isVar(?this),
   VarPointsTo(?hctx, ?value, _, ?this).
.decl HeapAllocation_ContextInsensitive(?heap:HeapAllocation)
HeapAllocation_ContextInsensitive(?heap) :-
  HeapAllocation_Merge(?heap, _).
.decl HeapAllocation_Merge(?heap:HeapAllocation, ?mergeHeap:HeapAllocation)
.decl HeapAllocation_Keep(?heap:HeapAllocation)
.decl AssignNormalHeapAllocation(?heap:HeapAllocation, ?var:Var, ?inmethod:Method)
.decl AssignContextInsensitiveHeapAllocation(?heap:HeapAllocation, ?var:Var, ?inmethod:Method)
AssignNormalHeapAllocation(?heap, ?var, ?inmethod) :-
  AssignHeapAllocation(?heap, ?var, ?inmethod),
  !HeapAllocation_ContextInsensitive(?heap).
AssignContextInsensitiveHeapAllocation(?mergeHeap, ?var, ?inmethod) :-
  AssignHeapAllocation(?heap, ?var, ?inmethod),
  HeapAllocation_Merge(?heap, ?mergeHeap).
AssignContextInsensitiveHeapAllocation(?heap, ?var, ?inmethod) :-
  AssignHeapAllocation(?heap, ?var, ?inmethod),
  HeapAllocation_ContextInsensitive(?heap),
  !(HeapAllocation_Merge(?heap, _)).
.decl HeapRepresentative(?heap:HeapAllocation, ?heapRepr:symbol)
.decl HeapIsMergedString(?heap:HeapAllocation)
HeapIsMergedString(?heap) :-
  HeapRepresentative("<<string-constant>>", ?heap).
.decl HeapIsMergedStringFactory(?heap:HeapAllocation)
HeapAllocation_Merge(?heap, ?heapRepr) :-
  ?heapRepr = "<<string-constant>>",
  HeapRepresentative(?heapRepr, ?heap).
HeapIsMergedStringFactory(?heap) :-
  HeapRepresentative("<<string-buffer>>", ?heap);
  HeapRepresentative("<<string-builder>>", ?heap).
HeapAllocation_Merge(?heap, ?heapRepr) :-
  (?heapRepr = "<<string-buffer>>",
   HeapRepresentative(?heapRepr, ?heap));
  (?heapRepr = "<<string-builder>>",
   HeapRepresentative(?heapRepr, ?heap));
  (?heapRepr = "<<pystring-object>>",
   HeapRepresentative(?heapRepr, ?heap)).
.decl RepresentativesToPickFrom(?heapRepr:HeapAllocation, ?heap:HeapAllocation)
RepresentativesToPickFrom(?heapRepr, ?heap) :-
  HeapRepresentative(?heapRepr, ?heap),
  !HeapIsMergedString(?heap),
  !HeapIsMergedStringFactory(?heap),
  !HeapAllocation_Keep(?heap).
.decl MinRepresentativeHeapToPickFromOrdinal(?minHeapReprOrd:number, ?heap:HeapAllocation)
MinRepresentativeHeapToPickFromOrdinal(?minHeapReprOrd, ?heap) :-
  RepresentativesToPickFrom(_, ?heap),
  ?minHeapReprOrd = min ord(?heapRepr): RepresentativesToPickFrom(?heapRepr, ?heap).
HeapAllocation_Merge(?heap, ?mergeHeap) :-
  isHeapAllocation(?mergeHeap),
  ord(?mergeHeap) = ?minHeapReprOrd,
  MinRepresentativeHeapToPickFromOrdinal(?minHeapReprOrd, ?heap).
.decl ReflectionStringConstant(?heap:HeapAllocation)
.decl ReflectionSubstringObject(?heap:HeapAllocation)
.output ReflectionStringConstant
ReflectionStringConstant(?heap) :-
  PreClassNameMatchingStringConstant(?heap);
  PreMethodNameMatchingStringConstant(?heap);
  PreFieldNameMatchingStringConstant(?heap).
ReflectionSubstringObject(?heap) :-
  PreClassNameMatchingStringConstantInexact_Type(_,?heap);
  PreMethodNameMatchingStringConstantInexact_Signature(_,?heap);
  PreFieldNameMatchingStringConstantInexact_Signature(_,?heap).
HeapRepresentative("<<string-constant>>", ?heap) :-
  isStringConstant(?heap),
  !ReflectionStringConstant(?heap),
  !HeapAllocation_Keep(?heap).
HeapAllocation_ContextInsensitive(?heap) :-
  isStringConstant(?heap),
  !HeapRepresentative(_, ?heap).
.decl NonTrivialStringConstant(?heap:StringConstant)
NonTrivialStringConstant(?heap) :-
  isStringConstant(?heap),
  strlen(?heap) >= 7.
.decl ClassNameMatchingStringConstant_Type(?type:Type, ?heap:HeapAllocation)
.decl MethodNameMatchingStringConstant_Signature(?sig:Method, ?heap:HeapAllocation)
.decl FieldNameMatchingStringConstant_Signature(?sig:Field, ?heap:HeapAllocation)
.decl PreClassNameMatchingStringConstant(?heap:HeapAllocation)
.decl PreClassNameMatchingStringConstant_Type(?type:Type, ?heap:HeapAllocation)
.decl PreClassNameMatchingStringConstantExact_Type(?type:Type, ?heap:HeapAllocation)
.decl PreClassNameMatchingStringConstantInexact_Type(?type:Type, ?heap:HeapAllocation)
ClassNameMatchingStringConstant_Type(?type, ?heap) :-
  PreClassNameMatchingStringConstant_Type(?type, ?heap).
MethodNameMatchingStringConstant_Signature(?sig, ?heap) :-
  PreMethodNameMatchingStringConstant_Signature(?sig, ?heap).
FieldNameMatchingStringConstant_Signature(?sig, ?heap) :-
  PreFieldNameMatchingStringConstant_Signature(?sig, ?heap).
PreClassNameMatchingStringConstant(?string),
PreClassNameMatchingStringConstant_Type(?type, ?string),
PreClassNameMatchingStringConstantExact_Type(?type, ?string) :-
  isStringConstant(?string),
  isReferenceType(?type),
  ApplicationClass(?type),
  ord(?type) = ord(?string).
.decl PreMethodNameMatchingStringConstant(?heap:HeapAllocation)
.decl PreMethodNameMatchingStringConstant_Signature(?sig:Method, ?heap:HeapAllocation)
.decl PreMethodNameMatchingStringConstantExact_Signature(?sig:Method, ?heap:HeapAllocation)
.decl PreMethodNameMatchingStringConstantInexact_Signature(?sig:Method, ?heap:HeapAllocation)
PreMethodNameMatchingStringConstant(?string),
PreMethodNameMatchingStringConstant_Signature(?sig, ?string),
PreMethodNameMatchingStringConstantExact_Signature(?sig, ?string) :-
  isStringConstant(?string),
  Method_SimpleName(?sig, ?string),
  ?string != "<init>",
  ?string != "<clinit>".
.decl PreFieldNameMatchingStringConstant(?heap:HeapAllocation)
.decl PreFieldNameMatchingStringConstant_Signature(?sig:Field, ?heap:HeapAllocation)
.decl PreFieldNameMatchingStringConstantExact_Signature(?sig:Field, ?heap:HeapAllocation)
.decl PreFieldNameMatchingStringConstantInexact_Signature(?sig:Field, ?heap:HeapAllocation)
PreFieldNameMatchingStringConstant(?string),
PreFieldNameMatchingStringConstant_Signature(?sig, ?string),
PreFieldNameMatchingStringConstantExact_Signature(?sig, ?string) :-
  isStringConstant(?string),
  Field_SimpleName(?sig, ?string).
PreClassNameMatchingStringConstant(?string),
PreClassNameMatchingStringConstant_Type(?type, ?string),
PreClassNameMatchingStringConstantInexact_Type(?type, ?string) :-
  isHeapAllocation(?string),
  ApplicationClass(?type),
  ClassNameSuffix(?string, ?type).
PreMethodNameMatchingStringConstant(?string),
PreMethodNameMatchingStringConstant_Signature(?sig, ?string),
PreMethodNameMatchingStringConstantInexact_Signature(?sig, ?string) :-
  ApplicationClass(?type),
  Method_DeclaringType(?sig, ?type),
  (MethodNameSuffix(?string, ?sig);
   MethodNamePrefix(?string, ?sig)),
  isHeapAllocation(?string),
  ?string != "<init>",
  ?string != "<clinit>".
PreFieldNameMatchingStringConstant(?string),
PreFieldNameMatchingStringConstant_Signature(?sig, ?string),
PreFieldNameMatchingStringConstantInexact_Signature(?sig, ?string) :-
  ApplicationClass(?declaringClass),
  Field_DeclaringType(?sig, ?declaringClass),
  (FieldNameSuffix(?string, ?sig);
   FieldNamePrefix(?string, ?sig)),
  isHeapAllocation(?string).
.decl ClassIterationTrick(?length:number)
ClassIterationTrick(7).
ClassIterationTrick(?length+1) :- ClassIterationTrick(?length), ?length < 90.
.decl MemberPrefixIterationTrick(?length:number)
MemberPrefixIterationTrick(7).
MemberPrefixIterationTrick(?length+1) :- MemberPrefixIterationTrick(?length), ?length < 90.
.decl MemberSuffixIterationTrick(?length:number)
MemberSuffixIterationTrick(7).
MemberSuffixIterationTrick(?length+1) :- MemberSuffixIterationTrick(?length), ?length < 90.
.decl string_upper(s1:symbol, s2:symbol)
string_upper("a", "A"). string_upper("b", "B"). string_upper("c", "C"). string_upper("d", "D").
string_upper("e", "E"). string_upper("f", "F"). string_upper("g", "G"). string_upper("h", "H").
string_upper("i", "I"). string_upper("j", "J"). string_upper("k", "K"). string_upper("l", "L").
string_upper("m", "M"). string_upper("n", "N"). string_upper("o", "O"). string_upper("p", "P").
string_upper("q", "Q"). string_upper("r", "R"). string_upper("s", "S"). string_upper("t", "T").
string_upper("u", "U"). string_upper("v", "V"). string_upper("w", "W"). string_upper("x", "X").
string_upper("y", "Y"). string_upper("z", "Z").
string_upper("A", "A"). string_upper("B", "B"). string_upper("C", "C"). string_upper("D", "D").
string_upper("E", "E"). string_upper("F", "F"). string_upper("G", "G"). string_upper("H", "H").
string_upper("I", "I"). string_upper("J", "J"). string_upper("K", "K"). string_upper("L", "L").
string_upper("M", "M"). string_upper("N", "N"). string_upper("O", "O"). string_upper("P", "P").
string_upper("Q", "Q"). string_upper("R", "R"). string_upper("S", "S"). string_upper("T", "T").
string_upper("U", "U"). string_upper("V", "V"). string_upper("W", "W"). string_upper("X", "X").
string_upper("Y", "Y"). string_upper("Z", "Z").
string_upper("0", "0"). string_upper("1", "1"). string_upper("2", "2"). string_upper("3", "3").
string_upper("4", "4"). string_upper("5", "5"). string_upper("6", "6"). string_upper("7", "7").
string_upper("8", "8"). string_upper("9", "9").
.decl ValidSuffixForType(?className:symbol, ?index:number, ?length:number)
ValidSuffixForType(?className, ?index, ?length) :-
  isReferenceType(?className),
  ClassIterationTrick(?index),
  ?nameLength = strlen(?className),
  ?length = ?nameLength - ?index,
  ?length > 0.
.decl ValidSuffixForMethod(?method:Method, ?methodName:symbol, ?index:number, ?length:number)
ValidSuffixForMethod(?method, ?methodName, ?index, ?length) :-
  Method_SimpleName(?method, ?methodName),
  MemberSuffixIterationTrick(?index),
  ?nameLength = strlen(?methodName),
  ?length = ?nameLength - ?index,
  ?length > 0.
.decl ValidSuffixForField(?field:Field, ?fieldName:symbol, ?index:number, ?length:number)
ValidSuffixForField(?field, ?fieldName, ?index, ?length) :-
  Field_SimpleName(?field, ?fieldName),
  MemberSuffixIterationTrick(?index),
  ?nameLength = strlen(?fieldName),
  ?length = ?nameLength - ?index,
  ?length > 0.
.decl ValidPrefixForMethod(?method:Method, ?methodName:symbol, ?length:number)
ValidPrefixForMethod(?method, ?methodName, ?length) :-
  Method_SimpleName(?method, ?methodName),
  MemberPrefixIterationTrick(?length),
  strlen(?methodName) > ?length.
.decl ValidPrefixForField(?field:Field, ?fieldName:symbol, ?length:number)
ValidPrefixForField(?field, ?fieldName, ?length) :-
  Field_SimpleName(?field, ?fieldName),
  MemberPrefixIterationTrick(?length),
  strlen(?fieldName) > ?length.
.decl ClassNameSuffix(?suffix:symbol, ?classname:ReferenceType)
.decl MethodNameSuffix(?suffix:symbol, ?sig:Method)
.decl MethodNamePrefix(?prefix:symbol, ?sig:Method)
.decl FieldNameSuffix(?suffix:symbol, ?sig:Field)
.decl FieldNamePrefix(?prefix:symbol, ?sig:Field)
ClassNameSuffix(substr(?className, ?index, ?length), ?className) :-
  ValidSuffixForType(?className, ?index, ?length),
  ((substr(?className, ?index, 1) = char, substr(?className, ?index - 1, 1) = prevChar, ((string_upper(char, Uchar), Uchar = char, string_upper(prevChar, UprevChar), UprevChar != prevChar); (string_upper(char, Uchar), Uchar != char, string_upper(prevChar, UprevChar), UprevChar = prevChar))); (substr(?className, ?index - 1, 1) = prevChar, (prevChar = "_"; prevChar = "."; prevChar = "$")); (substr(?className, ?index, 1) = char, (char = "_"; char = "."; char = "$"))).
MethodNameSuffix(substr(?methodName, ?index, ?length), ?sig) :-
  ValidSuffixForMethod(?sig, ?methodName, ?index, ?length),
  ((substr(?methodName, ?index, 1) = char, substr(?methodName, ?index - 1, 1) = prevChar, ((string_upper(char, Uchar), Uchar = char, string_upper(prevChar, UprevChar), UprevChar != prevChar); (string_upper(char, Uchar), Uchar != char, string_upper(prevChar, UprevChar), UprevChar = prevChar))); (substr(?methodName, ?index - 1, 1) = prevChar, (prevChar = "_"; prevChar = "."; prevChar = "$")); (substr(?methodName, ?index, 1) = char, (char = "_"; char = "."; char = "$"))).
MethodNamePrefix(substr(?methodName, 0, ?length), ?sig) :-
  ValidPrefixForMethod(?sig, ?methodName, ?length),
  ((substr(?methodName, ?length - 1, 1) = char, substr(?methodName, ?length - 1 + 1, 1) = nextChar, ((string_upper(char, Uchar), Uchar = char, string_upper(nextChar, UnextChar), UnextChar != nextChar); (string_upper(char, Uchar), Uchar != char, string_upper(nextChar, UnextChar), UnextChar = nextChar))); (substr(?methodName, ?length - 1 + 1, 1) = nextChar, (nextChar = "_"; nextChar = "."; nextChar = "$")); (substr(?methodName, ?length - 1, 1) = char, (char = "_"; char = "."; char = "$"))).
FieldNameSuffix(substr(?fieldName, ?index, ?length), ?sig) :-
  ValidSuffixForField(?sig, ?fieldName, ?index, ?length),
  ((substr(?fieldName, ?index, 1) = char, substr(?fieldName, ?index - 1, 1) = prevChar, ((string_upper(char, Uchar), Uchar = char, string_upper(prevChar, UprevChar), UprevChar != prevChar); (string_upper(char, Uchar), Uchar != char, string_upper(prevChar, UprevChar), UprevChar = prevChar))); (substr(?fieldName, ?index - 1, 1) = prevChar, (prevChar = "_"; prevChar = "."; prevChar = "$")); (substr(?fieldName, ?index, 1) = char, (char = "_"; char = "."; char = "$"))).
FieldNamePrefix(substr(?fieldName, 0, ?length), ?sig) :-
  ValidPrefixForField(?sig, ?fieldName, ?length),
  ((substr(?fieldName, ?length - 1, 1) = char, substr(?fieldName, ?length - 1 + 1, 1) = nextChar, ((string_upper(char, Uchar), Uchar = char, string_upper(nextChar, UnextChar), UnextChar != nextChar); (string_upper(char, Uchar), Uchar != char, string_upper(nextChar, UnextChar), UnextChar = nextChar))); (substr(?fieldName, ?length - 1 + 1, 1) = nextChar, (nextChar = "_"; nextChar = "."; nextChar = "$")); (substr(?fieldName, ?length - 1, 1) = char, (char = "_"; char = "."; char = "$"))).
HeapAllocation_ContextInsensitive(?heap) :-
  isClassHeap(?heap).
.decl MethodAllocationMergeThreshold(?t:number)
MethodAllocationMergeThreshold(50).
.decl ExceptionType(?type:Type)
ExceptionType(?type) :-
  ?throw = "java.lang.Throwable",
  isType(?throw),
  basic.SubtypeOf(?type, ?throw).
.decl OptAssignHeapAllocation(?inmethod:Method, ?heap:HeapAllocation)
OptAssignHeapAllocation(?inmethod, ?heap) :-
  AssignHeapAllocation(?heap, _, ?inmethod).
.decl ObjectMultipleAllocated(?heap:HeapAllocation)
ObjectMultipleAllocated(?heap) :-
  OptAssignHeapAllocation(?inmethod1, ?heap),
  OptAssignHeapAllocation(?inmethod2, ?heap),
  ?inmethod1 != ?inmethod2.
.decl MethodAndTypeToHeap(?heap:HeapAllocation, ?heapType:Type, ?method:Method)
MethodAndTypeToHeap(?heap, ?heaptype, ?meth) :-
  AssignHeapAllocation(?heap, _, ?meth),
  HeapAllocation_Type(?heap, ?heaptype),
  !isStringConstant(?heap),
  !StringFactoryHeap(?heap),
  !HeapAllocation_EmptyArray(?heap),
  !ObjectMultipleAllocated(?heap),
  !HeapAllocation_Keep(?heap).
.decl AllocationsPerMethodAndType(?type:Type, ?meth:Method, ?n:number)
AllocationsPerMethodAndType(?type, ?meth, ?n) :-
  MethodAndTypeToHeap(_, ?type, ?meth),
  ?n = count : MethodAndTypeToHeap(_, ?type, ?meth).
.decl AllocationShouldBeMergedPerMethod(?heaptype:Type, ?meth:Method)
AllocationShouldBeMergedPerMethod(?heaptype, ?meth) :-
  AllocationsPerMethodAndType(?heaptype, ?meth, ?n),
  MethodAllocationMergeThreshold(?t),
  ?n > ?t.
.decl MethodAndTypeToMergedHeap(?heap:HeapAllocation, ?heaptype:Type, ?meth:Method)
MethodAndTypeToMergedHeap(?heap, ?heaptype, ?meth) :-
  AllocationShouldBeMergedPerMethod(?heaptype, ?meth),
  MethodAndTypeToHeap(?heap, ?heaptype, ?meth).
.decl MinHeapOrdinalPerMethodAndType(?ord:number, ?type:Type, ?meth:Method)
.decl MethodAndTypeToRepresentative(?type:Type, ?meth:Method, ?reprHeap:HeapAllocation)
MinHeapOrdinalPerMethodAndType(?minHeapOrd, ?type, ?meth) :-
  MethodAndTypeToMergedHeap(_, ?type, ?meth),
  ?minHeapOrd = min ord(?heap): MethodAndTypeToMergedHeap(?heap, ?type, ?meth).
MethodAndTypeToRepresentative(?type, ?meth, ?representativeHeap) :-
  isHeapAllocation(?representativeHeap),
  MinHeapOrdinalPerMethodAndType(?minHeapOrd, ?type, ?meth),
  ord(?representativeHeap) = ?minHeapOrd.
HeapRepresentative(?representativeHeap, ?heap) :-
  MethodAndTypeToRepresentative(?type, ?meth, ?representativeHeap),
  MethodAndTypeToMergedHeap(?heap, ?type, ?meth).
.decl ClassAndTypeToHeap(?heap:HeapAllocation, ?heaptype:Type, ?class:ReferenceType)
.decl AllocationsPerClassAndType(?type:Type, ?class:ReferenceType, ?n:number)
ClassAndTypeToHeap(?heap, ?heaptype, ?class) :-
  MethodAndTypeToHeap(?heap, ?heaptype, ?meth),
  Method_DeclaringType(?meth, ?class).
AllocationsPerClassAndType(?type, ?class, ?n) :-
  ClassAndTypeToHeap(_, ?type, ?class),
  ?n = count : ClassAndTypeToHeap(_, ?type, ?class).
.decl AllocationShouldBeMergedPerClass(?heaptype:Type, ?class:Type)
.decl ClassAndTypeToMergedHeap(?heap:HeapAllocation, ?heaptype:Type, ?class:Type)
ClassAndTypeToMergedHeap(?heap, ?heaptype, ?class) :-
  AllocationShouldBeMergedPerClass(?heaptype, ?class),
  ClassAndTypeToHeap(?heap, ?heaptype, ?class).
.decl MinHeapOrdinalPerClassAndType(?minHeapOrd:number, ?type:Type, ?class:Type)
.decl ClassAndTypeToRepresentative(?type:Type, ?class:Type, ?reprHeap:HeapAllocation)
MinHeapOrdinalPerClassAndType(?minHeapOrd, ?type, ?class) :-
  ClassAndTypeToMergedHeap(_, ?type, ?class),
  ?minHeapOrd = min ord(?heap): ClassAndTypeToMergedHeap(?heap, ?type, ?class).
ClassAndTypeToRepresentative(?type, ?class, ?representativeHeap) :-
  isHeapAllocation(?representativeHeap),
  MinHeapOrdinalPerClassAndType(?minHeapOrd, ?type, ?class),
  ord(?representativeHeap) = ?minHeapOrd.
HeapRepresentative(?representativeHeap, ?heap) :-
  ClassAndTypeToRepresentative(?type, ?class, ?representativeHeap),
  ClassAndTypeToMergedHeap(?heap, ?type, ?class).
.decl ClassNameIndexes(?pos:number, ?type:ClassType)
ClassNameIndexes(0, ?type) :-
  isClassType(?type).
ClassNameIndexes(?pos+1, ?t) :-
  ClassNameIndexes(?pos, ?t),
  ?pos+1 < strlen(?t).
.decl DotsInClassName(?type:ClassType, ?pos:number)
.decl NotLastDot(?pos:number, ?type:ClassType)
.decl NotSecondLastDot(?pos:number, ?type:ClassType)
.decl LastDot(?type:ClassType, ?pos:number)
.decl SecondLastDot(?type:ClassType, ?pos:number)
.decl Class_PackageHack(?type:ClassType, ?packageName:symbol)
DotsInClassName(?type, ?pos) :-
  ClassNameIndexes(?pos, ?type),
  substr(?type, ?pos, 1) = ".".
NotLastDot(?pos, ?type) :-
  DotsInClassName(?type, ?pos),
  DotsInClassName(?type, ?pos2),
  ?pos2 > ?pos.
NotSecondLastDot(?pos, ?type) :-
  DotsInClassName(?type, ?pos),
  DotsInClassName(?type, ?pos2),
  ?pos2 > ?pos,
  NotLastDot(?pos2, ?type).
NotSecondLastDot(?pos, ?type) :-
  LastDot(?type, ?pos).
LastDot(?type, ?pos) :-
  DotsInClassName(?type, ?pos),
  !NotLastDot(?pos, ?type).
SecondLastDot(?type, ?pos) :-
  DotsInClassName(?type, ?pos),
  !NotSecondLastDot(?pos, ?type).
Class_PackageHack(?type, substr(?type, 0, ?secondLastPos)) :-
  SecondLastDot(?type, ?secondLastPos),
  isClassType(?type).
Class_PackageHack(?type, substr(?type, 0, ?lastPos)) :-
  !(SecondLastDot(?type, _)),
  isClassType(?type),
  LastDot(?type, ?lastPos).
Class_PackageHack(?type, ?type) :-
  !(LastDot(?type, _)),
  isClassType(?type).
.decl PackageAndTypeToHeap(?heap:HeapAllocation, ?heaptype:Type, ?packageName:symbol)
.decl AllocationsPerPackageAndType(?type:Type, ?packageName:symbol, ?n:number)
PackageAndTypeToHeap(?heap, ?heaptype, ?packageName) :-
  ClassAndTypeToHeap(?heap, ?heaptype, ?class),
  Class_PackageHack(?class, ?packageName).
AllocationsPerPackageAndType(?type, ?packageName, ?n) :-
  PackageAndTypeToHeap(_, ?type, ?packageName),
  ?n = count : PackageAndTypeToHeap(_, ?type, ?packageName).
.decl AllocationShouldBeMergedPerPackage(?heaptype:Type, ?packageName:symbol)
.decl PackageAndTypeToMergedHeap(?heap:HeapAllocation, ?heaptype:Type, ?packageName:symbol)
PackageAndTypeToMergedHeap(?heap, ?heaptype, ?packageName) :-
  AllocationShouldBeMergedPerPackage(?heaptype, ?packageName),
  PackageAndTypeToHeap(?heap, ?heaptype, ?packageName).
.decl MinHeapOrdinalPerPackageAndType(?minHeapOrd:number, ?type:Type, ?packageName:symbol)
.decl PackageAndTypeToRepresentative(?type:Type, ?packageName:symbol, ?representativeHeap:HeapAllocation)
MinHeapOrdinalPerPackageAndType(?minHeapOrd, ?type, ?packageName) :-
  PackageAndTypeToMergedHeap(_, ?type, ?packageName),
  ?minHeapOrd = min ord(?heap): PackageAndTypeToMergedHeap(?heap, ?type, ?packageName).
PackageAndTypeToRepresentative(?type, ?packageName, ?representativeHeap) :-
  isHeapAllocation(?representativeHeap),
  MinHeapOrdinalPerPackageAndType(?minHeapOrd, ?type, ?packageName),
  ord(?representativeHeap) = ?minHeapOrd.
HeapRepresentative(?representativeHeap, ?heap) :-
  PackageAndTypeToRepresentative(?type, ?packageName, ?representativeHeap),
  PackageAndTypeToMergedHeap(?heap, ?type, ?packageName).
.decl TypeToHeap(?heap:HeapAllocation, ?heaptype:Type)
.decl AllocationsPerType(?type:Type, ?n:number)
TypeToHeap(?heap, ?heaptype) :-
  ClassAndTypeToHeap(?heap, ?heaptype, _).
AllocationsPerType(?type, ?n) :-
  TypeToHeap(_, ?type),
  ?n = count : TypeToHeap(_, ?type).
.decl AllocationShouldBeMergedGlobally(?heaptype:Type)
.decl TypeToMergedHeap(?heap:HeapAllocation, ?heaptype:Type)
TypeToMergedHeap(?heap, ?heaptype) :-
  AllocationShouldBeMergedGlobally(?heaptype),
  TypeToHeap(?heap, ?heaptype).
.decl MinHeapOrdinalPerType(?minHeapOrd:number, ?type:Type)
.decl TypeToRepresentative(?type:Type, ?representativeHeap:HeapAllocation)
MinHeapOrdinalPerType(?minHeapOrd, ?type) :-
  TypeToMergedHeap(_, ?type),
  ?minHeapOrd = min ord(?heap): TypeToMergedHeap(?heap, ?type).
TypeToRepresentative(?type, ?representativeHeap) :-
  isHeapAllocation(?representativeHeap),
  MinHeapOrdinalPerType(?minHeapOrd, ?type),
  ord(?representativeHeap) = ?minHeapOrd.
HeapRepresentative(?representativeHeap, ?heap) :-
  TypeToRepresentative(?type, ?representativeHeap),
  TypeToMergedHeap(?heap, ?type).
.decl SpecialLibraryObject(?heap:HeapAllocation)
SpecialLibraryObject(?heap) :-
  AssignHeapAllocation_Heap(?insn, ?heap),
  Instruction_Method(?insn, ?method),
  SpecialLibraryMethod(?method).
.decl SpecialLibraryMethod(?method:Method)
SpecialLibraryMethod(?method) :-
  Method_DeclaringType(?method, ?class),
  SpecialLibraryClass(?class).
.decl SpecialLibraryClass(?class:Type)
SpecialLibraryClass(?class) :-
  isClassType(?class),
  !ApplicationClass(?class),
  !CollectionClass(?class).
.decl CollectionClass(?class:Type)
CollectionClass(?class) :-
  isClassType(?class),
  !ApplicationClass(?class),
  basic.SubtypeOf(?class, ?superclass),
  (?superclass = "java.util.Map";
   ?superclass = "java.util.Collection";
   ?superclass = "java.util.Iterable";
   ?superclass = "java.util.Iterator";
   ?superclass = "java.util.Comparator";
   ?superclass = "java.util.Dictionary";
   ?superclass = "java.util.TimSort";
   ?superclass = "java.util.ComparableTimSort";
   ?superclass = "java.util.Arrays";
   ?superclass = "java.util.Objects";
   ?superclass = "java.util.Collections").
.decl CollectionInnerClass(?class:ClassType)
CollectionInnerClass(?innerClass),
CollectionClass(?innerClass) :-
  CollectionInnerClassPrefix(?innerClassPrefix),
  isClassType(?innerClass),
  substr(?innerClass, 0, strlen(?innerClassPrefix)) = ?innerClassPrefix.
.decl CollectionInnerClassPrefix(?innerClassPrefix:symbol)
CollectionInnerClassPrefix(?innerClassPrefix) :-
  CollectionClass(?class),
  ?innerClassPrefix = cat(?class, "$").
.output CollectionClass
  HeapAllocation_ContextInsensitive(?heap) :-
    SpecialLibraryObject(?heap),
    !HeapRepresentative(_, ?heap).
    AllocationShouldBeMergedPerMethod(?heaptype, ?meth) :-
      AllocationsPerMethodAndType(?heaptype, ?meth, ?n),
      ?n > 1,
      ?heaptype != "java.lang.Class",
      Method_DeclaringType(?meth, ?class),
      SpecialLibraryClass(?class).
.decl StringFactoryType(?type:Type)
.decl StringFactoryHeap(?heap:HeapAllocation)
StringFactoryType(?type) :-
  ?type = "java.lang.StringBuffer" ;
  ?type = "java.lang.StringBuilder".
StringFactoryHeap(?heap) :-
  HeapAllocation_Type(?heap, ?heaptype),
  StringFactoryType(?heaptype).
.decl ExceptionTypeToHeap(?heap:HeapAllocation, ?type:Type)
ExceptionTypeToHeap(?heap, ?heaptype) :-
  AssignHeapAllocation(?heap, _, _),
  HeapAllocation_Type(?heap, ?heaptype),
  ExceptionType(?heaptype).
.decl ExceptionHeapTypeRepresentativeOrdinal(?type:Type, ?reprHeapOrd:number)
ExceptionHeapTypeRepresentativeOrdinal(?type, ?representativeHeapOrd) :-
  ExceptionTypeToHeap(_, ?type),
  ?representativeHeapOrd = min ord(?heap) : ExceptionTypeToHeap(?heap, ?type).
HeapRepresentative(?representativeHeap, ?heap) :-
  ExceptionHeapTypeRepresentativeOrdinal(?heaptype, ?representativeHeapOrd),
  ExceptionTypeToHeap(?heap, ?heaptype),
  ord(?representativeHeap) = ?representativeHeapOrd,
  isHeapAllocation(?representativeHeap).
HeapAllocation_ContextInsensitive(?heap) :-
  HeapAllocation_Type(?heap, ?type),
  isArrayType(?type),
  ComponentType(?type, ?componentType),
  isPrimitiveType(?componentType).
ReflectionStringConstant("int").
ReflectionStringConstant("float").
ReflectionStringConstant("double").
ReflectionStringConstant("byte").
ReflectionStringConstant("boolean").
ReflectionStringConstant("char").
ReflectionStringConstant("long").
ReflectionStringConstant("short").
ReflectionStringConstant("void").
.decl _StringIterationTrick(?pos:number)
_StringIterationTrick(0).
_StringIterationTrick(?pos + 1) :- _StringIterationTrick(?pos), ?pos < 256.
.decl RelevantSuffixPosition(?typeName: Type, ?pos:number)
RelevantSuffixPosition(?typeName, ?pos) :-
  isType(?typeName),
  _StringIterationTrick(?pos), ?pos < strlen(?typeName).
.decl Suffix(?type:Type, ?suffix:symbol, ?suffixLen:number)
Suffix(?type, ?suffix, ?suffixLen) :-
  RelevantSuffixPosition(?type, ?pos),
  substr(?type, ?pos, 1) = ".",
  ?suffixLen = strlen(?type) - ?pos - 1,
  ?suffix = substr(?type, ?pos + 1, ?suffixLen).
Suffix(?type, ?type, ?suffixLen) :-
  isType(?type),
  ?suffixLen = strlen(?type).
.decl MinimalSuffixLen(?type:Type, ?suffixLen:number)
MinimalSuffixLen(?type, ?suffixLen) :-
  isType(?type),
  ?suffixLen = min ?len : Suffix(?type, _, ?len).
.decl MinimalSuffix(?type:Type, ?suffix:symbol)
MinimalSuffix(?type, ?suffix) :-
  MinimalSuffixLen(?type, ?suffixLen),
  Suffix(?type, ?suffix, ?suffixLen).
RunningThread(?hctx, ?value) :-
    MainThread(?hctx, ?value).
ReachableContext(?calleeCtx, ?run),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?runThis),
RunningThread(?hctx, ?value)
:-
    ?start = "<java.lang.Thread: void start0()>",
    ThisVar(?start, ?startThis),
    CallGraphEdge(_, _, ?calleeCtx, ?start),
    VarPointsTo(?hctx, ?value, ?calleeCtx, ?startThis),
    Value_Type(?value, ?valuetype),
    basic.MethodLookup("run", "void()", ?valuetype, ?run),
    ThisVar(?run, ?runThis).
VarPointsTo(?hctx, ?value, ?callerCtx, ?local) :-
   ReachableCurrentThreadInvocation(?callerCtx, ?local),
   RunningThread(?hctx, ?value).
ReachableCurrentThreadInvocation(?callerCtx, ?local) :-
   ?signature = "<java.lang.Thread: java.lang.Thread currentThread()>",
   StaticMethodInvocation(?invocation, ?signature, ?inmethod),
   ReachableContext(?callerCtx, ?inmethod),
   AssignReturnValue(?invocation, ?local).
configuration.ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?signature, 1) :-
    SystemThreadGroup(?hctx, ?value),
    isImmutableContext(?callerCtx),
    FakeInvocation_ThreadGroupInit(?invo),
    ?signature = "<java.lang.ThreadGroup: void <init>()>".
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this),
isContext(?calleeCtx),
ReachableContext(?calleeCtx, ?signature) :-
    ?signature = "<java.lang.ThreadGroup: void <init>()>",
    ThisVar(?signature, ?this),
    SystemThreadGroup(?hctx, ?value),
    configuration.ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?signature, 1),
    configuration.ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?signature, ?calleeCtx).
configuration.ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?signature, 1) :-
    MainThreadGroup(?hctx, ?value),
    isImmutableContext(?callerCtx),
    FakeInvocation_ThreadGroupInit(?invo),
    ?signature = "<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>".
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this),
VarPointsTo(?groupHCtx, ?group, ?calleeCtx, ?groupParam),
isContext(?calleeCtx),
ReachableContext(?calleeCtx, ?signature) :-
    ?signature = "<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>",
    ThisVar(?signature, ?this),
    MainThreadGroup(?hctx, ?value),
    FormalParam(0, ?signature, ?groupParam),
    SystemThreadGroup(?groupHCtx, ?group),
    configuration.ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?signature, 1),
    configuration.ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?signature, ?calleeCtx).
configuration.ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?signature, 1) :-
    MainThread(?hctx, ?value),
    isImmutableContext(?callerCtx),
    FakeInvocation_MainThreadInit(?invo),
    ?signature = "<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>".
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this),
VarPointsTo(?groupHCtx, ?group, ?calleeCtx, ?groupParam),
isContext(?calleeCtx),
ReachableContext(?calleeCtx, ?signature) :-
    ?signature = "<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>",
    ThisVar(?signature, ?this),
    MainThread(?hctx, ?value),
    FormalParam(0, ?signature, ?groupParam),
    MainThreadGroup(?groupHCtx, ?group),
    configuration.ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?signature, 1),
    configuration.ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?signature, ?calleeCtx).
FakeInvocation_ThreadGroupInit(?invo),
isInstruction(?invo), isMethodInvocation(?invo) :-
  ?invo = "<thread-group-init>/0".
FakeInvocation_MainThreadInit(?invo),
isInstruction(?invo), isMethodInvocation(?invo) :-
  ?invo = "<main-thread-init>/0".
FakeInvocation_SystemThreadGroupInit(?invo),
isInstruction(?invo), isMethodInvocation(?invo) :-
  ?invo = "<system-thread-group-init>/0".
FakeInvocation_RegisterFinalize(?heapValue, ?invo) :-
  FakeInvocation_RegisterFinalize0(?heapValue, ?invo).
Value_isHeap(?heapValue),
isValue(?heapValue),
Value_Type(?heapValue, ?type) :-
  isHeapAllocation(?heapValue),
  HeapAllocation_Type(?heapValue, ?type).
Value_isNonHeap(?value) :-
  Value_isMock(?value) ;
  Value_Num(?value, _, _).
Value_Null(?nullheap) :-
  HeapAllocation_Null(?nullheap).
Value_DeclaringType(?heapValue, ?type) :-
  AssignHeapAllocation(?heapValue, _, ?inmethod),
  Method_DeclaringType(?inmethod, ?type),
  isNormalHeap(?heapValue).
Value_DeclaringType(?heapValue, "java.lang.System") :-
  isClassHeap(?heapValue).
Value_DeclaringType(?heapValue, "java.lang.String") :-
  isStringConstant(?heapValue).
Value_DeclaringType(?value, "java.lang.Object") :-
  Value_Null(?value);
  MainMethodArgArray(?value);
  MainMethodArgArrayContent(?value).
Value_DeclaringType(?heapValue, "java.lang.invoke.MethodHandle") :-
  isMethodHandleConstant(?heapValue).
Value_DeclaringType(?heapValue, "java.lang.invoke.MethodType") :-
  isMethodTypeConstant(?heapValue).
Value_DeclaringType(?heapValue, ?type) :-
  SimulatedNativeAllocation(?heapValue, ?method),
  Method_DeclaringType(?method, ?type).
NotSpecialObject(?value) :-
  Value_isHeap(?value) ;
  Value_isMock(?value) ;
  Value_Num(?value, _, _).
configuration.InitContextRequest("<<immutable-context>>").
isImmutableContext(?ctx),
isContext(?ctx) :-
  ?s = "<<immutable-context>>",
  configuration.InitContextRequest(?s),
  configuration.InitContextResponse(?s, ?ctx).
ApplicationEntryPoint(?method),
ReachableContext(?initialContext, ?method) :-
  isImmutableContext(?initialContext),
  basic.MainMethodDeclaration(?method).
ReachableContext(?ctx, ?method) :-
  isImmutableContext(?ctx),
  ImplicitReachable(?method).
ReachableContext(?clinitContext, ?clinit) :-
  isImmutableContext(?clinitContext),
  InitializedClass(?class),
  ClassInitializer(?class, ?clinit).
configuration.InitHContextRequest("<<immutable-hcontext>>").
isImmutableHContext(?hctx),
isHContext(?hctx) :-
  ?s = "<<immutable-hcontext>>",
  configuration.InitHContextRequest(?s),
  configuration.InitHContextResponse(?s, ?hctx).
SystemThreadGroup(?hctx, ?alloc) :-
  isImmutableHContext(?hctx),
  ?alloc = "<<system-thread-group>>",
  isValue(?alloc).
MainThreadGroup(?hctx, ?alloc) :-
  isImmutableHContext(?hctx),
  ?alloc = "<<main-thread-group>>",
  isValue(?alloc).
MainThread(?hctx, ?alloc) :-
  isImmutableHContext(?hctx),
  ?alloc = "<<main-thread>>",
  isValue(?alloc).
.decl ReachableValue(?hctx:configuration.HContext, ?value: Value)
ReachableValue(?hctx, ?heapValue) :-
  AssignContextInsensitiveHeapAllocation(?heapValue, _, ?inmethod),
  ReachableContext(_, ?inmethod),
  isImmutableHContext(?hctx).
isHContext(?newHCtx),
ReachableValue(?newHCtx, ?heapValue) :-
  configuration.RecordContextRequest(?ctx, ?heapValue, ?var),
  configuration.RecordContextResponse(?ctx, ?heapValue, ?var, ?newHCtx).
ReachableValue(?hctx, ?value) :-
  VarPointsTo(?hctx, ?value, _, _).
.decl TypeHasReachableValue(?valueType: Type)
TypeHasReachableValue(?valueType) :-
  ReachableValue(_, ?value),
  Value_Type(?value, ?valueType).
configuration.RecordContextRequest(?ctx, ?heapValue, ?var) :-
  AssignNormalHeapAllocation(?heapValue, ?var, ?inmethod),
  ReachableContext(?ctx, ?inmethod).
VarPointsTo(?newHCtx, ?heapValue, ?ctx, ?var) :-
  configuration.RecordContextRequest(?ctx, ?heapValue, ?var),
  configuration.RecordContextResponse(?ctx, ?heapValue, ?var, ?newHCtx).
VarPointsTo(?hctx, ?heapValue, ?ctx, ?var) :-
  Reachable(?inmethod),
  AssignContextInsensitiveHeapAllocation(?heapValue, ?var, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  isImmutableHContext(?hctx).
  .plan 1:(4,3,2,1)
VarPointsTo(?hctx, ?null, ?toCtx, ?to) :-
   Reachable(?inmethod),
   AssignNull(?to, ?inmethod),
   Value_Null(?null),
   ReachableContext(?toCtx, ?inmethod),
   isImmutableHContext(?hctx).
VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
   ReachableContext(?toCtx, ?inmethod),
   Instruction_Method(?insn, ?inmethod),
   (AssignNumConstant_Id(?insn, ?const);
    AssignCastNumConstant_Id(?insn, ?const)),
   AssignInstruction_To(?insn, ?to),
   NumConstantRawInt(?const),
   Var_Type(?to, ?toType),
   Value_Num(?value, ?const, ?toType),
   isImmutableHContext(?hctx).
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  AssignLocal(?from, ?to, _).
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  OptAssignCast(?type, ?to, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  Value_Type(?value, ?valuetype),
  basic.SupertypeOf(?type, ?valuetype).
 .plan 2:(3,2,1,4)
.decl OptAssignCast(?type:Type, ?to:Var, ?from:Var)
OptAssignCast(?type, ?to, ?from) :-
  Reachable(?inmethod),
  AssignCast(?type, ?from, ?to, ?inmethod).
LoadHeapInstanceField(?ctx, ?to, ?sig, ?basehctx, ?basevalue) :-
  LoadInstanceField(?base, ?sig, ?to, _),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).
StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctx, ?from) :-
  StoreInstanceField(?from, ?base, ?signature, _),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).
HeapInterproceduralAssign(?ctxTo, ?to, ?ctxFrom, ?from) :-
  LoadHeapInstanceField(?ctxTo, ?to, ?signature, ?basehctx, ?basevalue),
  StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctxFrom, ?from),
  !Value_Null(?basevalue).
 .plan 1:(2,1)
VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
  HeapInterproceduralAssign(?toCtx, ?to, ?fromCtx, ?from),
  VarPointsTo(?hctx, ?value, ?fromCtx, ?from),
  NotSpecialObject(?value).
 .plan 1:(2,1,3), 2:(3,2,1)
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  LoadHeapInstanceField(?ctx, ?to, ?signature, ?basehctx, ?basevalue),
  InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue).
InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue) :-
  StoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctx, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  NotSpecialObject(?value),
  !Value_Null(?basevalue).
 .plan 1:(2,1,3), 2:(3,2,1)
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  StaticFieldPointsTo(?hctx, ?value, ?sig),
  LoadStaticField(?sig, ?to, ?inmethod),
  ReachableContext(?ctx, ?inmethod).
  .plan 1:(3,2,1)
StaticFieldPointsTo(?hctx, ?value, ?signature) :-
  ReachableStoreStaticFieldFrom(?from),
  StoreStaticField(?from, ?signature, _),
  VarPointsTo(?hctx, ?value, _, ?from).
.decl ReachableStoreStaticFieldFrom(?from:Var)
ReachableStoreStaticFieldFrom(?from) :-
  Reachable(?inmethod),
  StoreStaticField(?from, _, ?inmethod).
.decl OptLoadHeapArrayIndex(?var:Var, ?value:Value)
.decl Temp1(?value:Value, ?var:Var)
.decl Temp2(?ctx:configuration.Context, ?var:Var, ?hctx:configuration.HContext, ?value:Value)
OptLoadHeapArrayIndex(?to, ?basevalue) :-
  LoadHeapArrayIndex(_, ?to, _, ?basevalue).
Temp1(?basevalue, ?to) :-
  NotEmptyArrayValue(?basevalue),
  OptLoadHeapArrayIndex(?to, ?basevalue),
  Value_Type(?basevalue, ?basevaluetype),
  ComponentType(?basevaluetype, ?basecomponenttype),
  Var_Type(?to, ?type),
  basic.SupertypeOf(?type, ?basecomponenttype).
Temp2(?ctx, ?to, ?basehctx, ?basevalue) :-
  Temp1(?basevalue, ?to),
  LoadHeapArrayIndex(?ctx, ?to, ?basehctx, ?basevalue).
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  Temp2(?ctx, ?to, ?basehctx, ?basevalue),
  ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue).
.decl NotEmptyArrayValue(?value:Value)
NotEmptyArrayValue(?heapValue) :-
  Value_isHeap(?heapValue),
  isHeapAllocation(?heapValue),
  !HeapAllocation_EmptyArray(?heapValue).
NotEmptyArrayValue(?value) :-
  Value_isNonHeap(?value).
LoadHeapArrayIndex(?ctx, ?to, ?basehctx, ?basevalue) :-
  ReachableLoadArrayIndexBase(?base),
  OptLoadArrayIndex(?to, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).
OptLoadArrayIndex(?to, ?base) :-
  LoadArrayIndex(?base, ?to, _).
.decl ReachableLoadArrayIndexBase(?base:Var)
ReachableLoadArrayIndexBase(?base) :-
  Reachable(?inmethod),
  LoadArrayIndex(?base, _, ?inmethod).
.decl OptStoreIntoArray(?hctx:configuration.HContext, ?value:Value, ?basehctx:configuration.HContext, ?basevalue:Value)
OptStoreIntoArray(?hctx, ?value, ?basehctx, ?basevalue) :-
  StoreHeapArrayIndex(?basehctx, ?basevalue, ?ctx, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from).
ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue) :-
  OptStoreIntoArray(?hctx, ?value, ?basehctx, ?basevalue),
  NotSpecialObject(?value),
  NotEmptyArrayValue(?basevalue),
  Value_Type(?value, ?valuetype),
  Value_Type(?basevalue, ?basevaluetype),
  ComponentType(?basevaluetype, ?componenttype),
  basic.SupertypeOf(?componenttype, ?valuetype).
 .plan 1:(2,1,3,4,5,6,7),
       2:(3,1,2,4,5,6,7),
       3:(4,1,2,3,5,6,7),
       4:(5,1,2,3,4,6,7)
StoreHeapArrayIndex(?basehctx, ?basevalue, ?ctx, ?from) :-
  ReachableStoreArrayIndexBase(?base),
  OptStoreArrayIndex(?from, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).
.decl ReachableStoreArrayIndexBase(?base:Var)
ReachableStoreArrayIndexBase(?base) :-
  Reachable(?inmethod),
  StoreArrayIndex(_, ?base, ?inmethod).
OptStoreArrayIndex(?from, ?base) :-
  StoreArrayIndex(?from, ?base, _).
OptArgAssign(?calleeCtx, ?formal, ?callerCtx, ?actual, ?allowedType) :-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
  ActualParam(?index, ?invocation, ?actual),
  FormalParam(?index, ?method, ?formal),
  Var_Type(?formal, ?allowedType).
VarPointsTo(?hctx, ?value, ?callerCtx, ?local) :-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
  AssignReturnValue(?invocation, ?local),
  ReturnVar(?return, ?method),
  !SanitizationMethod(?method),
  OptRetVarPointsTo(?hctx, ?value, ?calleeCtx, ?return).
  .plan 1:(4,3,1,2)
VarPointsTo(?hctx, ?value, ?callerCtx, ?local) :-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
  AssignReturnValue(?invocation, ?local),
  ReturnVar(?return, ?method),
  OptRetVarPointsTo(?hctx, ?value, ?calleeCtx, ?return),
  isHeapAllocation(?value).
  .plan 1:(4,5,3,1,2)
OptArgVarPointsTo(?hctx, ?value, ?actualCtx, ?actual) :-
  VarPointsTo(?hctx, ?value, ?actualCtx, ?actual),
  ActualParam(_, _, ?actual).
OptRetVarPointsTo(?hctx, ?value, ?returnCtx, ?return) :-
  VarPointsTo(?hctx, ?value, ?returnCtx, ?return),
  ReturnVar(?return, _).
VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
  OptArgVarPointsTo(?hctx, ?value, ?fromCtx, ?from),
  OptArgAssign(?toCtx, ?to, ?fromCtx, ?from, ?allowedType),
  Value_Type(?value, ?type),
  basic.SubtypeOf(?type, ?allowedType),
  isHeapAllocation(?value).
  .plan 1:(2,1,3,4,5)
VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
  OptArgVarPointsTo(?hctx, ?value, ?fromCtx, ?from),
  OptArgAssign(?toCtx, ?to, ?fromCtx, ?from, ?allowedType),
  Value_Type(?value, ?type),
  basic.SubtypeOf(?type, ?allowedType),
  Var_DeclaringMethod(?to, ?meth),
  !SanitizationMethod(?meth).
  .plan 1:(2,1,3,4,5)
VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
  OptInterproceduralAssign(?toCtx, ?to, ?fromCtx, ?from),
  VarPointsTo(?hctx, ?value, ?fromCtx, ?from).
.decl OptVirtualMethodInvocationBase(?invocation:MethodInvocation, ?base:Var)
OptVirtualMethodInvocationBase(?invocation, ?base) :-
  Reachable(?inmethod),
  Instruction_Method(?invocation, ?inmethod),
  VirtualMethodInvocation_Base(?invocation, ?base).
configuration.ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod, 1) :-
  OptVirtualMethodInvocationBase(?invocation, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  Value_Type(?value, ?valuetype),
  basic.ResolveInvocation(?valuetype, ?invocation, ?tomethod).
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this) :-
  configuration.ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod, _),
  configuration.ContextResponse(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod, ?calleeCtx),
  ThisVar(?tomethod, ?this),
  !Value_Null(?value).
 .plan 1:(2,1,3)
.decl OptSuperMethodInvocationBase(?invocation:MethodInvocation, ?base:Var)
OptSuperMethodInvocationBase(?invocation, ?base) :-
  Reachable(?inmethod),
  Instruction_Method(?invocation, ?inmethod),
  SuperMethodInvocation_Base(?invocation, ?base).
configuration.ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod, 1) :-
  OptSuperMethodInvocationBase(?invocation, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  MethodInvocation_Method(?invocation, ?tomethod).
.decl OptSpecialMethodInvocationBase(?invocation:MethodInvocation, ?base:Var)
OptSpecialMethodInvocationBase(?invocation, ?base) :-
  Reachable(?inmethod),
  Instruction_Method(?invocation, ?inmethod),
  SpecialMethodInvocation_Base(?invocation, ?base).
configuration.ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod, 1) :-
  OptSpecialMethodInvocationBase(?invocation, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  MethodInvocation_Method(?invocation, ?tomethod).
ReachableContext(?ctx, ?method) :-
  CallGraphEdge(_, _, ?ctx, ?method).
Reachable(?method) :-
  ReachableContext(_, ?method).
.decl AppReachable(?method:Method)
AppReachable(?method) :-
  Reachable(?method),
  ApplicationMethod(?method).
.decl ReachableAnnotationMethod(?method:Method, ?annotation:Annotation)
ReachableAnnotationMethod(?annotMethod, ?annotation) :-
  ReachableContext(_, ?method),
  Method_Annotation(?method, ?annotation),
  Method_DeclaringType(?annotMethod, ?annotation).
ReachableContext(?ctx0, ?annotMethod) :-
  ReachableAnnotationMethod(?annotMethod, _),
  isImmutableContext(?ctx0).
.decl AnyCallGraphEdge(?instr:Instruction, ?method:Method)
AnyCallGraphEdge(?i, ?m) :- CallGraphEdge(_, ?i, _, ?m).
AnyCallGraphEdge(?i, ?m) :- InvokedynamicBootCallGraphEdge(_, ?i, _, ?m).
AnyCallGraphEdge(?i, ?m) :- LambdaCallGraphEdge(_, ?i, _, ?m, _).
AnyCallGraphEdge(?i, ?m) :- MethodHandleCallGraphEdge(_, ?i, _, ?m, _, _).
AnyCallGraphEdge(?from, ?to) :- ReflectiveCallGraphEdge(_, ?from, _, ?to).
AnyCallGraphEdge(?i, ?m) :- OpaqueCallGraphEdge(?i, ?m).
.output Stats_Metrics(IO="file",filename="Stats_Metrics.csv",delimiter="\t")
.output CallGraphEdge(IO="file",filename="CallGraphEdge.csv",delimiter="\t")
.output AnyCallGraphEdge(IO="file",filename="AnyCallGraphEdge.csv",delimiter="\t")
.output VarPointsTo(IO="file",filename="VarPointsTo.csv",delimiter="\t")
.output ReachableContext(IO="file",filename="ReachableContext.csv",delimiter="\t")
.output InstanceFieldPointsTo(IO="file",filename="InstanceFieldPointsTo.csv",delimiter="\t")
.output StaticFieldPointsTo(IO="file",filename="StaticFieldPointsTo.csv",delimiter="\t")
.output Reachable(IO="file",filename="Reachable.csv",delimiter="\t")
VarPointsTo(?hctx, ?classValue, ?ctx, ?to) :-
  java_lang_Object_getClass(?to, ?from),
  VarPointsTo(_, ?value, ?ctx, ?from),
  isImmutableHContext(?hctx),
  Value_Type(?value, ?type),
  ReifiedClass(?type, ?classValue).
  .plan 2:(4,2,1,3,5)
.decl ForwardReflectiveAssignClassConstant(?ctx:configuration.Context, ?invocation:MethodInvocation, ?type:Type)
.decl ForwardReflectiveAssignClassConstantString(?ctx:configuration.Context, ?invocation:MethodInvocation, ?type:Type, ?constantHeap:Value)
ForwardReflectiveAssignClassConstant(?ctx, ?invocation, ?type),
ForwardReflectiveAssignClassConstantString(?ctx, ?invocation, ?type, ?constantHeap) :-
  java_lang_Class_forName(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  ActualParam(0, ?invocation, ?param),
  VarPointsTo(_, ?constantHeap, ?ctx, ?param),
  Value_isHeap(?constantHeap),
  ClassNameMatchingStringConstant_Type(?type, ?constantHeap).
.decl HighConfidenceAssign(?value:Value, ?inmethod:Method)
HighConfidenceAssign(?value, ?inmethod) :-
  AssignHeapAllocation(?value, _, ?inmethod).
.decl ForwardHighConfidenceReflectiveAssignClassConstant(?ctx:configuration.Context, ?invocation:MethodInvocation, ?type:Type)
ForwardHighConfidenceReflectiveAssignClassConstant(?ctx, ?invocation, ?type) :-
  ForwardReflectiveAssignClassConstantString(?ctx, ?invocation, ?type, ?constantHeap),
  Instruction_Method(?invocation, ?inmethod),
  HighConfidenceAssign(?constantHeap, ?inmethod),
  ((NumberOfClassesMatchingConstant(?constantHeap, ?num),
    StringPrecisionThreshold(?t),
    ?num < ?t) ;
   PreClassNameMatchingStringConstantExact_Type(?type, ?constantHeap)).
VarPointsTo(?hctx, ?className, ?callerCtx, ?to) :-
  isImmutableHContext(?hctx),
  (java_lang_Class_getName(?to, ?from);
   java_lang_Class_getCanonicalName(?to, ?from)),
  VarPointsTo(_, ?classValue, ?callerCtx, ?from),
  ReifiedClass(?className, ?classValue),
  isStringConstant(?className),
  Value_isHeap(?className).
  .plan 1:(6,5,4,3,2,1)
OpaqueCallGraphEdge(?invocation, ?method),
VarPointsTo(?hctx, ?simpleName, ?ctx, ?return) :-
  ReachableContext(?ctx, ?caller),
  _VirtualMethodInvocation(?invocation, _, ?method, ?base, ?caller),
  ?method = "<java.lang.Class: java.lang.String getSimpleName()>",
  VarPointsTo(?hctx, ?classValue, ?ctx, ?base),
  ReifiedClass(?className, ?classValue),
  AssignReturnValue(?invocation, ?return),
  MinimalSuffix(?className, ?simpleName).
.decl Enums(?enumsArray:Value, ?enumType:Type, ?ctx:configuration.Context, ?return:Var)
OpaqueCallGraphEdge(?invocation, ?method),
Enums(?enumsArray, ?enumType, ?ctx, ?return),
Value_isMock(?enumsArray), isValue(?enumsArray), Value_Type(?enumsArray, cat(?enumType, "[]")), Value_DeclaringType(?enumsArray, "java.lang.Object") :-
  ReachableContext(?ctx, ?caller),
  _VirtualMethodInvocation(?invocation, _, ?method, ?base, ?caller),
  ?method = "<java.lang.Class: java.lang.Object[] getEnumConstants()>",
  VarPointsTo(_, ?classValue, ?ctx, ?base),
  ReifiedClass(?enumType, ?classValue),
  basic.SubtypeOf(?enumType, "java.lang.Enum"),
  AssignReturnValue(?invocation, ?return),
  ?enumsArray = cat("<Enums array for ", cat(?enumType, ">")).
VarPointsTo(?hctx, ?enumsArray, ?ctx, ?return),
ArrayIndexPointsTo(?hctx0, ?enumValue, ?hctx, ?enumsArray) :-
  Enums(?enumsArray, ?enumType, ?ctx, ?return),
  Field_DeclaringType(?fld, ?enumType),
  StaticFieldPointsTo(?hctx, ?enumValue, ?fld),
  Value_Type(?enumValue, ?enumType),
  isImmutableHContext(?hctx0).
VarPointsTo(?hctx, ?componentClassValue, ?callerCtx, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_Class_getComponentType(?to, ?from),
  VarPointsTo(_, ?classValue, ?callerCtx, ?from),
  ReifiedClass(?type, ?classValue),
  isArrayType(?type),
  ComponentType(?type, ?componentType),
  ReifiedClass(?componentType, ?componentClassValue).
 .plan 1:(3,1,2,4,5,6,7)
.decl FromGetSuperClassType(?callerCtx:configuration.Context, ?hctx:configuration.HContext, ?type:Type, ?to:Var)
FromGetSuperClassType(?callerCtx, ?hctx, ?type, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_Class_getSuperclass(?to, ?from),
  VarPointsTo(_, ?classValue, ?callerCtx, ?from),
  ReifiedClass(?type, ?classValue).
  .plan 1:(3,2,4,1)
VarPointsTo(?hctx, ?superClassValue, ?callerCtx, ?to) :-
  FromGetSuperClassType(?callerCtx, ?hctx, ?type, ?to),
  isClassType(?type),
  DirectSuperclass(?type, ?superType),
  ReifiedClass(?superType, ?superClassValue).
VarPointsTo(?hctx, ?superClassValue, ?callerCtx, ?to) :-
  FromGetSuperClassType(?callerCtx, ?hctx, ?type, ?to),
  isArrayType(?type),
  isType(?superType),
  ?superType = "java.lang.Object",
  ReifiedClass(?superType, ?superClassValue).
ArrayIndexPointsTo(?hctx, ?superInterfaceValue, ?hctx, ?arrayValue) :-
  FillArray_Interfaces(?hctx, ?arrayValue, ?type),
  DirectSuperinterface(?type, ?superInterface),
  ReifiedClass(?superInterface, ?superInterfaceValue).
.decl FillArray_Interfaces(?hctx:configuration.HContext, ?arrayValue:Value, ?type:Type)
FillArray_Interfaces(?hctx, ?arrayValue, ?type),
VarPointsTo(?hctx, ?arrayValue, ?callerCtx, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_Class_getInterfaces(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?callerCtx, ?from),
  ReifiedClass(?type, ?classValue),
  ReflectiveAllocation(?invocation, _, ?arrayValue).
.decl FillArray_PublicMethods(?hctx:configuration.HContext, ?arrayValue:Value, ?type:Type)
FillArray_PublicMethods(?hctx, ?arrayValue, ?type),
VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to) :-
  java_lang_Class_getMethods(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  ReifiedClass(?type, ?classValue),
  ReflectiveAllocation(?invocation, _, ?arrayValue),
  isImmutableHContext(?hctx).
.decl ForwardReflectiveAssignMethodConstant(?ctx:configuration.Context, ?to:Var, ?signature:Method)
.decl ForwardReflectiveAssignMethodConstantString(?ctx:configuration.Context, ?to:Var, ?signature:Method, ?constantHeap:Value)
.decl OptGetMethodFromClass(?to:Var, ?ctx:configuration.Context, ?param:Var, ?type:Type)
OptGetMethodFromClass(?to, ?ctx, ?param, ?type) :-
  java_lang_Class_getMethod(?to, ?param, ?from),
  VarPointsTo(_, ?reifiedClass, ?ctx, ?from),
  ReifiedClass(?type, ?reifiedClass).
.decl OptTypeContainsPublicMethod(?type:Type, ?signature:Method)
OptTypeContainsPublicMethod(?type, ?signature) :-
  basic.SupertypeOf(?superClass, ?type),
  Method_DeclaringType(?signature, ?superClass),
  Method_Modifier("public", ?signature).
ForwardReflectiveAssignMethodConstant(?ctx, ?to, ?signature),
ForwardReflectiveAssignMethodConstantString(?ctx, ?to, ?signature, ?constantHeap) :-
  OptGetMethodFromClass(?to, ?ctx, ?param, ?type),
  VarPointsTo(_, ?constantHeap, ?ctx, ?param),
  Value_isHeap(?constantHeap),
  MethodNameMatchingStringConstant_Signature(?signature, ?constantHeap),
  OptTypeContainsPublicMethod(?type, ?signature).
 .plan 1:(2,1,3,4,5)
.decl ForwardHighConfidenceReflectiveAssignMethodConstant(?ctx:configuration.Context, ?to:Var, ?signature:Method)
ForwardHighConfidenceReflectiveAssignMethodConstant(?ctx, ?to, ?signature) :-
  ForwardReflectiveAssignMethodConstantString(?ctx, ?to, ?signature, ?constantHeap),
  Var_DeclaringMethod(?to, ?inmethod),
  HighConfidenceAssign(?constantHeap, ?inmethod),
  ((NumberOfMethodsMatchingConstant(?constantHeap, ?num),
    StringPrecisionThreshold(?t),
    ?num < ?t ) ;
   PreMethodNameMatchingStringConstantExact_Signature(?signature, ?constantHeap)).
.decl FillArray_Methods(?hctx:configuration.HContext, ?arrayValue:Value, ?type:Type)
FillArray_Methods(?hctx, ?arrayValue, ?type),
VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_Class_getDeclaredMethods(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  ReifiedClass(?type, ?classValue),
  ReflectiveAllocation(?invocation, _, ?arrayValue).
ForwardReflectiveAssignMethodConstant(?ctx, ?to, ?signature),
ForwardReflectiveAssignMethodConstantString(?ctx, ?to, ?signature, ?constantHeap) :-
  java_lang_Class_getDeclaredMethod(?to, ?param, ?from),
  VarPointsTo(_, ?reifiedClass, ?ctx, ?from),
  ReifiedClass(?type, ?reifiedClass),
  VarPointsTo(_, ?constantHeap, ?ctx, ?param),
  Value_isHeap(?constantHeap),
  MethodNameMatchingStringConstant_Signature(?signature, ?constantHeap),
  Method_DeclaringType(?signature, ?type).
.decl FillArray_PublicConstructors(?hctx:configuration.HContext, ?arrayValue:Value, ?classValue:Value)
FillArray_PublicConstructors(?hctx, ?arrayValue, ?classValue),
VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_Class_getConstructors(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  ReflectiveAllocation(?invocation, _, ?arrayValue).
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_Class_getConstructor(?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  OptClassToConstructor(?constructor, ?classValue),
  Method_Modifier("public", ?constructor),
  ReifiedConstructor(?constructor, ?value).
.decl FillArray_Constructors(?hctx:configuration.HContext, ?arrayValue:Value, ?classValue:Value)
FillArray_Constructors(?hctx, ?arrayValue, ?classValue),
VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_Class_getDeclaredConstructors(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  ReflectiveAllocation(?invocation, _, ?arrayValue).
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_Class_getDeclaredConstructor(?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  OptClassToConstructor(?constructor, ?classValue),
  ReifiedConstructor(?constructor, ?value).
.decl FillArray_PublicFields(?hctx:configuration.HContext, ?arrayValue:Value, ?type:Type)
FillArray_PublicFields(?hctx, ?arrayValue, ?type),
VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_Class_getFields(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  ReifiedClass(?type, ?classValue),
  ReflectiveAllocation(?invocation, _, ?arrayValue).
.decl ForwardReflectiveAssignFieldConstant(?ctx:configuration.Context, ?to:Var, ?signature:Field)
.decl ForwardReflectiveAssignFieldConstantString(?ctx:configuration.Context, ?to:Var, ?signature:Field, ?constantHeap:Value)
.decl OptGetFieldFromClass(?to:Var, ?ctx:configuration.Context, ?param:Var, ?type:Type)
OptGetFieldFromClass(?to, ?ctx, ?param, ?type) :-
  java_lang_Class_getField(?to, ?param, ?from),
  VarPointsTo(_, ?reifiedClass, ?ctx, ?from),
  ReifiedClass(?type, ?reifiedClass).
.decl OptTypeContainsPublicField(?type:Type, ?signature:Field)
OptTypeContainsPublicField(?type, ?signature) :-
  basic.SupertypeOf(?superClass, ?type),
  Field_DeclaringType(?signature, ?superClass),
  Field_Modifier("public", ?signature).
ForwardReflectiveAssignFieldConstant(?ctx, ?to, ?signature),
ForwardReflectiveAssignFieldConstantString(?ctx, ?to, ?signature, ?constantHeap) :-
  OptGetFieldFromClass(?to, ?ctx, ?param, ?type),
  VarPointsTo(_, ?constantHeap, ?ctx, ?param),
  Value_isHeap(?constantHeap),
  FieldNameMatchingStringConstant_Signature(?signature, ?constantHeap),
  OptTypeContainsPublicField(?type, ?signature).
 .plan 1:(2,1,3,4,5)
.decl ForwardHighConfidenceReflectiveAssignFieldConstant(?ctx:configuration.Context, ?to:Var, ?signature:Field)
ForwardHighConfidenceReflectiveAssignFieldConstant(?ctx, ?to, ?signature) :-
  ForwardReflectiveAssignFieldConstantString(?ctx, ?to, ?signature, ?constantHeap),
  Var_DeclaringMethod(?to, ?inmethod),
  HighConfidenceAssign(?constantHeap, ?inmethod),
  ((NumberOfFieldsMatchingConstant(?constantHeap, ?num),
    StringPrecisionThreshold(?t),
    ?num < ?t) ;
   PreFieldNameMatchingStringConstantExact_Signature(?signature, ?constantHeap)).
.decl FillArray_Fields(?hctx:configuration.HContext, ?arrayValue:Value, ?type:Type)
FillArray_Fields(?hctx, ?arrayValue, ?type),
VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_Class_getDeclaredFields(?invocation, ?to, ?from),
  VarPointsTo(_, ?classValue, ?ctx, ?from),
  ReifiedClass(?type, ?classValue),
  ReflectiveAllocation(?invocation, _, ?arrayValue).
ForwardReflectiveAssignFieldConstant(?ctx, ?to, ?signature),
ForwardReflectiveAssignFieldConstantString(?ctx, ?to, ?signature, ?constantHeap) :-
  java_lang_Class_getDeclaredField(?to, ?param, ?from),
  VarPointsTo(_, ?reifiedClass, ?ctx, ?from),
  ReifiedClass(?type, ?reifiedClass),
  VarPointsTo(_, ?constantHeap, ?ctx, ?param),
  Value_isHeap(?constantHeap),
  FieldNameMatchingStringConstant_Signature(?signature, ?constantHeap),
  Field_DeclaringType(?signature, ?type).
.decl OptClassToConstructor(?constructor:Method, ?classValue:Value)
OptClassToConstructor(?constructor, ?classValue) :-
  ReifiedClass(?type, ?classValue),
  basic.ClassConstructor(?constructor, ?type).
.decl AssignReflectiveAllocation(?invocation:MethodInvocation, ?type:Type, ?ctx:configuration.Context, ?to:Var)
.decl ReflectiveSpecialMethodInvocation(?invocation:MethodInvocation, ?constructor:Method, ?ctx:configuration.Context, ?to:Var)
AssignReflectiveAllocation(?invocation, ?type, ?ctx, ?to),
ReflectiveSpecialMethodInvocation(?invocation, ?constructor, ?ctx, ?to),
ReflectiveBaseVar(?invocation, ?to) :-
  java_lang_Class_newInstance(?invocation, ?to, ?from),
  VarPointsTo(_, ?class, ?ctx, ?from),
  OptClassToConstructor(?constructor, ?class),
  Method_DeclaringType(?constructor, ?type).
VarPointsTo(?hctx, ?classValue, ?ctx, ?to) :- java_lang_Class_getPrimitiveClass(?to, ?param), VarPointsTo(?hctx, ?heap, ?ctx, ?param), (?heap = "<<string-constant>>" ; ?heap = "int"), ReifiedClass("java.lang.Integer", ?classValue).
VarPointsTo(?hctx, ?classValue, ?ctx, ?to) :- java_lang_Class_getPrimitiveClass(?to, ?param), VarPointsTo(?hctx, ?heap, ?ctx, ?param), (?heap = "<<string-constant>>" ; ?heap = "float"), ReifiedClass("java.lang.Float", ?classValue).
VarPointsTo(?hctx, ?classValue, ?ctx, ?to) :- java_lang_Class_getPrimitiveClass(?to, ?param), VarPointsTo(?hctx, ?heap, ?ctx, ?param), (?heap = "<<string-constant>>" ; ?heap = "double"), ReifiedClass("java.lang.Double", ?classValue).
VarPointsTo(?hctx, ?classValue, ?ctx, ?to) :- java_lang_Class_getPrimitiveClass(?to, ?param), VarPointsTo(?hctx, ?heap, ?ctx, ?param), (?heap = "<<string-constant>>" ; ?heap = "byte"), ReifiedClass("java.lang.Byte", ?classValue).
VarPointsTo(?hctx, ?classValue, ?ctx, ?to) :- java_lang_Class_getPrimitiveClass(?to, ?param), VarPointsTo(?hctx, ?heap, ?ctx, ?param), (?heap = "<<string-constant>>" ; ?heap = "boolean"), ReifiedClass("java.lang.Boolean", ?classValue).
VarPointsTo(?hctx, ?classValue, ?ctx, ?to) :- java_lang_Class_getPrimitiveClass(?to, ?param), VarPointsTo(?hctx, ?heap, ?ctx, ?param), (?heap = "<<string-constant>>" ; ?heap = "char"), ReifiedClass("java.lang.Character", ?classValue).
VarPointsTo(?hctx, ?classValue, ?ctx, ?to) :- java_lang_Class_getPrimitiveClass(?to, ?param), VarPointsTo(?hctx, ?heap, ?ctx, ?param), (?heap = "<<string-constant>>" ; ?heap = "long"), ReifiedClass("java.lang.Long", ?classValue).
VarPointsTo(?hctx, ?classValue, ?ctx, ?to) :- java_lang_Class_getPrimitiveClass(?to, ?param), VarPointsTo(?hctx, ?heap, ?ctx, ?param), (?heap = "<<string-constant>>" ; ?heap = "short"), ReifiedClass("java.lang.Short", ?classValue).
VarPointsTo(?hctx, ?classValue, ?ctx, ?to) :- java_lang_Class_getPrimitiveClass(?to, ?param), VarPointsTo(?hctx, ?heap, ?ctx, ?param), (?heap = "<<string-constant>>" ; ?heap = "void"), ReifiedClass("java.lang.Void", ?classValue).
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  java_lang_Class_getClassLoader(?invocation, ?to, ?from),
  Var_DeclaringMethod(?from, ?method),
  ReachableContext(?ctx, ?method),
  isImmutableHContext(?hctx),
  isType(?type),
  ?type = "java.lang.ClassLoader",
  ReflectiveAllocation(?invocation, ?type, ?value).
.decl PopulateAnnotationsForType(?annotationsArray:Value, ?type:Type, ?hctx:configuration.HContext)
Value_isMock(?annotationsArray), isValue(?annotationsArray), Value_Type(?annotationsArray, "java.lang.annotation.Annotation[]"), Value_DeclaringType(?annotationsArray, "java.lang.Object"),
VarPointsTo(?hctx, ?annotationsArray, ?ctx, ?to),
PopulateAnnotationsForType(?annotationsArray, ?type, ?hctx) :-
( java_lang_Class_getAnnotations(?invocation, ?to, ?from) ;
  java_lang_Class_getDeclaredAnnotations(?invocation, ?to, ?from)),
  VarPointsTo(?hctx, ?classValue, ?ctx, ?from),
  ReifiedClass(?type, ?classValue),
  ?annotationsArray = cat("<annotations array for type ", cat(?type, cat(" at ", cat(?invocation, ">")))),
  isImmutableHContext(?hctx).
Value_isMock(?annotationValue), isValue(?annotationValue), Value_Type(?annotationValue, "java.lang.annotation.Annotation"), Value_DeclaringType(?annotationValue, "java.lang.Object"),
ArrayIndexPointsTo(?hctx, ?annotationValue, ?hctx, ?annotationsArray) :-
  PopulateAnnotationsForType(?annotationsArray, ?type, ?hctx),
  Type_Annotation(?type, ?annotation),
  ?annotationValue = cat("<annotation ", cat(?annotation, cat(" for ", cat(?type, ">")))).
.decl NumberOfClassesMatchingConstant(?constant:HeapAllocation, ?n:number)
.decl NumberOfMethodsMatchingConstant(?constant:HeapAllocation, ?n:number)
.decl NumberOfFieldsMatchingConstant(?constant:HeapAllocation, ?n:number)
NumberOfClassesMatchingConstant(?constant, ?n) :-
  ClassNameMatchingStringConstant_Type(_, ?constant),
  ?n = count : ClassNameMatchingStringConstant_Type(_, ?constant).
NumberOfMethodsMatchingConstant(?constant, ?n) :-
  MethodNameMatchingStringConstant_Signature(_, ?constant),
  ?n = count : MethodNameMatchingStringConstant_Signature(_, ?constant).
NumberOfFieldsMatchingConstant(?constant, ?n) :-
  FieldNameMatchingStringConstant_Signature(_, ?constant),
  ?n = count : FieldNameMatchingStringConstant_Signature(_, ?constant).
StringPrecisionThreshold(10).
AssignReflectiveAllocation(?invocation, ?arrayType, ?ctx, ?to) :-
  java_lang_reflect_Array_newInstance(?invocation, ?to, ?param),
  VarPointsTo(_, ?componentClass, ?ctx, ?param),
  ReifiedClass(?componentType, ?componentClass),
  ComponentType(?arrayType, ?componentType).
AssignReflectiveAllocation(?invocation, ?type, ?ctx, ?to),
ReflectiveSpecialMethodInvocation(?invocation, ?signature, ?ctx, ?to),
ReflectiveBaseVar(?invocation, ?to),
ReflectiveActualParams(?invocation, ?initargs) :-
  java_lang_reflect_Constructor_newInstance(?invocation, ?to, ?from),
  VarPointsTo(_, ?constructor, ?ctx, ?from),
  ReifiedConstructor(?signature, ?constructor),
  Method_DeclaringType(?signature, ?type),
  ActualParam(0, ?invocation, ?initargs).
.decl ReflectiveLoadField(?invocation:MethodInvocation, ?ctx:configuration.Context, ?to:Var, ?signature:Field)
ReflectiveLoadField(?invocation, ?ctx, ?to, ?signature) :-
  java_lang_reflect_Field_get(?invocation, ?to, ?field),
  VarPointsTo(_, ?fieldValue, ?ctx, ?field),
  ReifiedField(?signature, ?fieldValue).
.decl ReflectiveLoadStaticField(?ctx:configuration.Context, ?to:Var, ?signature:Field)
ReflectiveLoadStaticField(?ctx, ?to, ?signature) :-
  ReflectiveLoadField(_, ?ctx, ?to, ?signature),
  Field_Modifier("static", ?signature).
.decl ReflectiveLoadInstanceField(?ctx1:configuration.Context, ?to:Var, ?signature:Field, ?ctx2:configuration.Context, ?base:Var)
ReflectiveLoadInstanceField(?ctx, ?to, ?signature, ?ctx, ?base) :-
  ReflectiveLoadField(?invocation, ?ctx, ?to, ?signature),
  ! Field_Modifier("static", ?signature),
  java_lang_reflect_Field_get_base(?invocation, ?base).
.decl ReflectiveStoreField(?invocation:MethodInvocation, ?signature:Field, ?ctx:configuration.Context, ?from:Var)
ReflectiveStoreField(?invocation, ?signature, ?ctx, ?from) :-
  java_lang_reflect_Field_set(?invocation, ?from, ?field),
  VarPointsTo(_, ?fieldValue, ?ctx, ?field),
  ReifiedField(?signature, ?fieldValue).
.decl ReflectiveStoreStaticField(?signature:Field, ?ctx:configuration.Context, ?from:Var)
ReflectiveStoreStaticField(?signature, ?ctx, ?from) :-
  ReflectiveStoreField(_, ?signature, ?ctx, ?from),
  Field_Modifier("static", ?signature).
.decl ReflectiveStoreInstanceField(?ctx1:configuration.Context, ?from:Var, ?signature:Field, ?ctx2:configuration.Context, ?base:Var)
ReflectiveStoreInstanceField(?ctx, ?from, ?signature, ?ctx, ?base) :-
  ReflectiveStoreField(?invocation, ?signature, ?ctx, ?from),
  ! Field_Modifier("static", ?signature),
  java_lang_reflect_Field_set_base(?invocation, ?base).
.decl PopulateAnnotationsForField(?annotationsArray:Value, ?field:Field, ?hctx:configuration.HContext)
Value_isMock(?annotationsArray), isValue(?annotationsArray), Value_Type(?annotationsArray, "java.lang.annotation.Annotation[]"), Value_DeclaringType(?annotationsArray, "java.lang.Object"),
VarPointsTo(?hctx, ?annotationsArray, ?ctx, ?to),
PopulateAnnotationsForField(?annotationsArray, ?field, ?hctx) :-
  java_lang_reflect_Field_getDeclaredAnnotations(?invocation, ?to, ?from),
  VarPointsTo(?hctx, ?fieldValue, ?ctx, ?from),
  ReifiedField(?field, ?fieldValue),
  ?annotationsArray = cat("<annotations array for field ", cat(?field, cat(" at ", cat(?invocation, ">")))),
  isImmutableHContext(?hctx).
Value_isMock(?annotationValue), isValue(?annotationValue), Value_Type(?annotationValue, "java.lang.annotation.Annotation"), Value_DeclaringType(?annotationValue, "java.lang.Object"),
ArrayIndexPointsTo(?hctx, ?annotationValue, ?hctx, ?annotationsArray) :-
  PopulateAnnotationsForField(?annotationsArray, ?field, ?hctx),
  Field_Annotation(?field, ?annotation),
  ?annotationValue = cat("<annotation ", cat(?annotation, cat(" for ", cat(?field, ">")))).
.decl ReflectiveMethodInvocation(?ctx:configuration.Context, ?invocation:MethodInvocation, ?signature:Method)
ReflectiveMethodInvocation(?ctx, ?invocation, ?signature) :-
  java_lang_reflect_Method_invoke(?invocation, ?from),
  VarPointsTo(_, ?method, ?ctx, ?from),
  ReifiedMethod(?signature, ?method).
.decl ReflectiveBaseVar(?invocation:MethodInvocation, ?base:Var)
ReflectiveBaseVar(?invocation, ?base) :-
  java_lang_reflect_Method_invoke(?invocation, _),
  ActualParam(0, ?invocation, ?base).
.decl ReflectiveAssignReturnValue(?invocation:MethodInvocation, ?var:Var)
ReflectiveAssignReturnValue(?invocation, ?var) :-
  java_lang_reflect_Method_invoke(?invocation, _),
  AssignReturnValue(?invocation, ?var).
.decl ReflectiveActualParams(?invocation:MethodInvocation, ?argsParam:Var)
ReflectiveActualParams(?invocation, ?argsParam) :-
  java_lang_reflect_Method_invoke(?invocation, _),
  ActualParam(1, ?invocation, ?argsParam).
.decl PopulateAnnotationsForMethod(?annotationsArray:Value, ?method:Method, ?hctx:configuration.HContext)
Value_isMock(?annotationsArray), isValue(?annotationsArray), Value_Type(?annotationsArray, "java.lang.annotation.Annotation[]"), Value_DeclaringType(?annotationsArray, "java.lang.Object"),
VarPointsTo(?hctx, ?annotationsArray, ?ctx, ?to),
PopulateAnnotationsForMethod(?annotationsArray, ?method, ?hctx) :-
  java_lang_reflect_Method_getDeclaredAnnotations(?invocation, ?to, ?from),
  VarPointsTo(?hctx, ?methodValue, ?ctx, ?from),
  ReifiedMethod(?method, ?methodValue),
  ?annotationsArray = cat("<annotations array for method ", cat(?method, cat(" at ", cat(?invocation, ">")))),
  isImmutableHContext(?hctx).
Value_isMock(?annotationValue), isValue(?annotationValue), Value_Type(?annotationValue, "java.lang.annotation.Annotation"), Value_DeclaringType(?annotationValue, "java.lang.Object"),
ArrayIndexPointsTo(?hctx, ?annotationValue, ?hctx, ?annotationsArray) :-
  PopulateAnnotationsForMethod(?annotationsArray, ?method, ?hctx),
  Method_Annotation(?method, ?annotation),
  ?annotationValue = cat("<annotation ", cat(?annotation, cat(" for ", cat(?method, ">")))).
.decl PopulateParameterAnnotationsForMethod(?annotationsArray:Value, ?method:Method, ?hctx:configuration.HContext, ?invocation:MethodInvocation)
Value_isMock(?annotationsArray), isValue(?annotationsArray), Value_Type(?annotationsArray, "java.lang.annotation.Annotation[][]"), Value_DeclaringType(?annotationsArray, "java.lang.Object"),
VarPointsTo(?hctx, ?annotationsArray, ?ctx, ?to),
PopulateParameterAnnotationsForMethod(?annotationsArray, ?method, ?hctx, ?invocation) :-
  java_lang_reflect_Method_getParameterAnnotations(?invocation, ?to, ?from),
  VarPointsTo(?hctx, ?methodValue, ?ctx, ?from),
  ReifiedMethod(?method, ?methodValue),
  ?annotationsArray = cat("<method parameter annotations array for method ", cat(?method, cat(" at ", cat(?invocation, ">")))),
  isImmutableHContext(?hctx).
Value_isMock(?paramAnnotations), isValue(?paramAnnotations), Value_Type(?paramAnnotations, "java.lang.annotation.Annotation[]"), Value_DeclaringType(?paramAnnotations, "java.lang.Object"),
ArrayIndexPointsTo(?hctx, ?paramAnnotations, ?hctx, ?annotationsArray),
Value_isMock(?annotationValue), isValue(?annotationValue), Value_Type(?annotationValue, "java.lang.annotation.Annotation"), Value_DeclaringType(?annotationValue, "java.lang.Object"),
ArrayIndexPointsTo(?hctx, ?annotationValue, ?hctx, ?paramAnnotations) :-
  PopulateParameterAnnotationsForMethod(?annotationsArray, ?method, ?hctx, ?invocation),
  Param_Annotation(?method, ?i, ?annotation),
  ?paramAnnotations = cat("<parameter annotations array for parameter ", cat(?annotation, cat(" at ", cat(?invocation, ">")))),
  ?annotationValue = cat("<annotation ", cat(?annotation, cat(" for parameter ", cat(to_string(?i), cat(" of method ", cat(?method, ">")))))).
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_ClassLoader_getResource(?invocation, ?to, ?from),
  Var_DeclaringMethod(?from, ?method),
  ReachableContext(?ctx, ?method),
  isType(?type),
  ?type = "java.net.URL",
  ReflectiveAllocation(?invocation, ?type, ?value).
OpaqueCallGraphEdge(?invocation, ?method),
VarPointsTo(?hctx, ?classValue, ?callerCtx, ?classResultVar) :-
  ReachableContext(?callerCtx, ?caller),
  (_StaticMethodInvocation(?invocation, _, ?method, ?caller);
   _SpecialMethodInvocation(?invocation, _, ?method, _, ?caller);
   _VirtualMethodInvocation(?invocation, _, ?method, _, ?caller);
   _SuperMethodInvocation(?invocation, _, ?method, _, ?caller)),
  ClassLoaderMethod(?method, ?argIdx),
  ActualParam(?argIdx, ?invocation, ?arg),
  VarPointsTo(_, ?className, _, ?arg),
  ReifiedClass(?className, ?classValue),
  AssignReturnValue(?invocation, ?classResultVar),
  isImmutableHContext(?hctx).
Reachable(?clinit) :-
  Reachable(?method),
  Instruction_Method(?invo, ?method),
  MethodInvocation_Method(?invo, "<sun.misc.Unsafe: void ensureClassInitialized(java.lang.Class)>"),
  VirtualMethodInvocation_Base(?invo, ?unsafeVar),
  VarPointsTo(_, ?val, _, ?unsafeVar),
  !Value_Null(?val),
  ActualParam(0, ?invo, ?arg),
  VarPointsTo(_, ?classValue, _, ?arg),
  ReifiedClass(?type, ?classValue),
  Method_DeclaringType(?clinit, ?type),
  Method_SimpleName(?clinit, "<clinit>").
Value_DeclaringType(?value, ?type) :-
  ReflectiveAllocation(_, ?type, ?value).
Value_DeclaringType(?value, ?type) :-
  (ReifiedConstructor(_, ?value);
   ReifiedMethod(_, ?value);
   ReifiedField(_, ?value)),
  Value_Type(?value, ?type),
  isReferenceType(?type).
.decl TypeHasHeap(?type:Type)
Value_DeclaringType(?value, ?type) :-
  ReifiedClass(?type, ?value),
  !TypeHasHeap(?type).
java_lang_Object_getClass(?to, ?from) :-
  isMethod("<java.lang.Object: java.lang.Class getClass()>"), MethodInvocation_Method(?invocation, "<java.lang.Object: java.lang.Class getClass()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from).
java_lang_Class_forName(?invocation, ?inmethod) :-
  ( ?sig = "<java.lang.Class: java.lang.Class forName(java.lang.String)>",
    isMethod(?sig) ;
    ?sig = "<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>",
    isMethod(?sig) ),
  StaticMethodInvocation(?invocation, ?sig, ?inmethod).
java_lang_Class_getName(?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.String getName()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.String getName()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from).
java_lang_Class_getCanonicalName(?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.String getCanonicalName()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.String getCanonicalName()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from).
java_lang_Class_getComponentType(?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.Class getComponentType()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.Class getComponentType()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from).
java_lang_Class_getSuperclass(?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.Class getSuperclass()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.Class getSuperclass()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from).
java_lang_Class_getAnnotations(?invocation, ?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.annotation.Annotation[] getAnnotations()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.annotation.Annotation[] getAnnotations()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from).
java_lang_Class_getDeclaredAnnotations(?invocation, ?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from).
Value_isMock(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), isValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), Value_Type(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), ?arrayType), Value_DeclaringType(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), "java.lang.Object"), ReflectiveValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), ReflectiveAllocation(?invocation, ?arrayType, cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")),
java_lang_Class_getInterfaces(?invocation, ?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.Class[] getInterfaces()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.Class[] getInterfaces()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  isInstruction(?invocation), ?arrayType = "java.lang.Class[]", isArrayType(?arrayType), isType(?arrayType).
Value_isMock(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), isValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), Value_Type(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), ?arrayType), Value_DeclaringType(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), "java.lang.Object"), ReflectiveValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), ReflectiveAllocation(?invocation, ?arrayType, cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")),
java_lang_Class_getMethods(?invocation, ?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Method[] getMethods()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Method[] getMethods()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  isInstruction(?invocation), ?arrayType = "java.lang.reflect.Method[]", isArrayType(?arrayType), isType(?arrayType).
java_lang_Class_getMethod(?to, ?param, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  ActualParam(0, ?invocation, ?param).
Value_isMock(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), isValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), Value_Type(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), ?arrayType), Value_DeclaringType(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), "java.lang.Object"), ReflectiveValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), ReflectiveAllocation(?invocation, ?arrayType, cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")),
java_lang_Class_getDeclaredMethods(?invocation, ?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  isInstruction(?invocation), ?arrayType = "java.lang.reflect.Method[]", isArrayType(?arrayType), isType(?arrayType).
java_lang_Class_getDeclaredMethod(?to, ?param, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  ActualParam(0, ?invocation, ?param).
Value_isMock(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), isValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), Value_Type(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), ?arrayType), Value_DeclaringType(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), "java.lang.Object"), ReflectiveValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), ReflectiveAllocation(?invocation, ?arrayType, cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")),
java_lang_Class_getConstructors(?invocation, ?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  isInstruction(?invocation), ?arrayType = "java.lang.reflect.Constructor[]", isArrayType(?arrayType), isType(?arrayType).
java_lang_Class_getConstructor(?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from).
Value_isMock(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), isValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), Value_Type(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), ?arrayType), Value_DeclaringType(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), "java.lang.Object"), ReflectiveValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), ReflectiveAllocation(?invocation, ?arrayType, cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")),
java_lang_Class_getDeclaredConstructors(?invocation, ?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  isInstruction(?invocation), ?arrayType = "java.lang.reflect.Constructor[]", isArrayType(?arrayType), isType(?arrayType).
Value_isMock(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), isValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), Value_Type(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), ?arrayType), Value_DeclaringType(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), "java.lang.Object"), ReflectiveValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), ReflectiveAllocation(?invocation, ?arrayType, cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")),
java_lang_Class_getDeclaredConstructors(?invocation, ?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  isInstruction(?invocation), ?arrayType = "java.lang.reflect.Constructor[]", isArrayType(?arrayType), isType(?arrayType).
java_lang_Class_getDeclaredConstructor(?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from).
Value_isMock(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), isValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), Value_Type(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), ?arrayType), Value_DeclaringType(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), "java.lang.Object"), ReflectiveValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), ReflectiveAllocation(?invocation, ?arrayType, cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")),
java_lang_Class_getFields(?invocation, ?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Field[] getFields()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Field[] getFields()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  isInstruction(?invocation), ?arrayType = "java.lang.reflect.Field[]", isArrayType(?arrayType), isType(?arrayType).
java_lang_Class_getField(?to, ?param, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  ActualParam(0, ?invocation, ?param).
Value_isMock(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), isValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), Value_Type(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), ?arrayType), Value_DeclaringType(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">"), "java.lang.Object"), ReflectiveValue(cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")), ReflectiveAllocation(?invocation, ?arrayType, cat(cat(cat(cat("<reflective ", ?invocation), "/new "), ?arrayType), ">")),
java_lang_Class_getDeclaredFields(?invocation, ?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  isInstruction(?invocation), ?arrayType = "java.lang.reflect.Field[]", isArrayType(?arrayType), isType(?arrayType).
java_lang_Class_getDeclaredField(?to, ?param, ?from) :-
  isMethod("<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  ActualParam(0, ?invocation, ?param).
Value_isMock(cat(cat("<reflective Class.newInstance/new ", ?type), ">")), isValue(cat(cat("<reflective Class.newInstance/new ", ?type), ">")), Value_Type(cat(cat("<reflective Class.newInstance/new ", ?type), ">"), ?type), Value_DeclaringType(cat(cat("<reflective Class.newInstance/new ", ?type), ">"), "java.lang.Object"), ReflectiveValue(cat(cat("<reflective Class.newInstance/new ", ?type), ">")), ReflectiveAllocation(?invocation, ?type, cat(cat("<reflective Class.newInstance/new ", ?type), ">")),
java_lang_Class_newInstance(?invocation, ?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.Object newInstance()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.Object newInstance()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  isClassType(?type).
Value_isMock("<reflective dummy ClassLoader>"), isValue("<reflective dummy ClassLoader>"), Value_Type("<reflective dummy ClassLoader>", ?type), Value_DeclaringType("<reflective dummy ClassLoader>", "java.lang.Object"), ReflectiveValue("<reflective dummy ClassLoader>"), ReflectiveAllocation(?invocation, ?type, "<reflective dummy ClassLoader>"),
java_lang_Class_getClassLoader(?invocation, ?to, ?from) :-
  isMethod("<java.lang.Class: java.lang.ClassLoader getClassLoader()>"), MethodInvocation_Method(?invocation, "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  ?type = "java.lang.ClassLoader",
  isReferenceType(?type).
java_lang_Class_getPrimitiveClass(?to, ?name) :-
  ?sig = "<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>",
  isMethod(?sig),
  StaticMethodInvocation(?invocation, ?sig, _),
  AssignReturnValue(?invocation, ?to),
  ActualParam(0, ?invocation, ?name).
Value_isMock("<reflective dummy URL resource>"), isValue("<reflective dummy URL resource>"), Value_Type("<reflective dummy URL resource>", ?type), Value_DeclaringType("<reflective dummy URL resource>", "java.lang.Object"), ReflectiveValue("<reflective dummy URL resource>"), ReflectiveAllocation(?invocation, ?type, "<reflective dummy URL resource>"),
java_lang_ClassLoader_getResource(?invocation, ?to, ?from) :-
  isMethod("<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>"), MethodInvocation_Method(?invocation, "<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  ?type = "java.net.URL",
  isReferenceType(?type).
Value_isMock(cat(cat("<reflective /new ", ?arrayType), ">")), isValue(cat(cat("<reflective /new ", ?arrayType), ">")), Value_Type(cat(cat("<reflective /new ", ?arrayType), ">"), ?arrayType), Value_DeclaringType(cat(cat("<reflective /new ", ?arrayType), ">"), "java.lang.Object"), ReflectiveValue(cat(cat("<reflective /new ", ?arrayType), ">")), ReflectiveAllocation(?invocation, ?arrayType, cat(cat("<reflective /new ", ?arrayType), ">")),
java_lang_reflect_Array_newInstance(?invocation, ?to, ?param) :-
  MethodInvocation_Method(?invocation, "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>"),
  isStaticMethodInvocation_Insn(?invocation),
  AssignReturnValue(?invocation, ?to),
  ActualParam(0, ?invocation, ?param),
  isArrayType(?arrayType).
Value_isMock(cat(cat("<reflective Constructor.newInstance/new ", ?type), ">")), isValue(cat(cat("<reflective Constructor.newInstance/new ", ?type), ">")), Value_Type(cat(cat("<reflective Constructor.newInstance/new ", ?type), ">"), ?type), Value_DeclaringType(cat(cat("<reflective Constructor.newInstance/new ", ?type), ">"), "java.lang.Object"), ReflectiveValue(cat(cat("<reflective Constructor.newInstance/new ", ?type), ">")), ReflectiveAllocation(?invocation, ?type, cat(cat("<reflective Constructor.newInstance/new ", ?type), ">")),
java_lang_reflect_Constructor_newInstance(?invocation, ?to, ?from) :-
  isMethod("<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>"), MethodInvocation_Method(?invocation, "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from),
  isClassType(?type).
java_lang_reflect_Field_get(?invocation, ?to, ?field) :-
  isMethod("<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>"), MethodInvocation_Method(?invocation, "<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?field).
java_lang_reflect_Field_get_base(?invocation, ?base) :-
  isMethod("<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>"), MethodInvocation_Method(?invocation, "<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>"), AssignReturnValue(?invocation, _), VirtualMethodInvocation_Base(?invocation, _),
  ActualParam(0, ?invocation, ?base).
java_lang_reflect_Field_set(?invocation, ?from, ?field) :-
  isMethod("<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>"),
  MethodInvocation_Method(?invocation, "<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>"),
  VirtualMethodInvocation_Base(?invocation, ?field),
  ActualParam(1, ?invocation, ?from).
java_lang_reflect_Field_set_base(?invocation, ?base) :-
  isMethod("<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>"),
  MethodInvocation_Method(?invocation, "<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>"),
  isVirtualMethodInvocation_Insn(?invocation),
  ActualParam(0, ?invocation, ?base).
java_lang_reflect_Field_getDeclaredAnnotations(?invocation, ?to, ?from) :-
  isMethod("<java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations()>"), MethodInvocation_Method(?invocation, "<java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from).
java_lang_reflect_Method_invoke(?invocation, ?method) :-
  isMethod("<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>"),
  MethodInvocation_Method(?invocation, "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>"),
  VirtualMethodInvocation_Base(?invocation, ?method).
java_lang_reflect_Method_getDeclaredAnnotations(?invocation, ?to, ?from) :-
  isMethod("<java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations()>"), MethodInvocation_Method(?invocation, "<java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from).
java_lang_reflect_Method_getParameterAnnotations(?invocation, ?to, ?from) :-
  isMethod("<java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()>"), MethodInvocation_Method(?invocation, "<java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()>"), AssignReturnValue(?invocation, ?to), VirtualMethodInvocation_Base(?invocation, ?from).
ReifiedClass(?type, ?classHeap) :-
  isReferenceType(?type),
  ClassHeap_InstanceType(?classHeap, ?type),
  isValue(?classHeap).
TypeHasHeap(?type) :-
  ClassHeap_InstanceType(_, ?type).
Value_isMock(cat(cat("<<reified class ", ?type), ">>")), isValue(cat(cat("<<reified class ", ?type), ">>")), Value_Type(cat(cat("<<reified class ", ?type), ">>"), ?javaLangClass), Value_DeclaringType(cat(cat("<<reified class ", ?type), ">>"), "java.lang.Object"),
ReifiedClass(?type, cat(cat("<<reified class ", ?type), ">>")) :-
  isReferenceType(?type),
  !TypeHasHeap(?type),
  isType(?type),
  ?javaLangClass = "java.lang.Class",
  isType(?javaLangClass).
Value_isMock(cat(cat("<<reified constructor ", ?signature), ">>")), isValue(cat(cat("<<reified constructor ", ?signature), ">>")), Value_Type(cat(cat("<<reified constructor ", ?signature), ">>"), ?type), Value_DeclaringType(cat(cat("<<reified constructor ", ?signature), ">>"), "java.lang.Object"),
ReifiedConstructor(?signature, cat(cat("<<reified constructor ", ?signature), ">>"))
:-
  basic.ClassConstructor(?signature, _),
  isMethod(?signature),
  ?type = "java.lang.reflect.Constructor",
  isType(?type).
Value_isMock(cat(cat("<<reified method ", ?signature), ">>")), isValue(cat(cat("<<reified method ", ?signature), ">>")), Value_Type(cat(cat("<<reified method ", ?signature), ">>"), ?type), Value_DeclaringType(cat(cat("<<reified method ", ?signature), ">>"), "java.lang.Object"),
ReifiedMethod(?signature, cat(cat("<<reified method ", ?signature), ">>"))
:-
  Method_SimpleName(?signature, ?simplename),
  ?simplename != "<init>",
  ?simplename != "<clinit>",
  isMethod(?signature),
  ?type = "java.lang.reflect.Method",
  isType(?type).
Value_isMock(cat(cat("<<reified field ", ?signature), ">>")), isValue(cat(cat("<<reified field ", ?signature), ">>")), Value_Type(cat(cat("<<reified field ", ?signature), ">>"), ?type), Value_DeclaringType(cat(cat("<<reified field ", ?signature), ">>"), "java.lang.Object"),
ReifiedField(?signature, cat(cat("<<reified field ", ?signature), ">>"))
:-
  isField(?signature),
  ?type = "java.lang.reflect.Field",
  isType(?type).
.decl ReflectiveStaticMethodInvocation(?ctx:configuration.Context, ?invocation:MethodInvocation, ?signature:Method)
.decl ReflectiveVirtualMethodInvocation(?signature:Method, ?invocation:MethodInvocation, ?ctx:configuration.Context, ?base:Var)
ReflectiveSpecialMethodInvocation(?invocation, ?signature, ?ctx, ?base) :-
  ReflectiveMethodInvocation(?ctx, ?invocation, ?signature),
  Method_Modifier("private", ?signature),
  ! Method_Modifier("static", ?signature),
  ReflectiveBaseVar(?invocation, ?base).
ReflectiveStaticMethodInvocation(?ctx, ?invocation, ?signature) :-
  ReflectiveMethodInvocation(?ctx, ?invocation, ?signature),
  ?static = "static",
  isModifier(?static),
  Method_Modifier(?static, ?signature).
ReflectiveVirtualMethodInvocation(?signature, ?invocation, ?ctx, ?base) :-
  ReflectiveMethodInvocation(?ctx, ?invocation, ?signature),
  ?private = "private",
  isModifier(?private),
  ! Method_Modifier(?private, ?signature),
  ?static = "static",
  isModifier(?static),
  ! Method_Modifier(?static, ?signature),
  ReflectiveBaseVar(?invocation, ?base).
.decl ReflectiveCallGraphEdge(?callerCtx:configuration.Context, ?invocation:MethodInvocation, ?calleeCtx:configuration.Context, ?callee:Method)
.output ReflectiveCallGraphEdge
.decl ReflectiveReachable(?m:Method)
ReflectiveReachable(?callee),
ReachableContext(?calleeCtx, ?callee) :-
  ReflectiveCallGraphEdge(_, _, ?calleeCtx, ?callee).
ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee) :-
  isImmutableContext(?calleeCtx),
  ReflectiveStaticMethodInvocation(?callerCtx, ?invocation, ?callee).
ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this)
  :-
  ReflectiveSpecialMethodInvocation(?invocation, ?callee, ?callerCtx, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  ThisVar(?callee, ?this),
  isImmutableContext(?calleeCtx),
  Var_Type(?this, ?thisType),
  Value_Type(?value, ?valueType),
  basic.SupertypeOf(?thisType, ?valueType).
ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?this)
  :-
  ReflectiveVirtualMethodInvocation(?signature, ?invocation, ?callerCtx, ?base),
  VarPointsTo(?hctx, ?value, ?callerCtx, ?base),
  Value_Type(?value, ?valuetype),
  Method_DeclaringType(?signature, ?type),
  basic.SupertypeOf(?type, ?valuetype),
  Method_SimpleName(?signature, ?simplename),
  Method_Descriptor(?signature, ?descriptor),
  basic.MethodLookup(?simplename, ?descriptor, ?valuetype, ?tomethod),
  ThisVar(?tomethod, ?this),
  isImmutableContext(?calleeCtx).
OptInterproceduralAssign(?callerCtx, ?local, ?calleeCtx, ?return) :-
  ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee),
  ReflectiveAssignReturnValue(?invocation, ?local),
  ReturnVar(?return, ?callee).
InvokeArgLoadArrayIndex(?calleeCtx, ?formal, ?callerCtx, ?actual) :-
  ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee),
  FormalParam(_, ?callee, ?formal),
  ReflectiveActualParams(?invocation, ?actual).
.decl ReflectiveAssignClassConstant(?ctx:configuration.Context, ?invocation:MethodInvocation, ?type:Type)
InitializedClass(?type) :-
  ReflectiveAssignClassConstant(_, _, ?type).
VarPointsTo(?hctx, ?value, ?ctx, ?return) :-
  isImmutableHContext(?hctx),
  ReflectiveAssignClassConstant(?ctx, ?invocation, ?type),
  ReifiedClass(?type, ?value),
  AssignReturnValue(?invocation, ?return).
.decl ReflectiveAssignMethodConstant(?ctx:configuration.Context, ?to:Var, ?signature:Method)
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  ReflectiveAssignMethodConstant(?ctx, ?to, ?signature),
  ReifiedMethod(?signature, ?value).
.decl ReflectiveAssignFieldConstant(?ctx:configuration.Context, ?to:Var, ?signature:Field)
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  ReflectiveAssignFieldConstant(?ctx, ?to, ?signature),
  ReifiedField(?signature, ?value).
InitializedClass(?type),
VarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  isImmutableHContext(?hctx),
  AssignReflectiveAllocation(?instruction, ?type, ?ctx, ?var),
  ReflectiveAllocation(?instruction, ?type, ?value),
  Var_Type(?var, ?vartype),
  basic.SubtypeOf(?type, ?vartype).
.decl InvokeArgLoadArrayIndex(?calleeCtx:configuration.Context, ?to:Var, ?callerCtx:configuration.Context, ?base:Var)
.decl LoadReflectiveValueArrayIndex(?calleeCtx:configuration.Context, ?to:Var, ?basehctx:configuration.HContext, ?basevalue:Value)
LoadReflectiveValueArrayIndex(?calleeCtx, ?to, ?basehctx, ?basevalue) :-
  InvokeArgLoadArrayIndex(?calleeCtx, ?to, ?callerCtx, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?callerCtx, ?base).
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  LoadReflectiveValueArrayIndex(?ctx, ?to, ?basehctx, ?basevalue),
  ArrayIndexPointsTo(?hctx, ?value, ?basehctx, ?basevalue),
  Var_Type(?to, ?type),
  Value_Type(?value, ?valuetype),
  basic.SupertypeOf(?type, ?valuetype).
VarPointsTo(?hctx, ?value, ?ctx, ?to) :-
  ReflectiveLoadStaticField(?ctx, ?to, ?signature),
  StaticFieldPointsTo(?hctx, ?value, ?signature),
  Value_Type(?value, ?valuetype),
  Var_Type(?to, ?vartype),
  basic.SupertypeOf(?vartype, ?valuetype).
StaticFieldPointsTo(?hctx, ?value, ?signature) :-
  ReflectiveStoreStaticField(?signature, ?ctx, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  Value_Type(?value, ?valuetype),
  Field_Type(?signature, ?fieldtype),
  basic.SupertypeOf(?fieldtype, ?valuetype).
.decl ReflectiveLoadHeapInstanceField(?toCtx:configuration.Context, ?to:Var, ?signature:Field, ?basehctx:configuration.HContext, ?base:Value)
ReflectiveLoadHeapInstanceField(?toCtx, ?to, ?sig, ?basehctx, ?basevalue) :-
  ReflectiveLoadInstanceField(?toCtx, ?to, ?sig, ?baseCtx, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?baseCtx, ?base),
  Value_Type(?basevalue, ?basevaluetype),
  Field_DeclaringType(?sig, ?declaringClass),
  basic.SupertypeOf(?declaringClass, ?basevaluetype).
.decl ReflectiveStoreHeapInstanceField(?signature:Field, ?basehctx:configuration.HContext, ?basevalue:Value, ?fromCtx:configuration.Context, ?from:Var)
ReflectiveStoreHeapInstanceField(?sig, ?basehctx, ?basevalue, ?fromCtx, ?from) :-
  ReflectiveStoreInstanceField(?fromCtx, ?from, ?sig, ?baseCtx, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?baseCtx, ?base),
  Value_Type(?basevalue, ?basevaluetype),
  Field_DeclaringType(?sig, ?declaringClass),
  basic.SupertypeOf(?declaringClass, ?basevaluetype).
.decl ReflectiveHeapInterproceduralAssign(?sig:Field, ?toCtx:configuration.Context, ?to:Var, ?fromCtx:configuration.Context, ?from:Var)
ReflectiveHeapInterproceduralAssign(?sig, ?toCtx, ?to,?fromCtx, ?from) :-
  ReflectiveLoadHeapInstanceField(?toCtx, ?to, ?sig, ?basehctx, ?basevalue),
  ReflectiveStoreHeapInstanceField(?sig, ?basehctx, ?basevalue, ?fromCtx, ?from),
  !Value_Null(?basevalue).
  .plan 1:(2,1)
ReflectiveHeapInterproceduralAssign(?sig, ?toCtx, ?to,?fromCtx, ?from) :-
  ReflectiveLoadHeapInstanceField(?toCtx, ?to, ?sig, ?basehctx, ?basevalue),
  StoreHeapInstanceField(?sig, ?basehctx, ?basevalue, ?fromCtx, ?from),
  !Value_Null(?basevalue).
  .plan 1:(2,1)
ReflectiveHeapInterproceduralAssign(?sig, ?toCtx, ?to,?fromCtx, ?from) :-
  LoadHeapInstanceField(?toCtx, ?to, ?sig, ?basehctx, ?basevalue),
  ReflectiveStoreHeapInstanceField(?sig, ?basehctx, ?basevalue, ?fromCtx, ?from),
  !Value_Null(?basevalue).
  .plan 1:(2,1)
VarPointsTo(?hctx, ?value, ?toCtx, ?to) :-
  ReflectiveHeapInterproceduralAssign(?sig, ?toCtx, ?to, ?fromCtx, ?from),
  VarPointsTo(?hctx, ?value, ?fromCtx, ?from),
  NotSpecialObject(?value),
  Value_Type(?value, ?valuetype),
  Field_Type(?sig, ?fieldtype),
  basic.SupertypeOf(?fieldtype, ?valuetype).
  .plan 1:(2,1,3,4,5,6)
InstanceFieldPointsTo(?hctx, ?value, ?signature, ?basehctx, ?basevalue) :-
  ReflectiveStoreHeapInstanceField(?signature, ?basehctx, ?basevalue, ?ctx, ?from),
  VarPointsTo(?hctx, ?value, ?ctx, ?from),
  !Value_Null(?basevalue),
  NotSpecialObject(?value),
  Value_Type(?value, ?valuetype),
  Field_Type(?signature, ?fieldtype),
  basic.SupertypeOf(?fieldtype, ?valuetype).
.decl BackwardReflectiveAssignFieldConstant(?to:Var, ?signature:Field)
.decl BackwardReflectiveAssignClassConstant(?invocation:MethodInvocation, ?type:Type)
.decl BackwardHighConfidenceReflectiveAssignClassConstant(?invocation:MethodInvocation, ?type:Type)
.decl BackwardReflectiveAssignMethodConstant(?to:Var, ?signature:Method)
.decl BackwardHighConfidenceReflectiveAssignMethodConstant(?to:Var, ?signature:Method)
.decl BackwardHighConfidenceReflectiveAssignFieldConstant(?to:Var, ?signature:Field)
ReflectiveAssignClassConstant(?ctx, ?invocation, ?type) :-
  ForwardReflectiveAssignClassConstant(?ctx, ?invocation, ?type),
  BackwardReflectiveAssignClassConstant(?invocation, ?type).
ReflectiveAssignClassConstant(?ctx, ?invocation, ?type) :-
  ForwardHighConfidenceReflectiveAssignClassConstant(?ctx, ?invocation, ?type).
ReflectiveAssignClassConstant(?ctx, ?invocation, ?type) :-
  BackwardHighConfidenceReflectiveAssignClassConstant(?invocation, ?type),
  Instruction_Method(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod).
ReflectiveAssignMethodConstant(?ctx, ?to, ?signature) :-
  ForwardReflectiveAssignMethodConstant(?ctx, ?to, ?signature),
  BackwardReflectiveAssignMethodConstant(?to, ?signature).
ReflectiveAssignMethodConstant(?ctx, ?to, ?signature) :-
  ForwardHighConfidenceReflectiveAssignMethodConstant(?ctx, ?to, ?signature).
ReflectiveAssignMethodConstant(?ctx, ?to, ?signature) :-
  Var_DeclaringMethod(?to, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  BackwardHighConfidenceReflectiveAssignMethodConstant(?to, ?signature).
ReflectiveAssignFieldConstant(?ctx, ?to, ?signature) :-
  ForwardReflectiveAssignFieldConstant(?ctx, ?to, ?signature),
  BackwardReflectiveAssignFieldConstant(?to, ?signature).
ReflectiveAssignFieldConstant(?ctx, ?to, ?signature) :-
  ForwardHighConfidenceReflectiveAssignFieldConstant(?ctx, ?to, ?signature).
ReflectiveAssignFieldConstant(?ctx, ?to, ?signature) :-
  Var_DeclaringMethod(?to, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  BackwardHighConfidenceReflectiveAssignFieldConstant(?to, ?signature).
ReflectiveAssignClassConstant(?ctx, ?invocation, ?type) :-
  ForwardReflectiveAssignClassConstant(?ctx, ?invocation, ?type).
ReflectiveAssignClassConstant(?ctx, ?invocation, ?type) :-
  BackwardReflectiveAssignClassConstant(?invocation, ?type),
  Instruction_Method(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod).
ReflectiveAssignMethodConstant(?ctx, ?to, ?signature) :-
  ForwardReflectiveAssignMethodConstant(?ctx, ?to, ?signature).
ReflectiveAssignFieldConstant(?ctx, ?to, ?signature) :-
  ForwardReflectiveAssignFieldConstant(?ctx, ?to, ?signature).
.decl SpecialMissingForNameValue(?invocation:MethodInvocation, ?value:Value)
.decl SpecialMissingNewInstanceValue(?invocation:MethodInvocation, ?value:Value)
.decl SpecialMissingGetConstructorValue(?invocation:MethodInvocation, ?value:Value)
.decl SpecialMissingGetMethodsValue(?invocation:MethodInvocation, ?value:Value)
.decl SpecialMissingInvokeValueFromGetMethods(?invocation:MethodInvocation, ?value:Value)
.decl SpecialMissingGetMethodValue(?invocation:MethodInvocation, ?value:Value)
.decl SpecialMissingInvokeValueFromGetMethod(?invocation:MethodInvocation, ?value:Value)
.decl SpecialMissingGetFieldsValue(?invocation:MethodInvocation, ?value:Value)
.decl SpecialMissingGetValueFromGetFields(?invocation:MethodInvocation, ?value:Value)
.decl SpecialMissingGetFieldValue(?invocation:MethodInvocation, ?value:Value)
.decl SpecialMissingGetValueFromGetField(?invocation:MethodInvocation, ?value:Value)
isValue(cat(cat("<special object for missing forName values ", ?invocation), ">")), Value_Type(cat(cat("<special object for missing forName values ", ?invocation), ">"), ?type), Value_DeclaringType(cat(cat("<special object for missing forName values ", ?invocation), ">"), "java.lang.Object"),
SpecialMissingForNameValue(?invocation, cat(cat("<special object for missing forName values ", ?invocation), ">"))
:-
  java_lang_Class_forName(?invocation, _),
  ?type = "java.lang.Class",
  isType(?type),
  isInstruction(?invocation).
isValue(cat(cat("<special object for missing newInstance values ", ?invocation), ">")), Value_Type(cat(cat("<special object for missing newInstance values ", ?invocation), ">"), ?type), Value_DeclaringType(cat(cat("<special object for missing newInstance values ", ?invocation), ">"), "java.lang.Object"),
SpecialMissingNewInstanceValue(?invocation, cat(cat("<special object for missing newInstance values ", ?invocation), ">"))
:-
  java_lang_Class_forName(?invocation, _),
  ?type = "java.lang.Object",
  isType(?type),
  isInstruction(?invocation).
isValue(cat(cat("<special object for missing get[Declared]Constructor[s] values ", ?invocation), ">")), Value_Type(cat(cat("<special object for missing get[Declared]Constructor[s] values ", ?invocation), ">"), ?type), Value_DeclaringType(cat(cat("<special object for missing get[Declared]Constructor[s] values ", ?invocation), ">"), "java.lang.Object"),
SpecialMissingGetConstructorValue(?invocation, cat(cat("<special object for missing get[Declared]Constructor[s] values ", ?invocation), ">"))
:-
  java_lang_Class_forName(?invocation, _),
  ?type = "java.lang.reflect.Constructor",
  isType(?type),
  isInstruction(?invocation).
isValue(cat(cat("<special object for missing get[Declared]Methods values ", ?invocation), ">")), Value_Type(cat(cat("<special object for missing get[Declared]Methods values ", ?invocation), ">"), ?type), Value_DeclaringType(cat(cat("<special object for missing get[Declared]Methods values ", ?invocation), ">"), "java.lang.Object"),
SpecialMissingGetMethodsValue(?invocation, cat(cat("<special object for missing get[Declared]Methods values ", ?invocation), ">"))
:-
  (java_lang_Class_getMethods(?invocation, _, _);
   java_lang_Class_getDeclaredMethods(?invocation, _, _)),
  ?type = "java.lang.reflect.Method",
  isType(?type),
  isInstruction(?invocation).
isValue(cat(cat("<special object for missing invoke() values ", ?invocation), ">")), Value_Type(cat(cat("<special object for missing invoke() values ", ?invocation), ">"), ?type), Value_DeclaringType(cat(cat("<special object for missing invoke() values ", ?invocation), ">"), "java.lang.Object"),
SpecialMissingInvokeValueFromGetMethods(?invocation, cat(cat("<special object for missing invoke() values ", ?invocation), ">"))
:-
  (java_lang_Class_getMethods(?invocation, _, _);
   java_lang_Class_getDeclaredMethods(?invocation, _, _)),
  ?type = "java.lang.Object",
  isType(?type),
  isInstruction(?invocation).
isValue(cat(cat("<special object for missing get[Declared]Method values ", ?invocation), ">")), Value_Type(cat(cat("<special object for missing get[Declared]Method values ", ?invocation), ">"), ?type), Value_DeclaringType(cat(cat("<special object for missing get[Declared]Method values ", ?invocation), ">"), "java.lang.Object"),
SpecialMissingGetMethodValue(?invocation, cat(cat("<special object for missing get[Declared]Method values ", ?invocation), ">"))
:-
  (?getMethod = "<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>",
   isMethod(?getMethod) ;
   ?getMethod = "<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>",
   isMethod(?getMethod)),
  MethodInvocation_Method(?invocation, ?getMethod),
  isVirtualMethodInvocation_Insn(?invocation),
  ?type = "java.lang.reflect.Method",
  isType(?type),
  isInstruction(?invocation).
isValue(cat(cat("<special object for missing invoke() values ", ?invocation), ">")), Value_Type(cat(cat("<special object for missing invoke() values ", ?invocation), ">"), ?type), Value_DeclaringType(cat(cat("<special object for missing invoke() values ", ?invocation), ">"), "java.lang.Object"),
SpecialMissingInvokeValueFromGetMethod(?invocation, cat(cat("<special object for missing invoke() values ", ?invocation), ">"))
:-
  (?getMethod = "<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>",
   isMethod(?getMethod);
   ?getMethod = "<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>",
   isMethod(?getMethod)),
  MethodInvocation_Method(?invocation, ?getMethod),
  ?type = "java.lang.Object",
  isType(?type).
isValue(cat(cat("<special object for missing get[Declared]Fields values ", ?invocation), ">")), Value_Type(cat(cat("<special object for missing get[Declared]Fields values ", ?invocation), ">"), ?type), Value_DeclaringType(cat(cat("<special object for missing get[Declared]Fields values ", ?invocation), ">"), "java.lang.Object"),
SpecialMissingGetFieldsValue(?invocation, cat(cat("<special object for missing get[Declared]Fields values ", ?invocation), ">"))
:-
  (java_lang_Class_getDeclaredFields(?invocation, _, _);
   java_lang_Class_getFields(?invocation, _, _)),
  ?type = "java.lang.reflect.Field",
  isType(?type).
isValue(cat(cat("<special object for missing get() values ", ?invocation), ">")), Value_Type(cat(cat("<special object for missing get() values ", ?invocation), ">"), ?type), Value_DeclaringType(cat(cat("<special object for missing get() values ", ?invocation), ">"), "java.lang.Object"),
SpecialMissingGetValueFromGetFields(?invocation, cat(cat("<special object for missing get() values ", ?invocation), ">"))
:-
  (java_lang_Class_getDeclaredFields(?invocation, _, _);
   java_lang_Class_getFields(?invocation, _, _)),
  ?type = "java.lang.Object",
  isType(?type).
isValue(cat(cat("<special object for missing get[Declared]Field values ", ?invocation), ">")), Value_Type(cat(cat("<special object for missing get[Declared]Field values ", ?invocation), ">"), ?type), Value_DeclaringType(cat(cat("<special object for missing get[Declared]Field values ", ?invocation), ">"), "java.lang.Object"),
SpecialMissingGetFieldValue(?invocation, cat(cat("<special object for missing get[Declared]Field values ", ?invocation), ">"))
:-
  (?getField = "<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",
   isMethod(?getField) ;
   ?getField = "<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>",
   isMethod(?getField)),
  MethodInvocation_Method(?invocation, ?getField),
  ?type = "java.lang.reflect.Field",
  isType(?type).
isValue(cat(cat("<special object for missing get() values ", ?invocation), ">")), Value_Type(cat(cat("<special object for missing get() values ", ?invocation), ">"), ?type), Value_DeclaringType(cat(cat("<special object for missing get() values ", ?invocation), ">"), "java.lang.Object"),
SpecialMissingGetValueFromGetField(?invocation, cat(cat("<special object for missing get() values ", ?invocation), ">"))
:-
  (?getField = "<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",
   isMethod(?getField) ;
   ?getField = "<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>",
   isMethod(?getField)),
  MethodInvocation_Method(?invocation, ?getField),
  ?type = "java.lang.Object",
  isType(?type).
VarPointsTo(?hctx, ?value, ?ctx, ?return) :-
  SpecialMissingForNameValue(?invocation, ?value),
  Instruction_Method(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  isImmutableHContext(?hctx),
  AssignReturnValue(?invocation, ?return).
VarPointsTo(?hctx, ?specialvalue, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_Class_newInstance(_, ?to, ?var),
  VarPointsTo(_, ?specialclass, ?ctx, ?var),
  SpecialMissingForNameValue(?forNameInvocation, ?specialclass),
  SpecialMissingNewInstanceValue(?forNameInvocation, ?specialvalue).
VarPointsTo(?hctx, ?specialConstructorValue, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  (java_lang_Class_getConstructor(?to, ?var);
   java_lang_Class_getDeclaredConstructor(?to, ?var)),
  VarPointsTo(_, ?specialclass, ?ctx, ?var),
  SpecialMissingForNameValue(?forNameInvocation, ?specialclass),
  SpecialMissingGetConstructorValue(?forNameInvocation, ?specialConstructorValue).
ArrayIndexPointsTo(?hctx, ?specialConstructorValue, ?hctx, ?arrayValue) :-
  isImmutableHContext(?hctx),
  OptForNameFromGetConstructors(?forNameInvocation, ?ctx, ?to),
  VarPointsTo(?hctx, ?arrayValue, ?ctx, ?to),
  SpecialMissingGetConstructorValue(?forNameInvocation, ?specialConstructorValue).
.decl OptForNameFromGetConstructors(?forNameInvocation:MethodInvocation, ?ctx:configuration.Context, ?to:Var)
OptForNameFromGetConstructors(?forNameInvocation, ?ctx, ?to) :-
  (java_lang_Class_getConstructors(_, ?to, ?var);
   java_lang_Class_getDeclaredConstructors(_, ?to, ?var)),
  VarPointsTo(_, ?specialclass, ?ctx, ?var),
  SpecialMissingForNameValue(?forNameInvocation, ?specialclass).
VarPointsTo(?hctx, ?specialvalue, ?ctx, ?to) :-
  isImmutableHContext(?hctx),
  java_lang_reflect_Constructor_newInstance(_, ?to, ?var),
  VarPointsTo(_, ?specialConstructor, ?ctx, ?var),
  SpecialMissingGetConstructorValue(?forNameInvocation, ?specialConstructor),
  SpecialMissingNewInstanceValue(?forNameInvocation, ?specialvalue).
.decl ClassSubtype(?subType:ClassType, ?type:ClassType)
ClassSubtype(?subtype, ?type) :-
  basic.SubtypeOf(?subtype, ?type),
  isClassType(?subtype),
  isClassType(?type).
.decl NumberOfClassSubtypes(?type:ClassType, ?count:number)
NumberOfClassSubtypes(?type, ?count) :-
  ClassSubtype(_, ?type),
  ?count = count : ClassSubtype(_, ?type).
.decl _OptMethodWithVarCast(?subtype:Type, ?inMethod:Method, ?from:Var)
_OptMethodWithVarCast(?subtype, ?inMethod, ?from) :-
  AssignCast(?type, ?from, _, ?inMethod),
  ClassSubtype(?subtype, ?type).
.decl SpecialMissingNewInstanceValueFlowsToCast(?forNameInvocation:MethodInvocation, ?type:Type, ?inMethod:Method)
SpecialMissingNewInstanceValueFlowsToCast(?forNameInvocation, ?type, ?inMethod) :-
  SpecialMissingNewInstanceValue(?forNameInvocation, ?specialvalue),
  VarPointsTo(_, ?specialvalue, _, ?from),
  _OptMethodWithVarCast(?type, ?inMethod, ?from).
BackwardReflectiveAssignClassConstant(?forNameInvocation, ?type) :-
  SpecialMissingNewInstanceValueFlowsToCast(?forNameInvocation, ?type, _).
BackwardHighConfidenceReflectiveAssignClassConstant(?forNameInvocation, ?type) :-
  SpecialMissingNewInstanceValueFlowsToCast(?forNameInvocation, ?type, ?inMethod),
  Instruction_Method(?forNameInvocation, ?inMethod),
  NumberOfClassSubtypes(?type, ?num),
  InferredTypesPrecisionThreshold(?t),
  ?num <= ?t.
.decl InferredTypesPrecisionThreshold(?t:number)
InferredTypesPrecisionThreshold(10).
.decl TypeMatchingMethod(?type:Type, ?constant:HeapAllocation)
TypeMatchingMethod(?subtype, ?constant) :-
  MethodNameMatchingStringConstant_Signature(?signature, ?constant),
  Method_DeclaringType(?signature, ?type),
  basic.SubtypeOf(?subtype, ?type).
.decl NumberOfTypesMatchingMethod(?constant:HeapAllocation, ?n:number)
NumberOfTypesMatchingMethod(?constant, ?n) :-
  TypeMatchingMethod(_, ?constant),
  ?n = count : TypeMatchingMethod(_, ?constant).
.decl FairlyInformativeMethodName(?constant:Value)
FairlyInformativeMethodName(?constant) :-
  NumberOfTypesMatchingMethod(?constant, ?num),
  InferredTypesPrecisionThreshold(?t),
  ?num <= ?t.
.decl SpecialMissingForNameValueFlowsToGetMethod(?forNameInvocation:MethodInvocation, ?type:Type, ?constant:Value, ?inMethod:Method)
SpecialMissingForNameValueFlowsToGetMethod(?forNameInvocation, ?type, ?constant, ?inMethod) :-
  (java_lang_Class_getDeclaredMethod(_, ?param, ?from) ;
   java_lang_Class_getMethod(_, ?param, ?from)),
  VarPointsTo(_, ?specialvalue, ?ctx, ?from),
  SpecialMissingForNameValue(?forNameInvocation, ?specialvalue),
  VarPointsTo(_, ?constant, ?ctx, ?param),
  Value_isHeap(?constant),
  TypeMatchingMethod(?type, ?constant),
  Var_DeclaringMethod(?from, ?inMethod).
BackwardReflectiveAssignClassConstant(?forNameInvocation, ?type) :-
  SpecialMissingForNameValueFlowsToGetMethod(?forNameInvocation, ?type, _, _).
BackwardHighConfidenceReflectiveAssignClassConstant(?forNameInvocation, ?type) :-
  SpecialMissingForNameValueFlowsToGetMethod(?forNameInvocation, ?type, ?constantHeap, ?inMethod),
  Instruction_Method(?forNameInvocation, ?inMethod),
  FairlyInformativeMethodName(?constantHeap).
.decl TypeMatchingFieldName(?type:Type, ?constant:HeapAllocation)
TypeMatchingFieldName(?subtype, ?constant) :-
  FieldNameMatchingStringConstant_Signature(?signature, ?constant),
  Field_DeclaringType(?signature, ?type),
  basic.SubtypeOf(?subtype, ?type).
.decl NumberOfTypesMatchingFieldName(?constant:HeapAllocation, ?n:number)
NumberOfTypesMatchingFieldName(?constant, ?n) :-
  TypeMatchingFieldName(_, ?constant),
  ?n = count : TypeMatchingFieldName(_, ?constant).
.decl FairlyInformativeFieldName(?constant:Value)
FairlyInformativeFieldName(?constant) :-
  NumberOfTypesMatchingFieldName(?constant, ?num),
  InferredTypesPrecisionThreshold(?t),
  ?num <= ?t.
.decl SpecialMissingForNameValueFlowsToGetField(?forNameInvocation:MethodInvocation, ?type:Type, ?constant:Value, ?inMethod:Method)
SpecialMissingForNameValueFlowsToGetField(?forNameInvocation, ?type, ?constant, ?inMethod) :-
  (java_lang_Class_getDeclaredField(_, ?param, ?from) ;
   java_lang_Class_getField(_, ?param, ?from)),
  VarPointsTo(_, ?specialvalue, ?ctx, ?from),
  SpecialMissingForNameValue(?forNameInvocation, ?specialvalue),
  VarPointsTo(_, ?constant, ?ctx, ?param),
  Value_isHeap(?constant),
  FairlyInformativeFieldName(?constant),
  TypeMatchingFieldName(?type, ?constant),
  Var_DeclaringMethod(?from, ?inMethod).
BackwardReflectiveAssignClassConstant(?forNameInvocation, ?type) :-
  SpecialMissingForNameValueFlowsToGetField(?forNameInvocation, ?type, _, _).
BackwardHighConfidenceReflectiveAssignClassConstant(?forNameInvocation, ?type) :-
  SpecialMissingForNameValueFlowsToGetField(?forNameInvocation, ?type, ?constantHeap, ?inMethod),
  Instruction_Method(?forNameInvocation, ?inMethod),
  FairlyInformativeFieldName(?constantHeap).
VarPointsTo(?hctx, ?value, ?ctx, ?return) :-
  SpecialMissingGetMethodValue(?invocation, ?value),
  AssignReturnValue(?invocation, ?return),
  Instruction_Method(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  isImmutableHContext(?hctx).
VarPointsTo(?hctx, ?specialvalue, ?ctx, ?var) :-
  java_lang_reflect_Method_invoke(?invocation, ?methodVar),
  VarPointsTo(_, ?specialMethodValue, ?ctx, ?methodVar),
  SpecialMissingGetMethodValue(?getMethodInvocation, ?specialMethodValue),
  SpecialMissingInvokeValueFromGetMethod(?getMethodInvocation, ?specialvalue),
  AssignReturnValue(?invocation, ?var),
  isImmutableHContext(?hctx).
.decl Opt2SpecialInvokeValueCast(?type:Type, ?getMethodInvocation:MethodInvocation)
Opt2SpecialInvokeValueCast(?type, ?getMethodInvocation) :-
  AssignCast(?type, ?from, _, _),
  VarPointsTo(_, ?specialvalue, _, ?from),
  SpecialMissingInvokeValueFromGetMethod(?getMethodInvocation, ?specialvalue).
BackwardReflectiveAssignMethodConstant(?return, ?signature) :-
  Opt2SpecialInvokeValueCast(?castType, ?getMethodInvocation),
  VirtualMethodInvocation_Base(?getMethodInvocation, ?from),
  VarPointsTo(_, ?classValue, _, ?from),
  ReifiedClass(?classType, ?classValue),
  Method_DeclaringType(?signature, ?classType),
  AssignReturnValue(?getMethodInvocation, ?return),
  Method_ReturnType(?signature, ?retType),
  (basic.SubtypeOf(?retType, ?castType); basic.SupertypeOf(?retType, ?castType)).
.decl OptFieldType(?type:Type, ?signature:Field, ?declaringClassType:Type)
OptFieldType(?type, ?signature, ?declaringClassType) :-
  Field_DeclaringType(?signature, ?declaringClassType),
  Field_Type(?signature, ?type).
VarPointsTo(?hctx, ?value, ?ctx, ?return) :-
  SpecialMissingGetFieldValue(?invocation, ?value),
  Instruction_Method(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  AssignReturnValue(?invocation, ?return),
  isImmutableHContext(?hctx).
VarPointsTo(?hctx, ?specialvalue, ?ctx, ?var) :-
  java_lang_reflect_Field_get(?invocation, _, ?fieldVar),
  VarPointsTo(_, ?specialFieldValue, ?ctx, ?fieldVar),
  SpecialMissingGetFieldValue(?getFieldInvocation, ?specialFieldValue),
  SpecialMissingGetValueFromGetField(?getFieldInvocation, ?specialvalue),
  AssignReturnValue(?invocation, ?var),
  isImmutableHContext(?hctx).
.decl Opt2SpecialGetValueCast(?type:Type, ?getFieldInvocation:MethodInvocation)
Opt2SpecialGetValueCast(?type, ?getFieldInvocation) :-
  AssignCast(?type, ?from, _, _),
  VarPointsTo(_, ?specialvalue, _, ?from),
  SpecialMissingGetValueFromGetField(?getFieldInvocation, ?specialvalue).
BackwardReflectiveAssignFieldConstant(?return, ?signature) :-
  Opt2SpecialGetValueCast(?castType, ?getFieldInvocation),
  VirtualMethodInvocation_Base(?getFieldInvocation, ?from),
  VarPointsTo(_, ?classValue, _, ?from),
  ReifiedClass(?classType, ?classValue),
  OptFieldType(?fieldType, ?signature, ?classType),
  (basic.SubtypeOf(?fieldType, ?castType); basic.SupertypeOf(?fieldType, ?castType)),
  AssignReturnValue(?getFieldInvocation, ?return).
ArrayIndexPointsTo(?hctx1, ?value, ?hctx, ?arrayValue) :-
  SpecialMissingGetMethodsValue(?invocation, ?value),
  AssignReturnValue(?invocation, ?return),
  VarPointsTo(?hctx, ?arrayValue, ?ctx, ?return),
  isImmutableHContext(?hctx1),
  isContext(?ctx).
.decl OptGetMethodsClass(?type:Type, ?getMethodsInvocation:MethodInvocation)
OptGetMethodsClass(?type, ?getMethodsInvocation) :-
  (java_lang_Class_getMethods(?getMethodsInvocation, _, ?from);
   java_lang_Class_getDeclaredMethods(?getMethodsInvocation, _, ?from)),
  VarPointsTo(_, ?classValue, _, ?from),
  ReifiedClass(?type, ?classValue).
.decl OptInvokeOnSpecialMissingGetMethodsValue(?getMethodsInvocation:MethodInvocation, ?ctx:configuration.Context, ?invocation:MethodInvocation)
OptInvokeOnSpecialMissingGetMethodsValue(?getMethodsInvocation, ?ctx, ?invocation) :-
  java_lang_reflect_Method_invoke(?invocation, ?methodVar),
  VarPointsTo(_, ?specialMethodValue, ?ctx, ?methodVar),
  SpecialMissingGetMethodsValue(?getMethodsInvocation, ?specialMethodValue).
VarPointsTo(?hctx, ?specialvalue, ?ctx, ?var) :-
  isImmutableHContext(?hctx),
  OptInvokeOnSpecialMissingGetMethodsValue(?getMethodsInvocation , ?ctx, ?invocation),
  SpecialMissingInvokeValueFromGetMethods(?getMethodsInvocation, ?specialvalue),
  AssignReturnValue(?invocation, ?var).
.decl OptSpecialInvokeValueCast(?type:Type, ?getMethodsInvocation:MethodInvocation)
OptSpecialInvokeValueCast(?type, ?getMethodsInvocation) :-
  OptAssignCast(?type, _, ?from),
  VarPointsTo(_, ?specialvalue, _, ?from),
  SpecialMissingInvokeValueFromGetMethods(?getMethodsInvocation, ?specialvalue).
.decl OptMethodObjectFromInvoke(?methodValue:Value, ?return:Var)
OptMethodObjectFromInvoke(?methodValue, ?return) :-
  OptSpecialInvokeValueCast(?type, ?getMethodsInvocation),
  OptGetMethodsClass(?classtype, ?getMethodsInvocation),
  Method_DeclaringType(?signature, ?classtype),
  Method_ReturnType(?signature, ?type),
  AssignReturnValue(?getMethodsInvocation, ?return),
  ReifiedMethod(?signature, ?methodValue).
ArrayIndexPointsTo(?hctx, ?methodValue, ?hctx, ?arrayValue) :-
  OptMethodObjectFromInvoke(?methodValue, ?return),
  VarPointsTo(?hctx, ?arrayValue, _, ?return).
ArrayIndexPointsTo(?hctx1, ?value, ?hctx, ?arrayValue) :-
  isImmutableHContext(?hctx1),
  SpecialMissingGetFieldsValue(?invocation, ?value),
  AssignReturnValue(?invocation, ?return),
  VarPointsTo(?hctx, ?arrayValue, ?ctx, ?return),
  isContext(?ctx).
.decl OptGetFieldsClass(?type:Type, ?getFieldsInvocation:MethodInvocation)
OptGetFieldsClass(?type, ?getFieldsInvocation) :-
  (java_lang_Class_getFields(?getFieldsInvocation, _, ?from);
   java_lang_Class_getDeclaredFields(?getFieldsInvocation, _, ?from)),
  VarPointsTo(_, ?classValue, _, ?from),
  ReifiedClass(?type, ?classValue).
.decl OptGetOnSpecialMissingGetFieldsValue(?getFieldsInvocation:MethodInvocation, ?ctx:configuration.Context, ?invocation:MethodInvocation)
OptGetOnSpecialMissingGetFieldsValue(?getFieldsInvocation, ?ctx, ?invocation) :-
  java_lang_reflect_Field_get(?invocation, _, ?fieldVar),
  VarPointsTo(_, ?specialFieldValue, ?ctx, ?fieldVar),
  SpecialMissingGetFieldsValue(?getFieldsInvocation, ?specialFieldValue).
VarPointsTo(?hctx, ?specialvalue, ?ctx, ?var) :-
  isImmutableHContext(?hctx),
  OptGetOnSpecialMissingGetFieldsValue(?getFieldsInvocation, ?ctx, ?invocation),
  SpecialMissingGetValueFromGetFields(?getFieldsInvocation, ?specialvalue),
  AssignReturnValue(?invocation, ?var).
.decl OptSpecialGetValueCast(?type:Type, ?getFieldsInvocation:MethodInvocation)
OptSpecialGetValueCast(?type, ?getFieldsInvocation) :-
  OptAssignCast(?type, _, ?from),
  VarPointsTo(_, ?specialvalue, _, ?from),
  SpecialMissingGetValueFromGetFields(?getFieldsInvocation, ?specialvalue).
.decl OptFieldObjectFromGet(?fieldValue:Value, ?return:Var)
OptFieldObjectFromGet(?fieldValue, ?return) :-
  OptSpecialGetValueCast(?type, ?getFieldsInvocation),
  OptGetFieldsClass(?classtype, ?getFieldsInvocation),
  OptFieldType(?type, ?signature, ?classtype),
  AssignReturnValue(?getFieldsInvocation, ?return),
  ReifiedField(?signature, ?fieldValue).
ArrayIndexPointsTo(?hctx, ?fieldValue, ?hctx, ?arrayValue) :-
  OptFieldObjectFromGet(?fieldValue, ?return),
  VarPointsTo(?hctx, ?arrayValue, _, ?return).
.decl PhantomInvoke(?instruction:Instruction)
PhantomInvoke(?instruction),
isUnsupportedInstruction(?instruction) :-
  MethodInvocation_Method(?instruction, ?method),
  Method_DeclaringType(?method, ?pt),
  PhantomType(?pt).
PhantomInvoke(?instruction),
isUnsupportedInstruction(?instruction) :-
  MethodInvocation_Method(?instruction, ?method),
  PhantomMethod(?method).
.decl DeadInstruction(?i:Instruction)
DeadInstruction(?instruction) :-
  AssignHeapAllocation_Heap(?instruction, ?heap),
  HeapAllocation_Type(?heap, ?pt),
  PhantomType(?pt).
DeadInstruction(?instruction) :-
  (AssignCast_Type(?instruction, ?pt);
   AssignInstanceOf_Type(?instruction, ?pt)),
  PhantomType(?pt).
DeadInstruction(?instruction) :-
  PhantomInvoke(?instruction).
DeadInstruction(?instruction) :-
  MethodInvocation_Method(?instruction, ?method),
  DeadMethod(?method).
.decl DeadMethod(?m:Method)
DeadMethod(?m) :- Instruction_Method(?i, ?m), DeadInstruction(?i).
DeadMethod(?m) :- PhantomBasedMethod(?m).
.decl DeadType(?type:Type)
DeadType(?type) :-
  Field_DeclaringType(?sig, ?type),
  Field_Type(?sig, ?pt),
  PhantomType(?pt).
DeadType(?type) :-
  PhantomBasedMethod(?m),
  Method_DeclaringType(?m, ?type).
DeadType(?type) :-
  DeadMethod(?m),
  Method_DeclaringType(?m, ?type).
.decl RemovedMethod(?method:Method)
RemovedMethod(?method) :-
  PhantomMethod(?method),
  Method_DeclaringType(?method, ?type),
  !PhantomType(?type).
  .init configuration = Configuration
}
.comp BasicContextSensitivity<Configuration> : AbstractContextSensitivity<Configuration> {
configuration.StaticContextRequest(?callerCtx, ?invocation) :-
  ReachableContext(?callerCtx, ?inmethod),
  StaticMethodInvocation(?invocation, _, ?inmethod).
isContext(?calleeCtx),
CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod) :-
  configuration.ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod, 1),
  configuration.ContextResponse(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod, ?calleeCtx).
 .plan 1:(2,1)
isContext(?calleeCtx),
CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod) :-
  configuration.StaticContextResponse(?callerCtx, ?invocation, ?calleeCtx),
  MethodInvocation_Method(?invocation, ?tomethod).
}
.init mainAnalysis = BasicContextSensitivity<SelectiveTwoObjectSensitivePlusHeapConfiguration>
.comp AbstractConfiguration {
  .decl ContextRequest(?ctx:configuration.Context, ?hctx:configuration.HContext, ?invo:MethodInvocation, ?value:Value, ?method:Method, ?createCGE:number)
  .decl StaticContextRequest(?ctx:configuration.Context, ?invo:MethodInvocation)
  .decl ContextResponse(?callerCtx:configuration.Context, ?hctx:configuration.HContext, ?invo:MethodInvocation, ?value:Value, ?method:Method, ?calleeCtx:Context)
  .decl StaticContextResponse(?callerCtx:configuration.Context, ?invo:MethodInvocation, ?calleeCtx:Context)
  .decl RecordContextRequest(?callerCtx:configuration.Context, ?value:Value, ?var:Var)
  .decl RecordContextResponse(?callerCtx:configuration.Context, ?value:Value, ?var:Var, ?hctx:configuration.HContext)
  .decl InitContextRequest(?symbol:symbol)
  .decl InitContextResponse(?symbol:symbol, ?context:Context)
  .decl InitHContextRequest(?symbol:symbol)
  .decl InitHContextResponse(?symbol:symbol, ?hcontext:HContext)
}
.comp SelectiveTwoObjectSensitivePlusHeapConfiguration : AbstractConfiguration {
  .type Context = [ elem1:symbol, elem2:symbol, value:Value ]
  .type HContext = [ value:Value ]
  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    ?hctx = [?hctxValue],
    ?calleeCtx = ["<<no-call-site-context>>", ?hctxValue, ?value].
  StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
    StaticContextRequest(?callerCtx, ?invo),
    ?callerCtx = [?callerCtxElement1, ?callerCtxElement2, ?callerCtxValue],
    ?calleeCtx = [?callerCtxElement2, ?invo, ?callerCtxValue],
    ?callerCtxElement1 = ?callerCtxElement1.
  RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-
    RecordContextRequest(?ctx, ?value, ?var),
    ?ctx = [?ctxElement1, ?ctxElement2, ?ctxValue],
    ?hctx = [?ctxValue],
    ?ctxElement1 = ?ctxElement1,
    ?ctxElement2 = ?ctxElement2.
  InitContextResponse(?value, ?ctx) :-
    InitContextRequest(?value),
    ?ctx = ["<<no-call-site-context>>", ?value, ?value].
  InitHContextResponse(?value, ?hctx) :-
    InitHContextRequest(?value),
    ?hctx = [?value].
}
       
       
       
.type InformationLabel = symbol
.decl isInformationLabel(?id:symbol)
.decl TaintSourceMethod(?label:InformationLabel, ?method:Method)
.decl LeakingSinkMethod(?lable:InformationLabel, ?method:Method)
.decl LeakingSinkMethodArg(?label:InformationLabel, ?index:number, ?method:Method)
.decl LeakingSinkVariable(?label:InformationLabel, ?tomethod:MethodInvocation, ?ctx:mainAnalysis.configuration.Context, ?var:Var)
.decl SanitizationMethod(?method:Method)
.decl BaseToRetTaintTransferMethod(?method:Method)
.decl BaseToParamTaintTransferMethod(?method:Method)
.decl ParamToBaseTaintTransferMethod(?index:number, ?method:Method)
.decl ParamIndexToBaseTaintTransferMethod(?index:number, ?method:Method)
.decl ParamToRetTaintTransferMethod(?method:Method)
.decl MockBaseToRetTaintTransferMethod(?meth:Method)
.decl MockParamToRetTaintTransferMethod(?meth:Method)
.decl VarIsCast(?var:Var)
.decl VarUse(?var:Var, ?inst:Instruction)
.decl LabelFromSource(?source:symbol, ?label:InformationLabel)
.decl AnyMethodInvocation(?invocation:MethodInvocation, ?tomethod:Method)
.decl MethodInvocationInfo(?invocation:MethodInvocation, ?type:Type, ?var:Var)
.decl TypeForReturnValue(?type:Type, ?ret:Var, ?invocation:MethodInvocation)
.decl MethodInvocationInContext(?ctx:mainAnalysis.configuration.Context, ?invocation:MethodInvocation, ?tomethod:Method)
.decl MethodInvocationInContextInApplication(?ctx:mainAnalysis.configuration.Context, ?invocation:MethodInvocation, ?method:Method)
.decl CallTaintingMethod(?label:InformationLabel, ?ctx:mainAnalysis.configuration.Context, ?invocation:MethodInvocation)
.decl ParamTaintTransferredToBase(?param:Var, ?ctx:mainAnalysis.configuration.Context, ?base:Var)
.decl ParamTaintTransferredToRet(?type:Type, ?ret:Var, ?ctx:mainAnalysis.configuration.Context, ?param:Var)
.decl VarIsTaintedFromVar(?type:Type, ?ctx1:mainAnalysis.configuration.Context, ?var1:Var, ?ctx2:mainAnalysis.configuration.Context, ?var2:Var)
.decl VarIsTaintedFromVarIndex(?base:Var, ?ctx1:mainAnalysis.configuration.Context, ?param:Var)
.decl TaintTransferMethodInvocationInContext(?ctx:mainAnalysis.configuration.Context, ?index:number, ?invocation:MethodInvocation)
.decl LeakingTaintedInformation(?fromLabel:InformationLabel, ?toLabel:InformationLabel, ?ctx:mainAnalysis.configuration.Context,
                                ?invocation:MethodInvocation, ?value:symbol)
.output LeakingTaintedInformation
.decl LeakingTaintedInformationVars(?fromCtx:mainAnalysis.configuration.Context, ?from:Var, ?toCtx:mainAnalysis.configuration.Context, ?to:Var)
.output LeakingTaintedInformationVars
.decl TaintedValue(?value:Value)
.decl SourceFromTaintedValue(?value:Value, ?id:symbol)
.decl TaintedValueTransferred(?declaringType:Type, ?id:symbol, ?type:Type, ?value:Value)
.decl TaintedObjectSerialized(?declaringType:Type, ?source:symbol, ?type:Type, ?hctx:mainAnalysis.configuration.HContext, ?val:Value, ?ctx:mainAnalysis.configuration.Context, ?base:Var)
.decl VarIsTaintedFromValue(?type:Type, ?value:Value, ?ctx:mainAnalysis.configuration.Context, ?var:Var)
.decl TaintedVarTaintedFromVar(?toCtx:mainAnalysis.configuration.Context, ?to:Var, ?value:Value, ?type:Type)
.decl MethodReturningStringFactory(?tomethod:Method)
.decl StringFactoryReturnInvocation(?invocation:MethodInvocation)
.decl TaintedVarPointsTo(?value:Value, ?ctx:mainAnalysis.configuration.Context, ?var:Var)
.decl VarIsTaintedFromValueIndex(?ctx:mainAnalysis.configuration.Context, ?base:Var, ?hctx:mainAnalysis.configuration.HContext, ?value:Value)
.decl TaintObjTransfer(fromCtx:mainAnalysis.configuration.Context, from:Var, toCtx:mainAnalysis.configuration.Context, to:Var)
.output TaintObjTransfer
isInformationLabel("default").
isInformationLabel("Location").
isInformationLabel("Telephony").
isInformationLabel("Bundle").
isInformationLabel("OS").
isInformationLabel("Personal").
isInformationLabel("IPC").
isInformationLabel("Persistence").
isInformationLabel("IO").
isInformationLabel("Net").
isInformationLabel("PASSWORD").
isInformationLabel("SENSITIVE_CONTROL").
       
AnyMethodInvocation(?invocation, ?tomethod) :-
  StaticMethodInvocation(?invocation, ?tomethod, _).
AnyMethodInvocation(?invocation, ?tomethod) :-
  VirtualMethodInvocation(?invocation, ?tomethod, _).
AnyMethodInvocation(?invocation, ?tomethod) :-
  MethodInvocation_Method(?invocation, ?tomethod),
  isSpecialMethodInvocation_Insn(?invocation).
VarUse(?from, ?insn) :-
  AssignOper_From(?insn, _, ?from).
LeakingSinkMethodArg(?label, ?index, ?method) :-
  LeakingSinkMethod(?label, ?method),
  FormalParam(?index, ?method, _).
MethodInvocationInfo(?invocation, ?type, ?ret) :-
  Method_ReturnType(?method, ?type),
  AnyMethodInvocation(?invocation, ?method),
  AssignReturnValue(?invocation, ?ret).
VarIsCast(?var) :-
  AssignCast(_, ?var, _, _).
TypeForReturnValue(?type, ?ret, ?invocation) :-
  MethodInvocationInfo(?invocation, ?type, ?ret),
  !VarIsCast(?ret).
CallTaintingMethod(?label, ?ctx, ?invocation) :-
  TaintSourceMethod(?label, ?tomethod),
  MethodInvocationInContext(?ctx, ?invocation, ?tomethod),
  Instruction_Method(?invocation, ?inmethod),
  ApplicationMethod(?inmethod).
TaintTransferMethodInvocationInContext(?ctx, ?index, ?invocation) :-
  MethodInvocationInContext(?ctx, ?invocation, ?taintTransferMethod),
  ParamToBaseTaintTransferMethod(?index, ?taintTransferMethod).
ParamTaintTransferredToBase(?param, ?ctx, ?base) :-
  TaintTransferMethodInvocationInContext(?ctx, ?index, ?invocation),
  ActualParam(?index, ?invocation, ?param),
  MethodInvocation_Base(?invocation, ?base),
  !AssignReturnValue(?invocation, _).
MethodInvocationInContextInApplication(?ctx, ?invocation, ?method) :-
  ApplicationMethod(?fromMethod),
  Instruction_Method(?invocation, ?fromMethod),
  MethodInvocationInContext(?ctx, ?invocation, ?method).
ParamTaintTransferredToRet(?type, ?ret, ?ctx, ?param) :-
  ParamToRetTaintTransferMethod(?taintTransferMethod),
  MethodInvocationInContextInApplication(?ctx, ?invocation, ?taintTransferMethod),
  ActualParam(_, ?invocation, ?param),
  TypeForReturnValue(?type, ?ret, ?invocation).
VarIsTaintedFromVar(?type, ?ctx, ?param, ?ctx, ?base) :-
   MethodInvocationInContextInApplication(?ctx, ?invocation, ?method),
   BaseToParamTaintTransferMethod(?method),
   MethodInvocation_Base(?invocation, ?base),
   ActualParam(_, ?invocation, ?param),
   Var_Type(?param, ?type).
VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?base) :-
  BaseToRetTaintTransferMethod(?method),
  MethodInvocationInContext(?ctx, ?invocation, ?method),
  MethodInvocation_Base(?invocation, ?base),
  TypeForReturnValue(?type, ?ret, ?invocation).
VarIsTaintedFromVarIndex(?base, ?ctx, ?param) :-
   MethodInvocationInContext(?ctx, ?invocation, ?method),
   ParamIndexToBaseTaintTransferMethod(?index, ?method),
   MethodInvocation_Base(?invocation, ?base),
   ActualParam(?index, ?invocation, ?param).
LeakingSinkVariable(?label, ?invocation, ?ctx, ?var) :-
  LeakingSinkMethodArg(?label, ?index, ?tomethod),
  MethodInvocationInContextInApplication(?ctx, ?invocation, ?tomethod),
  ActualParam(?index, ?invocation, ?var).
LeakingSinkVariable(?label, ?invocation, ?ctx, ?var) :-
   LeakingSinkMethod(?label, ?tomethod),
   !FormalParam(_, ?tomethod, _),
   MethodInvocationInContextInApplication(?ctx, ?invocation, ?tomethod),
   MethodInvocation_Base(?invocation, ?var).
TaintObjTransfer(?fromCtx, ?from, ?toCtx, ?to),
TaintedVarTaintedFromVar(?toCtx, ?to, ?value, ?type) :-
  VarIsTaintedFromVar(?type, ?toCtx, ?to, ?fromCtx, ?from),
  TaintedVarPointsTo(?value, ?fromCtx, ?from).
  .plan 1:(2,1)
mainAnalysis.Value_isMock(?value), isValue(?value), mainAnalysis.Value_Type(?value, ?type), mainAnalysis.Value_DeclaringType(?value, "java.lang.Object"),
TaintedValue(?value),
SourceFromTaintedValue(?value, ?id),
mainAnalysis.Value_DeclaringType(?value, ?declaringType) :-
  TaintedValueTransferred(?declaringType, ?id, ?type, ?value).
TaintedValueTransferred(?declaringType, ?source, ?type, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN")),
mainAnalysis.VarPointsTo(?hctx, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN"), ?toCtx, ?to) :-
  TaintedVarTaintedFromVar(?toCtx, ?to, ?value, ?type),
  SourceFromTaintedValue(?value, ?source),
  mainAnalysis.Value_DeclaringType(?value, ?declaringType),
  mainAnalysis.isImmutableHContext(?hctx).
  .plan 2:(3,1,2,4)
TaintedValueTransferred(?declaringType, ?source, ?type, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN")),
mainAnalysis.VarPointsTo(?hctx, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN"), ?toCtx, ?to) :-
  SourceFromTaintedValue(?value, ?source),
  mainAnalysis.Value_DeclaringType(?value, ?declaringType),
  VarIsTaintedFromValue(?type, ?value, ?toCtx, ?to),
  mainAnalysis.isImmutableHContext(?hctx).
VarIsTaintedFromValueIndex(?ctx, ?base, ?hctx, ?value) :-
   VarIsTaintedFromVarIndex(?base, ?ctx, ?param),
   mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?param).
VarIsTaintedFromValue(?type, ?valueIndex, ?ctx, ?base) :-
  VarIsTaintedFromValueIndex(?ctx, ?base, ?hctx, ?value),
  mainAnalysis.ArrayIndexPointsTo(_, ?valueIndex, ?hctx, ?value),
  Var_Type(?base, ?type).
.decl AppendableType(?type:Type)
AppendableType("java.lang.Appendable").
AppendableType(?type) :-
   basic.SubtypeOf(?type, ?sft),
   AppendableType(?sft).
mainAnalysis.StringFactoryType("java.lang.String").
mainAnalysis.StringFactoryType(?type) :-
   AppendableType(?type).
mainAnalysis.StringFactoryVar(?var) :-
  mainAnalysis.StringFactoryType(?type),
  Var_Type(?var, ?type).
mainAnalysis.StringFactoryVarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?var) :-
  mainAnalysis.StringFactoryVar(?var),
  mainAnalysis.VarPointsTo(?factoryHctx, ?factoryValue, ?ctx, ?var).
.decl AppendInvocation_Base(?invocation:MethodInvocation, ?base:Var)
AppendInvocation_Base(?invocation, ?base) :-
  VirtualMethodInvocation_SimpleName(?invocation, "append"),
  VirtualMethodInvocation_Base(?invocation, ?base).
VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?base),
VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?param) :-
  AppendInvocation_Base(?invocation, ?base),
  mainAnalysis.StringFactoryVarPointsTo(_, _, ?ctx, ?base),
  AssignReturnValue(?invocation, ?ret),
  Var_Type(?ret, ?type),
  ActualParam(0, ?invocation, ?param).
VarIsTaintedFromVar(?type, ?ctx, ?base, ?ctx, ?param) :-
  AppendInvocation_Base(?invocation, ?base),
  mainAnalysis.StringFactoryVarPointsTo(_, _, ?ctx, ?base),
  Var_Type(?base, ?type),
  ActualParam(0, ?invocation, ?param).
MethodReturningStringFactory(?tomethod) :-
  mainAnalysis.StringFactoryType(?stringFactoryType),
  Method_ReturnType(?tomethod, ?stringFactoryType).
StringFactoryReturnInvocation(?invocation) :-
  MethodReturningStringFactory(?tomethod),
  VirtualMethodInvocation(?invocation, ?tomethod, _).
VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?base) :-
  mainAnalysis.StringFactoryVarPointsTo(_, _, ?ctx, ?base),
  VirtualMethodInvocation_Base(?invocation, ?base),
  StringFactoryReturnInvocation(?invocation),
  AssignReturnValue(?invocation, ?ret),
  Var_Type(?ret, ?type).
VarIsTaintedFromValue(?componentType, ?basevalue, ?ctx, ?to) :-
  TaintedValue(?basevalue),
  mainAnalysis.Value_Type(?basevalue, ?arrayType),
  ComponentType(?arrayType, ?componentType),
  mainAnalysis.LoadHeapArrayIndex(?ctx, ?to, _, ?basevalue).
TypeForReturnValue(?type, ?ret, ?invocation) :-
  mainAnalysis.OptAssignCast(?type, _, ?ret),
  MethodInvocationInfo(?invocation, _, ?ret).
TaintObjTransfer(?ctx, ?from, ?ctx, ?to),
TaintedValueTransferred(?declaringType, ?source, ?type, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN")),
mainAnalysis.VarPointsTo(?hctx, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN"), ?ctx, ?to) :-
  SourceFromTaintedValue(?value, ?source),
  mainAnalysis.Value_DeclaringType(?value, ?declaringType),
  TaintedVarPointsTo(?value, ?ctx, ?from),
  ParamTaintTransferredToRet(?type, ?to, ?ctx, ?from),
  mainAnalysis.isImmutableHContext(?hctx).
TaintObjTransfer(?ctx, ?param, ?ctx, ?to),
TaintedValueTransferred(?declaringType, ?source, ?type, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN")),
mainAnalysis.VarPointsTo(?hctx, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN"), ?ctx, ?to) :-
  TaintedVarPointsTo(?value, ?ctx, ?param),
  ActualParam(_, ?invo, ?param),
  MethodInvocation_Method(?invo, ?meth),
  MockParamToRetTaintTransferMethod(?meth),
  AssignReturnValue(?invo, ?to),
  Var_Type(?to, ?type),
  mainAnalysis.Value_DeclaringType(?value, ?declaringType),
  SourceFromTaintedValue(?value, ?source),
  mainAnalysis.isImmutableHContext(?hctx).
.plan 1:(7,1,2,3,4,5,6,8,9),2:(8,1,2,3,4,5,6,7,9)
TaintedValueTransferred(?declaringType, ?source, ?type, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN")),
mainAnalysis.VarPointsTo(?hctx, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN"), ?ctx, ?to) :-
  TaintedVarPointsTo(?value, ?ctx, ?from),
  AssignCast(_, ?from, ?to, _),
  mainAnalysis.Value_DeclaringType(?value, ?declaringType),
  SourceFromTaintedValue(?value, ?source),
  Var_Type(?to, ?type),
  mainAnalysis.isImmutableHContext(?hctx).
.plan 1:(3,1,2,4,5,6),2:(4,1,2,3,5,6)
TaintObjTransfer(?ctx, ?base, ?ctx, ?to),
TaintedValueTransferred(?declaringType, ?source, ?type, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN")),
mainAnalysis.VarPointsTo(?hctx, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN"), ?ctx, ?to) :-
  TaintedVarPointsTo(?value, ?ctx, ?base),
  VirtualMethodInvocation_Base(?invo, ?base),
  MethodInvocation_Method(?invo, ?meth),
  MockBaseToRetTaintTransferMethod(?meth),
  AssignReturnValue(?invo, ?to),
  Var_Type(?to, ?type),
  mainAnalysis.Value_DeclaringType(?value, ?declaringType),
  SourceFromTaintedValue(?value, ?source),
  mainAnalysis.isImmutableHContext(?hctx).
.plan 1:(7,1,2,3,4,5,6,8,9),2:(8,1,2,3,4,5,6,7,9)
.decl ValueTaintedFromValue(?v1:Value, ?v2:Value)
ValueTaintedFromValue(?newvalue, ?baseObj) :-
  BaseValueTaintedFromParamValue(?newvalue, ?baseObj),
  ?newvalue != ?baseObj.
mainAnalysis.VarPointsTo(?hctx, ?newvalue, ?ctx, ?var) :-
  ValueTaintedFromValue(?newvalue, ?existingvalue),
  mainAnalysis.VarPointsTo(_, ?existingvalue, ?ctx, ?var),
  mainAnalysis.isImmutableHContext(?hctx).
  .plan 1:(2,1,3)
.decl XYZ(?value:Value, ?ctx:mainAnalysis.configuration.Context, ?param:Var)
XYZ(?existingvalue, ?ctx, ?param) :-
  ParamTaintTransferredToBase(?param, ?ctx, ?base),
  mainAnalysis.VarPointsTo(_, ?existingvalue, ?ctx, ?base).
.decl BaseValueTaintedFromParamValue(v1:Value, v2:Value)
TaintedValueTransferred(?declaringType, ?source, ?type, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN")),
BaseValueTaintedFromParamValue(cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN"), ?existingValue) :-
  XYZ(?existingValue, ?ctx, ?param),
  mainAnalysis.Value_Type(?existingValue, ?type),
  TaintedVarPointsTo(?value, ?ctx, ?param),
  SourceFromTaintedValue(?value, ?source),
  mainAnalysis.Value_DeclaringType(?value, ?declaringType).
  .plan 1:(2,1,3,4,5), 2:(3,1,2,4,5), 3:(4,3,1,2,5), 4:(5,3,1,2,4)
.decl MethodInvocationInMethod(?tomethod:Method, ?invocation:MethodInvocation, ?inmethod:Method)
MethodInvocationInMethod(?tomethod, ?invocation, ?inmethod) :-
  AnyMethodInvocation(?invocation, ?tomethod),
  Instruction_Method(?invocation, ?inmethod).
MethodInvocationInContext(?ctx, ?invocation, ?tomethod) :-
  mainAnalysis.ReachableContext(?ctx, ?inmethod),
  MethodInvocationInMethod(?tomethod, ?invocation, ?inmethod).
LeakingTaintedInformation(?sourceLabel, ?destLabel, ?ctx, ?invocation, ?source) :-
  SourceFromTaintedValue(?value, ?source),
  LabelFromSource(?source, ?sourceLabel),
  TaintedVarPointsTo(?value, ?ctx, ?var),
  LeakingSinkVariable(?destLabel, ?invocation, ?ctx, ?var).
LeakingTaintedInformationVars(?fromCtx, ?from, ?toCtx, ?to) :-
  TaintedVarPointsTo(?value, ?toCtx, ?to),
  LeakingSinkVariable(_, _, ?toCtx, ?to),
  SourceFromTaintedValue(?value, ?from),
  Var_DeclaringMethod(?from, ?meth),
  mainAnalysis.ReachableContext(?fromCtx, ?meth).
LeakingTaintedInformationVars(?fromCtx, ?from, ?toCtx, ?to) :-
  TaintedVarPointsTo(?value, ?toCtx, ?to),
  LeakingSinkVariable(_, _, ?toCtx, ?to),
  SourceFromTaintedValue(?value, ?source),
  AssignReturnValue(?source, ?from),
  TaintedVarPointsTo(?fromVal, ?fromCtx, ?from),
  SourceFromTaintedValue(?fromVal, ?source).
mainAnalysis.Value_isMock(cat(cat(cat(cat(?invo, "::: "), ?type), "::: "), "ASSIGN")), isValue(cat(cat(cat(cat(?invo, "::: "), ?type), "::: "), "ASSIGN")), mainAnalysis.Value_Type(cat(cat(cat(cat(?invo, "::: "), ?type), "::: "), "ASSIGN"), ?type), mainAnalysis.Value_DeclaringType(cat(cat(cat(cat(?invo, "::: "), ?type), "::: "), "ASSIGN"), "java.lang.Object"), TaintedValue(cat(cat(cat(cat(?invo, "::: "), ?type), "::: "), "ASSIGN")), SourceFromTaintedValue(cat(cat(cat(cat(?invo, "::: "), ?type), "::: "), "ASSIGN"), ?invo), LabelFromSource(?invo, ?label), mainAnalysis.Value_DeclaringType(cat(cat(cat(cat(?invo, "::: "), ?type), "::: "), "ASSIGN"), ?declaringType),
mainAnalysis.VarPointsTo(?hctx, cat(cat(cat(cat(?invo, "::: "), ?type), "::: "), "ASSIGN"), ?ctx, ?to) :-
  CallTaintingMethod(?label, ?ctx, ?invo),
  mainAnalysis.isImmutableHContext(?hctx),
  TypeForReturnValue(?type, ?to, ?invo),
  Instruction_Method(?invo, ?method),
  Method_DeclaringType(?method, ?declaringType).
TaintedVarPointsTo(?value, ?ctx, ?var) :-
  TaintedValue(?value),
  mainAnalysis.VarPointsTo(_, ?value, ?ctx, ?var).
TaintedValue(?basevalue) :-
  TaintedValue(?value),
  mainAnalysis.InstanceFieldPointsTo(_, ?value, "<java.lang.String: char[] value>", _, ?basevalue).
TaintedValueTransferred(?declaringType, ?source, "char[]", cat(cat(cat(cat(?source, "::: "), "char[]"), "::: "), "ASSIGN")),
mainAnalysis.VarPointsTo(?hctx, cat(cat(cat(cat(?source, "::: "), "char[]"), "::: "), "ASSIGN"), ?ctx, ?to) :-
  mainAnalysis.LoadHeapInstanceField(?ctx, ?to, "<java.lang.String: char[] value>", _, ?basevalue),
  TaintedValue(?basevalue),
  mainAnalysis.Value_DeclaringType(?basevalue, ?declaringType),
  SourceFromTaintedValue(?basevalue, ?source),
  mainAnalysis.isImmutableHContext(?hctx).
  .plan 1:(2,1,3,4,5)
.decl SerializeObjectInvocation(?base:Var, ?ctx:mainAnalysis.configuration.Context, ?var:Var)
SerializeObjectInvocation(?base, ?ctx, ?var) :-
  MethodInvocationInContextInApplication(?ctx, ?invocation, "<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>"),
  MethodInvocation_Base(?invocation, ?base),
  ActualParam(_, ?invocation, ?var).
.decl ObjectSerializedToBase(?ctx:mainAnalysis.configuration.Context, ?base:Var, ?obj:Value)
ObjectSerializedToBase(?ctx, ?base, ?obj) :-
  SerializeObjectInvocation(?base, ?ctx, ?var),
  mainAnalysis.VarPointsTo(_, ?obj, ?ctx, ?var),
  SerializableValue(?obj).
.decl SerializableValue(?obj:Value)
SerializableValue(?obj) :-
   mainAnalysis.Value_Type(?obj, ?type),
   basic.SupertypeOf("java.io.Serializable", ?type).
.decl SerializableVar(?var:Var)
SerializableVar(?var) :-
   Var_Type(?var, ?type),
   basic.SupertypeOf("java.io.Serializable", ?type).
TaintedObjectSerialized(?declaringType, ?source, ?type, ?hctx, cat(cat(cat(cat(?source, "::: "), ?type), "::: "), "ASSIGN"), ?ctx, ?base) :-
  ObjectSerializedToBase(?ctx, ?base, ?baseobj),
  (mainAnalysis.InstanceFieldPointsTo(_, ?obj, ?field, _, ?baseobj),
  !Field_Modifier("transient", ?field)),
  TaintedValue(?obj),
  Var_Type(?base, ?type),
  mainAnalysis.Value_DeclaringType(?obj, ?declaringType),
  SourceFromTaintedValue(?obj, ?source),
  mainAnalysis.isImmutableHContext(?hctx).
  .plan 2: (3,2,1,4,5,6,7)
TaintedValueTransferred(?declaringType, ?source, ?type, ?val),
mainAnalysis.VarPointsTo(?hctx, ?val, ?ctx, ?base) :-
    TaintedObjectSerialized(?declaringType, ?source, ?type, ?hctx, ?val, ?ctx, ?base).
VarIsTaintedFromValue(?type, ?basevalue, ?ctx, ?to) :-
   MaybeDeserializedValue(?basevalue),
   TaintedVarPointsTo(?basevalue, ?ctx, ?base),
   LoadInstanceField(?base, ?sig, ?to, _),
   !Field_Modifier("transient", ?sig),
   Var_Type(?to, ?type).
BaseToRetTaintTransferMethod("<java.io.ObjectInputStream: java.lang.Object readObject()>").
.decl OptDeserializeInvoke(?ret:Var)
OptDeserializeInvoke(?ret) :-
   MethodInvocationInContextInApplication(_, ?invocation, "<java.io.ObjectInputStream: java.lang.Object readObject()>"),
   AssignReturnValue(?invocation, ?ret).
.decl MaybeDeserializedValue(?value:Value)
MaybeDeserializedValue(?value) :-
   OptDeserializeInvoke(?ret),
   TaintedVarPointsTo(?value, _, ?ret),
   SerializableValue(?value).
.decl AppTaintedVarPointsTo(?value:Value, ?var:Var)
AppTaintedVarPointsTo(?value, ?var) :-
  TaintedVarPointsTo(?value, _, ?var), ApplicationVar(?var).
.decl AppTaintedVar(?var:Var)
.output AppTaintedVar
AppTaintedVar(?var) :- AppTaintedVarPointsTo(_, ?var).
TaintObjTransfer(?callerCtx, ?actual, ?calleeCtx, ?formal) :-
    mainAnalysis.OptArgAssign(?calleeCtx, ?formal, ?callerCtx, ?actual, ?allowedType),
    TaintedVarPointsTo(?taintedValue, ?callerCtx, ?actual),
    mainAnalysis.Value_Type(?taintedValue, ?tType),
    basic.SubtypeOf(?tType, ?allowedType).
TaintObjTransfer(?callerCtx, ?return, ?calleeCtx, ?local) :-
    mainAnalysis.CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?method),
    AssignReturnValue(?invocation, ?local),
    ReturnVar(?return, ?method),
    TaintedVarPointsTo(_, ?calleeCtx, ?return).
TaintObjTransfer(?ctx, ?base, ?calleeCtx, ?this) :-
    TaintedVarPointsTo(_, ?ctx, ?base),
    MethodInvocation_Base(?invo, ?base),
    mainAnalysis.CallGraphEdge(?ctx, ?invo, ?calleeCtx, ?meth),
    ThisVar(?meth, ?this).
.plan 1:(3,2,1,4)
TaintObjTransfer(?ctx, ?param, ?ctx, ?base) :-
    ParamTaintTransferredToBase(?param, ?ctx, ?base),
    TaintedVarPointsTo(_, ?ctx, ?param).
TaintObjTransfer(?fromCtx, ?from, ?toCtx, ?to) :-
    TaintedVarPointsTo(?value, ?fromCtx, ?from),
    mainAnalysis.StoreHeapInstanceField(?sig, ?hctx, ?baseval, ?fromCtx, ?from),
    mainAnalysis.LoadHeapInstanceField(?toCtx, ?to, ?sig, ?hctx, ?baseval),
    TaintedVarPointsTo(?value, ?toCtx, ?to).
.plan 1:(2,1,4,3),2:(3,4,1,2),3:(4,3,2,1)
TaintObjTransfer(?fromCtx, ?from, ?toCtx, ?to) :-
    TaintedVarPointsTo(?value, ?fromCtx, ?from),
    mainAnalysis.StoreHeapArrayIndex(?basehctx, ?basevalue, ?fromCtx, ?from),
    mainAnalysis.LoadHeapArrayIndex(?toCtx, ?to, ?basehctx, ?basevalue),
    TaintedVarPointsTo(?value, ?toCtx, ?to).
.plan 1:(2,1,4,3),2:(3,4,1,2),3:(4,3,2,1)
TaintObjTransfer(?fromCtx, ?from, ?toCtx, ?to) :-
    TaintedVarPointsTo(?val, ?toCtx, ?to),
    LoadStaticField(?sig, ?to, _),
    StoreStaticField(?from, ?sig, _),
    TaintedVarPointsTo(?val, ?fromCtx, ?from).
.plan 1:(4,3,2,1)
TaintObjTransfer(?ctx, ?from, ?ctx, ?to) :-
    TaintedVarPointsTo(_, ?ctx, ?from),
    AssignCast(_, ?from, ?to, _).
TaintObjTransfer(?ctx, ?from, ?ctx, ?to) :-
    TaintedVarPointsTo(_, ?ctx, ?from),
    AssignLocal(?from, ?to, _).
       
ParamToBaseTaintTransferMethod(0, "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>").
ParamToBaseTaintTransferMethod(0, "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>").
ParamToBaseTaintTransferMethod(0, "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>").
ParamToBaseTaintTransferMethod(0, "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>").
ParamToBaseTaintTransferMethod(0, "<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>").
ParamToBaseTaintTransferMethod(0, "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>").
BaseToRetTaintTransferMethod("<java.lang.Float: float floatValue()>").
BaseToRetTaintTransferMethod("<java.lang.String: byte[] getBytes(java.lang.String)>").
BaseToRetTaintTransferMethod("<java.lang.String: char charAt(int)>").
BaseToRetTaintTransferMethod("<java.util.Enumeration: java.lang.Object nextElement()>").
BaseToRetTaintTransferMethod("<java.util.Iterator: java.lang.Object next()>").
BaseToRetTaintTransferMethod("<java.util.LinkedList: java.lang.Object clone()>").
BaseToRetTaintTransferMethod("<java.util.LinkedList: java.lang.Object get(int)>").
BaseToRetTaintTransferMethod("<java.util.Map: java.util.Set entrySet()>").
BaseToRetTaintTransferMethod("<java.util.Map$Entry: java.lang.Object getValue()>").
BaseToRetTaintTransferMethod("<java.util.Set: java.util.Iterator iterator()>").
TaintSourceMethod("default", method) :- isMethod(method), match("<javax.servlet.ServletRequest: .* get.*\(.*\)>", method).
TaintSourceMethod("default", method) :- isMethod(method), match("<javax.servlet.ServletContext: .* get.*\(.*\)>", method).
TaintSourceMethod("default", method) :- isMethod(method), match("<javax.servlet.ServletConfig: .* get.*\(.*\)>", method).
TaintSourceMethod("default", method) :- isMethod(method), match("<javax.servlet.http.Cookie: .* get.*\(.*\)>", method).
TaintSourceMethod("default", method) :- isMethod(method), match("<javax.servlet.http.HttpServletRequest: .* get.*\(.*\)>", method).
TaintSourceMethod("default", method) :- isMethod(method), match("<javax.servlet.http.HttpSession: .* get.*\(.*\)>", method).
TaintSourceMethod("default", method) :- isMethod(method), match("<javax.servlet.ServletRequest: .* get.*\(.*\)>", method).
TaintSourceMethod("default", method) :- isMethod(method), match("<java.io.BufferedReader: java.lang.String readLine\(\)>", method).
TaintSourceMethod("default", method) :- isMethod(method), match("<java.net.URLDecoder: java.lang.String decode\(java.lang.String,java.lang.String\)>", method).
TaintSourceMethod("default", method) :- isMethod(method), match("<com.oreilly.servlet.MultipartRequest: java.lang.String getParameter\(java.lang.String\)>", method).
TaintSourceMethod("default", method) :- isMethod(method), match("<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter\(\)>", method).
LeakingSinkMethodArg("default", 0, method) :- isMethod(method), match("<java.io.Print.*: void println\(.*\)>", method).
LeakingSinkMethodArg("default", 0, method) :- isMethod(method), match("<java.sql.Statement: .* execute.*\(.*\)>", method).
LeakingSinkMethodArg("default", 0, method) :- isMethod(method), match("<javax.servlet.http.HttpServletResponse: void sendRedirect\(.*\)>", method).
LeakingSinkMethodArg("default", 0, method) :- isMethod(method), match("<java.io.File: void <init>\(.*\)>", method).
LeakingSinkMethodArg("default", 0, method) :- isMethod(method), match("<java.io.File.*er: void <init>\(.*\)>", method).
LeakingSinkMethodArg("default", 0, method) :- isMethod(method), match("<java.io.File.*Stream: void <init>\(.*\)>", method).
LeakingSinkMethodArg("default", 0, method) :- isMethod(method), match("<java.sql.Connection: java.sql.PreparedStatement prepareStatement\(.*\)>", method).
TaintSourceMethod(?label, ?overriddenMethod) :-
   TaintSourceMethod(?label, ?method),
   Method_DeclaringType(?method, ?superclass),
   Method_SimpleName(?method, ?name),
   Method_Descriptor(?method, ?descriptor),
   basic.SubtypeOf(?class, ?superclass),
   isClassType(?class),
   Method_DeclaringType(?overriddenMethod, ?class),
   Method_SimpleName(?overriddenMethod, ?name),
   Method_Descriptor(?overriddenMethod, ?descriptor).
LeakingSinkMethodArg(?label, ?n, ?overriddenMethod) :-
   LeakingSinkMethodArg(?label, ?n, ?method),
   Method_DeclaringType(?method, ?superclass),
   Method_SimpleName(?method, ?name),
   Method_Descriptor(?method, ?descriptor),
   basic.SubtypeOf(?class, ?superclass),
   isClassType(?class),
   Method_DeclaringType(?overriddenMethod, ?class),
   Method_SimpleName(?overriddenMethod, ?name),
   Method_Descriptor(?overriddenMethod, ?descriptor).
SanitizationMethod(?method) :-
  (?method = "<securibench.micro.sanitizers.Sanitizers1: java.lang.String clean(java.lang.String)>" ;
   ?method = "<securibench.micro.sanitizers.Sanitizers2: java.lang.String clean(java.lang.String)>" ;
   ?method = "<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>" ;
   ?method = "<securibench.micro.sanitizers.Sanitizers6: java.lang.String clean(java.lang.String)>"),
  isMethod(?method).
       
.decl MockObjFromArray(?type:ReferenceType)
.decl MockObjFromField(?type:ReferenceType)
.decl MockObjFromFormal(?type:ReferenceType)
.decl ServletEntryMethodName(?method:Method)
ServletEntryMethodName("doGet").
ServletEntryMethodName("doPost").
.decl AllConcreteImplementations(?type1:Type, ?type2:Type)
AllConcreteImplementations(?class, ?staticType) :-
  isClassType(?class),
  basic.SubtypeOf(?class, ?staticType),
  !ClassModifier("abstract", ?class).
AllConcreteImplementations(?class, ?class) :-
  isClassType(?class),
  !ClassModifier("abstract", ?class).
.decl ConcreteImplementationsOrd(?staticType:Type, ?classOrd:number)
.decl ConcreteImplementations(?staticType:Type, ?class:Type)
ConcreteImplementationsOrd(?staticType, ?classOrd) :-
  AllConcreteImplementations(_, ?staticType),
  ?classOrd = min ord(?allClasses): AllConcreteImplementations(?allClasses, ?staticType).
ConcreteImplementations(?staticType, ?class) :-
  ConcreteImplementationsOrd(?staticType, ?classOrd),
  isClassType(?class),
  ord(?class) = ?classOrd.
.decl ServletClass(?class:Type)
ServletClass(?class) :-
  isClassType(?class),
  AllConcreteImplementations(?class, "javax.servlet.http.HttpServlet").
.decl OpenProgramEntryPoint(?method:Method)
.decl MockOpenProgramEntryPoint(?class:Type, ?method:Method)
.decl PossibleOpenProgramEntryPoint(?class:Type, ?method:Method)
OpenProgramEntryPoint(?method) :-
  MockOpenProgramEntryPoint(_, ?method).
mainAnalysis.ApplicationEntryPoint(?meth) :-
  OpenProgramEntryPoint(?meth),
  ApplicationMethod(?meth).
PossibleOpenProgramEntryPoint(?class, cat(cat("<", ?class), ": void <init>()>")),
PossibleOpenProgramEntryPoint(?class, cat(cat(cat(cat("<", ?class), ": void "), ?serviceMethodName), "(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>")) :-
  ServletClass(?class),
  ServletEntryMethodName(?serviceMethodName).
MockOpenProgramEntryPoint(?class, ?entry) :-
  PossibleOpenProgramEntryPoint(?class, ?entry),
  isMethod(?entry).
mainAnalysis.configuration.InitContextRequest(?value) :-
  MockOpenProgramEntryPoint(_, ?method),
  Method_DeclaringType(?method, ?class),
  MockObject(?value, ?class).
mainAnalysis.ReachableContext(?ctx, ?method) :-
  MockOpenProgramEntryPoint(_, ?method),
  Method_DeclaringType(?method, ?class),
  MockObject(?value, ?class),
  mainAnalysis.configuration.InitContextResponse(?value, ?ctx).
mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?receiver) :-
  mainAnalysis.isImmutableHContext(?hctx),
  ValueForReceiverInContext(?ctx, ?receiver, ?value).
.decl MockObject(?value:Value, ?type:ReferenceType)
.decl MockObjFromOpenProgramEntryPoint(?value:Value)
mainAnalysis.Value_isMock(cat(cat("<Mock receiver ", ?class), " >")), isValue(cat(cat("<Mock receiver ", ?class), " >")), mainAnalysis.Value_Type(cat(cat("<Mock receiver ", ?class), " >"), ?class), mainAnalysis.Value_DeclaringType(cat(cat("<Mock receiver ", ?class), " >"), "java.lang.Object"),
MockObjFromOpenProgramEntryPoint(cat(cat("<Mock receiver ", ?class), " >")),
MockObject(cat(cat("<Mock receiver ", ?class), " >"), ?class) :-
  MockOpenProgramEntryPoint(?class, _).
.decl ValueForReceiverInContext(?ctx:mainAnalysis.configuration.Context, ?receiver:Var, ?value:Value)
ValueForReceiverInContext(?ctx, ?receiver, ?value) :-
  mainAnalysis.ReachableContext(?ctx, ?method),
  ThisVar(?method, ?receiver),
  Method_DeclaringType(?method, ?class),
  MockObject(?value, ?class).
.decl Stats_Simple_JavaUtilInsensVarPointsTo(?value:Value, ?var:Var)
.output Stats_Simple_JavaUtilInsensVarPointsTo
.decl Stats_Simple_JavaUtilVarPointsTo(?hctx:mainAnalysis.configuration.HContext, ?value:Value, ?ctx:mainAnalysis.configuration.Context, ?var:Var)
.output Stats_Simple_JavaUtilVarPointsTo
.decl Stats_Simple_InsensVarPointsTo(?value:Value, ?var:Var)
.output Stats_Simple_InsensVarPointsTo
.decl Stats_Simple_AssignedVariable(?var:Var)

.decl Stats_Simple_Application_InsensVarPointsTo(?value:Value, ?var:Var)

.decl Stats_Simple_Application_VarPointsTo(?hctx:mainAnalysis.configuration.HContext, ?value:Value, ?ctx:mainAnalysis.configuration.Context, ?var:Var)

.decl Stats_Simple_InsensReachableVar(?var:Var)

.decl Stats_Simple_ReachableVar(?ctx:mainAnalysis.configuration.Context, ?var:Var)

.decl Stats_Simple_InsensArrayIndexPointsTo(?value:Value, ?basevalue:Value)

.decl Stats_Simple_Application_InsensArrayIndexPointsTo(?value:Value, ?basevalue:Value)

.decl Stats_Simple_Application_ArrayIndexPointsTo(?hctx:mainAnalysis.configuration.HContext, ?value:Value, ?basehctx:mainAnalysis.configuration.HContext, ?basevalue:Value)

.decl Stats_Simple_InsensInstanceFieldPointsTo(?value:Value, ?sig:Field, ?basevalue:Value)

.decl Stats_Simple_InsensStaticFieldPointsTo(?value:Value, ?sig:Field)

.decl Stats_Simple_Application_InsensInstanceFieldPointsTo(?value:Value, ?sig:Field, ?basevalue:Value)

.decl Stats_Simple_Application_InstanceFieldPointsTo(?hctx:mainAnalysis.configuration.HContext, ?value:Value, ?sig:Field, ?basehctx:mainAnalysis.configuration.HContext, ?basevalue:Value)

.decl Stats_Simple_InsensCallGraphEdge(?from:MethodInvocation, ?to:Method)
.output Stats_Simple_InsensCallGraphEdge
.decl Stats_Simple_VirtualCallGraphEdge(?from:MethodInvocation, ?to:Method)

.decl Stats_Simple_InsensReachableApplicationMethod(?method:Method)

.decl Stats_Simple_ReachableApplicationMethod(?ctx:mainAnalysis.configuration.Context, ?method:Method)

.decl Stats_Simple_ApplicationConcreteMethod(?method:Method)

.decl Stats_Simple_NonReachableApplicationConcreteMethod(?method:Method)
.output Stats_Simple_NonReachableApplicationConcreteMethod
.decl Stats_Simple_ReachableVirtualMethodInvocation(?invocation:MethodInvocation)

.decl Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation:MethodInvocation)

.decl Stats_Simple_VirtualTargets(?invocation:MethodInvocation, ?c:number)
.decl Stats_Simple_PolymorphicCallSite(?invocation:MethodInvocation)

.decl Stats_Simple_NullVirtualMethodInvocation(?invocation:MethodInvocation)

.decl Stats_Simple_EmptyVirtualMethodInvocation(?invocation:MethodInvocation)

.decl Stats_Simple_Application_VirtualMethodInvocation(?invocation:MethodInvocation)

.decl Stats_Simple_Application_PolymorphicCallSite(?invocation:MethodInvocation)

.decl Stats_Simple_Application_NullVirtualMethodInvocation(?invocation:MethodInvocation)

.decl Stats_Simple_Application_EmptyReachableVirtualMethodInvocation(?invocation:MethodInvocation)

.decl Stats_Simple_ReachableCast(?inmethod:Method, ?type:Type, ?to:Var, ?from:Var)

.decl Stats_Simple_PotentiallyFailingCast(?type:Type, ?from:Var, ?to:Var)

.decl Stats_Simple_Application_Cast(?type:Type, ?from:Var, ?to:Var, ?inmethod:Method)

.decl Stats_Simple_Application_ReachableCast(?inmethod:Method, ?type:Type, ?to:Var, ?from:Var)

.decl Stats_Simple_Application_ReachableMethod(?method:Method)
.output Stats_Simple_Application_ReachableMethod
.decl Stats_Simple_Application_PotentiallyFailingCast(?type:Type, ?from:Var, ?to:Var)

.decl Stats_Simple_Reflection_InsensArrayIndexPointsTo(?value:Value, ?basevalue:Value)

.decl Stats_Simple_Reflection_ArrayIndexPointsTo(?hctx:mainAnalysis.configuration.HContext, ?value:Value, ?basehctx:mainAnalysis.configuration.HContext, ?basevalue:Value)

.decl Stats_Simple_Reflection_InsensVarPointsTo(?value:Value, ?var:Var)

.decl Stats_Simple_Reflection_VarPointsTo(?hctx:mainAnalysis.configuration.HContext, ?value:Value, ?ctx:mainAnalysis.configuration.Context, ?var:Var)

.decl Stats_Simple_Reflection_InsensInstanceFieldPointsTo(?value:Value, ?sig:Field, ?basevalue:Value)

.decl Stats_Simple_Reflection_InstanceFieldPointsTo(?hctx:mainAnalysis.configuration.HContext, ?value:Value, ?sig:Field, ?basehctx:mainAnalysis.configuration.HContext, ?basevalue:Value)

.decl Stats_Simple_forName(?invocation:MethodInvocation)

.decl Stats_Simple_Class_newInstance(?invocation:MethodInvocation)

.decl Stats_Simple_Constructor_newInstance(?invocation:MethodInvocation)

.decl Stats_Simple_InsensTaintedVarPointsTo(?value:Value, ?var:Var)

.decl Stats_Simple_Application_InsensTaintedVarPointsTo(?value:Value, ?var:Var)

.decl Stats_Simple_Application_TaintedVarPointsTo(?value:Value, ?ctx:mainAnalysis.configuration.Context, ?var:Var)

.decl Stats_Simple_LeakingTaintedInformation(?invocation:MethodInvocation, ?objStr:symbol)

.decl Stats_Simple_OriginalTaintedValue(?id:symbol)

Stats_Simple_JavaUtilInsensVarPointsTo(?value, ?var) :-
  Stats_Simple_JavaUtilVarPointsTo(_, ?value, _, ?var).
Stats_Simple_JavaUtilVarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  Method_DeclaringType(?method, ?type),
  match("java\.util\..*", ?type),
  Var_DeclaringMethod(?var, ?method),
  mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?var).
Stats_Simple_InsensVarPointsTo(?value, ?var) :-
  mainAnalysis.VarPointsTo(_, ?value, _, ?var).
Stats_Simple_AssignedVariable(?var) :-
  Stats_Simple_InsensVarPointsTo(_, ?var).
Stats_Simple_Application_InsensVarPointsTo(?value, ?var),
Stats_Simple_Application_VarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  ApplicationVar(?var),
  mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?var).
Stats_Simple_InsensReachableVar(?var),
Stats_Simple_ReachableVar(?ctx, ?var) :-
  Stats_Simple_AssignedVariable(?var),
  Var_DeclaringMethod(?var, ?method),
  mainAnalysis.ReachableContext(?ctx, ?method).
Stats_Simple_InsensArrayIndexPointsTo(?value, ?basevalue) :-
   mainAnalysis.ArrayIndexPointsTo(_, ?value, _, ?basevalue).
Stats_Simple_Application_InsensArrayIndexPointsTo(?value, ?basevalue),
Stats_Simple_Application_ArrayIndexPointsTo(?hctx, ?value, ?baseHCtx, ?basevalue) :-
  ApplicationMethod(?meth),
  mainAnalysis.AssignNormalHeapAllocation(?basevalue, _, ?meth),
  mainAnalysis.ArrayIndexPointsTo(?hctx, ?value, ?baseHCtx, ?basevalue).
Stats_Simple_InsensInstanceFieldPointsTo(?value, ?sig, ?basevalue) :-
  mainAnalysis.InstanceFieldPointsTo(_, ?value, ?sig, _, ?basevalue).
Stats_Simple_InsensStaticFieldPointsTo(?value, ?sig) :-
  mainAnalysis.StaticFieldPointsTo(_, ?value, ?sig).
Stats_Simple_Application_InsensInstanceFieldPointsTo(?value, ?sig, ?basevalue),
Stats_Simple_Application_InstanceFieldPointsTo(?hctx, ?value, ?sig, ?baseHCtx, ?basevalue) :-
  ApplicationMethod(?meth),
  mainAnalysis.AssignNormalHeapAllocation(?basevalue, _, ?meth),
  mainAnalysis.InstanceFieldPointsTo(?hctx, ?value, ?sig, ?baseHCtx, ?basevalue).
Stats_Simple_InsensCallGraphEdge(?from, ?to) :-
   mainAnalysis.CallGraphEdge(_, ?from, _, ?to).
Stats_Simple_VirtualCallGraphEdge(?from, ?to) :-
   Stats_Simple_ReachableVirtualMethodInvocation(?from),
   Stats_Simple_InsensCallGraphEdge(?from, ?to).
Stats_Simple_InsensReachableApplicationMethod(?method),
Stats_Simple_ReachableApplicationMethod(?ctx, ?method) :-
  ApplicationMethod(?method),
  mainAnalysis.ReachableContext(?ctx, ?method).
Stats_Simple_ApplicationConcreteMethod(?method) :-
  ApplicationMethod(?method),
  !Method_Modifier("abstract", ?method).
Stats_Simple_NonReachableApplicationConcreteMethod(?method) :-
  Stats_Simple_ApplicationConcreteMethod(?method),
  !Stats_Simple_InsensReachableApplicationMethod(?method).
Stats_Simple_ReachableVirtualMethodInvocation(?invocation) :-
  mainAnalysis.Reachable(?method),
  Instruction_Method(?invocation, ?method),
  isVirtualMethodInvocation_Insn(?invocation).
Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation) :-
  Stats_Simple_InsensReachableApplicationMethod(?method),
  Instruction_Method(?invocation, ?method),
  isVirtualMethodInvocation_Insn(?invocation).
Stats_Simple_VirtualTargets(?from, ?c) :-
  Stats_Simple_VirtualCallGraphEdge(?from, _),
  ?c = count : Stats_Simple_VirtualCallGraphEdge(?from, _).
Stats_Simple_PolymorphicCallSite(?from) :-
  Stats_Simple_VirtualTargets(?from, ?size),
  ?size > 1.
Stats_Simple_NullVirtualMethodInvocation(?invocation) :-
  mainAnalysis.Value_Null(?null),
  Stats_Simple_InsensVarPointsTo(?null, ?base),
  VirtualMethodInvocation_Base(?invocation, ?base),
  Stats_Simple_ReachableVirtualMethodInvocation(?invocation).
Stats_Simple_EmptyVirtualMethodInvocation(?invocation) :-
  Stats_Simple_ReachableVirtualMethodInvocation(?invocation),
  VirtualMethodInvocation_Base(?invocation, ?base),
  !Stats_Simple_InsensVarPointsTo(_, ?base).
Stats_Simple_Application_VirtualMethodInvocation(?invocation) :-
  ApplicationMethod(?method),
  Instruction_Method(?invocation, ?method),
  isVirtualMethodInvocation_Insn(?invocation).
Stats_Simple_Application_PolymorphicCallSite(?from) :-
  Stats_Simple_PolymorphicCallSite(?from),
  Stats_Simple_Application_ReachableVirtualMethodInvocation(?from).
Stats_Simple_Application_NullVirtualMethodInvocation(?invocation) :-
  mainAnalysis.Value_Null(?null),
  Stats_Simple_InsensVarPointsTo(?null, ?base),
  VirtualMethodInvocation_Base(?invocation, ?base),
  Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation).
Stats_Simple_Application_EmptyReachableVirtualMethodInvocation(?invocation) :-
  Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation),
  VirtualMethodInvocation_Base(?invocation, ?base),
  !Stats_Simple_InsensVarPointsTo(_, ?base).
Stats_Simple_ReachableCast(?inmethod, ?type, ?to, ?from) :-
  Stats_Simple_AssignedVariable(?from),
  AssignCast(?type, ?from, ?to, ?inmethod),
  mainAnalysis.Reachable(?inmethod).
Stats_Simple_PotentiallyFailingCast(?type, ?from, ?to) :-
  Stats_Simple_ReachableCast(_, ?type, ?to, ?from),
  Stats_Simple_InsensVarPointsTo(?value, ?from),
  mainAnalysis.Value_Type(?value, ?valuetype),
  !basic.SupertypeOf(?type, ?valuetype).
Stats_Simple_Application_Cast(?type, ?from, ?to, ?inmethod) :-
  ApplicationMethod(?inmethod),
  AssignCast(?type, ?from, ?to, ?inmethod).
Stats_Simple_Application_ReachableCast(?inmethod, ?type, ?to, ?from) :-
  ApplicationMethod(?inmethod),
  Stats_Simple_ReachableCast(?inmethod, ?type, ?to, ?from).
Stats_Simple_Application_ReachableMethod(?method) :-
  mainAnalysis.Reachable(?method),
  ApplicationMethod(?method).
Stats_Simple_Application_PotentiallyFailingCast(?type, ?from, ?to) :-
  Stats_Simple_Application_ReachableCast(_, ?type, ?to, ?from),
  Stats_Simple_InsensVarPointsTo(?value, ?from),
  mainAnalysis.Value_Type(?value, ?valuetype),
  !basic.SupertypeOf(?type, ?valuetype).
Stats_Metrics("1.0", "var points-to (INS)", c) :- c = count : { Stats_Simple_InsensVarPointsTo(_, _) }.
Stats_Metrics("1.5", "var points-to (SENS)", c) :- c = count : { mainAnalysis.VarPointsTo(_, _, _, _) }.
Stats_Metrics("5.0", "app var points-to (INS)", c) :- c = count : { Stats_Simple_Application_InsensVarPointsTo(_, _) }.
Stats_Metrics("5.5", "app var points-to (SENS)", c) :- c = count : { Stats_Simple_Application_VarPointsTo(_, _, _, _) }.
Stats_Metrics("5.7", "java.util var points-to (INS)", c) :- c = count : { Stats_Simple_JavaUtilInsensVarPointsTo(_, _) }.
Stats_Metrics("5.8", "java.util var points-to (SENS)", c) :- c = count : { Stats_Simple_JavaUtilVarPointsTo(_, _, _, _) }.
Stats_Metrics("10.0", "reachable variables (INS)", c) :- c = count : { Stats_Simple_InsensReachableVar(_) }.
Stats_Metrics("10.5", "reachable variables (SENS)", c) :- c = count : { Stats_Simple_ReachableVar(_, _) }.
Stats_Metrics("2.0", "array index points-to (INS)", c) :- c = count : { Stats_Simple_InsensArrayIndexPointsTo(_, _) }.
Stats_Metrics("2.5", "array index points-to (SENS)", c) :- c = count : { mainAnalysis.ArrayIndexPointsTo(_, _, _, _) }.
Stats_Metrics("6.0", "app array index points-to (INS)", c) :- c = count : { Stats_Simple_Application_InsensArrayIndexPointsTo(_, _) }.
Stats_Metrics("6.5", "app array index points-to (SENS)", c) :- c = count : { Stats_Simple_Application_ArrayIndexPointsTo(_, _, _, _) }.
Stats_Metrics("3.0", "instance field points-to (INS)", c) :- c = count : { Stats_Simple_InsensInstanceFieldPointsTo(_, _, _) }.
Stats_Metrics("3.5", "instance field points-to (SENS)", c) :- c = count : { mainAnalysis.InstanceFieldPointsTo(_, _, _, _, _) }.
Stats_Metrics("4.0", "static field points-to (INS)", c) :- c = count : { Stats_Simple_InsensStaticFieldPointsTo(_, _) }.
Stats_Metrics("4.5", "static field points-to (SENS)", c) :- c = count : { mainAnalysis.StaticFieldPointsTo(_, _, _) }.
Stats_Metrics("7.0", "app instance field points-to (INS)", c) :- c = count : { Stats_Simple_Application_InsensInstanceFieldPointsTo(_, _, _) }.
Stats_Metrics("7.5", "app instance field points-to (SENS)", c) :- c = count : { Stats_Simple_Application_InstanceFieldPointsTo(_, _, _, _, _) }.
Stats_Metrics("8.0", "call graph edges (INS)", c) :- c = count : { Stats_Simple_InsensCallGraphEdge(_, _) }.
Stats_Metrics("8.5", "call graph edges (SENS)", c) :- c = count : { mainAnalysis.CallGraphEdge(_, _, _, _) }.
Stats_Metrics("9.0", "non-reachable app concrete methods", c) :- c = count : { Stats_Simple_NonReachableApplicationConcreteMethod(_) }.
Stats_Metrics("11.0", "reachable methods (INS)", c) :- c = count : { mainAnalysis.Reachable(_) }.
Stats_Metrics("11.5", "reachable methods (SENS)", c) :- c = count : { mainAnalysis.ReachableContext(_, _) }.
Stats_Metrics("11.75", "total methods", c) :- c = count : { isMethod(_) }.
Stats_Metrics("12.0", "virtual call sites (statically)", c) :- c = count : { isVirtualMethodInvocation_Insn(_) }.
Stats_Metrics("13.0", "reachable virtual call sites", c) :- c = count : { Stats_Simple_ReachableVirtualMethodInvocation(_) }.
Stats_Metrics("14.0", "polymorphic virtual call sites", c) :- c = count : { Stats_Simple_PolymorphicCallSite(_) }.
Stats_Metrics("15.0", "null virtual call sites", c) :- c = count : { Stats_Simple_NullVirtualMethodInvocation(_) }.
Stats_Metrics("15.5", "empty virtual call sites", c) :- c = count : { Stats_Simple_EmptyVirtualMethodInvocation(_) }.
Stats_Metrics("16.0", "app virtual call sites (statically)", c) :- c = count : { Stats_Simple_Application_VirtualMethodInvocation(_) }.
Stats_Metrics("17.0", "app reachable virtual call sites", c) :- c = count : { Stats_Simple_Application_ReachableVirtualMethodInvocation(_) }.
Stats_Metrics("18.0", "app polymorphic virtual call sites", c) :- c = count : { Stats_Simple_Application_PolymorphicCallSite(_) }.
Stats_Metrics("19.0", "app null virtual call sites", c) :- c = count : { Stats_Simple_Application_NullVirtualMethodInvocation(_) }.
Stats_Metrics("19.5", "app empty reachable virtual call sites", c) :- c = count : { Stats_Simple_Application_EmptyReachableVirtualMethodInvocation(_) }.
Stats_Metrics("20.0", "casts (statically)", c) :- c = count : { AssignCast(_, _, _, _) }.
Stats_Metrics("21.0", "reachable casts", c) :- c = count : { Stats_Simple_ReachableCast(_, _, _, _) }.
Stats_Metrics("22.0", "reachable casts that may fail", c) :- c = count : { Stats_Simple_PotentiallyFailingCast(_, _, _) }.
Stats_Metrics("23.0", "app casts (statically)", c) :- c = count : { Stats_Simple_Application_Cast(_, _, _, _) }.
Stats_Metrics("24.0", "app reachable casts", c) :- c = count : { Stats_Simple_Application_ReachableCast(_, _, _, _) }.
Stats_Metrics("25.0", "app reachable casts that may fail", c) :- c = count : { Stats_Simple_Application_PotentiallyFailingCast(_, _, _) }.
Stats_Metrics("25.5", "app reachable methods", c) :- c = count : { Stats_Simple_Application_ReachableMethod(_) }.
Stats_Metrics("25.75", "app concrete methods", c) :- c = count : { Stats_Simple_ApplicationConcreteMethod(_) }.
Stats_Simple_Reflection_InsensArrayIndexPointsTo(?value, ?basevalue),
Stats_Simple_Reflection_ArrayIndexPointsTo(?hctx, ?value, ?baseHCtx, ?basevalue) :-
  mainAnalysis.ReflectiveValue(?value),
  mainAnalysis.ArrayIndexPointsTo(?hctx, ?value, ?baseHCtx, ?basevalue).
Stats_Simple_Reflection_InsensVarPointsTo(?value, ?var),
Stats_Simple_Reflection_VarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  mainAnalysis.ReflectiveValue(?value),
  mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?var).
Stats_Simple_Reflection_InsensInstanceFieldPointsTo(?value, ?sig, ?basevalue),
Stats_Simple_Reflection_InstanceFieldPointsTo(?hctx, ?value, ?sig, ?baseHCtx, ?basevalue) :-
  mainAnalysis.ReflectiveValue(?value),
  mainAnalysis.InstanceFieldPointsTo(?hctx, ?value, ?sig, ?baseHCtx, ?basevalue).
Stats_Simple_forName(?invocation) :-
  mainAnalysis.java_lang_Class_forName(?invocation, ?inmethod),
  mainAnalysis.Reachable(?inmethod).
Stats_Simple_Class_newInstance(?invocation) :-
  mainAnalysis.java_lang_Class_newInstance(?invocation, _, ?from),
  Var_DeclaringMethod(?from, ?inmethod),
  mainAnalysis.Reachable(?inmethod).
Stats_Simple_Constructor_newInstance(?invocation) :-
  mainAnalysis.java_lang_reflect_Constructor_newInstance(?invocation, _, ?from),
  Var_DeclaringMethod(?from, ?inmethod),
  mainAnalysis.Reachable(?inmethod).
Stats_Metrics("30.0", "var points-to (to a reflective value) (INS)", c) :- c = count : { Stats_Simple_Reflection_InsensVarPointsTo(_, _) }.
Stats_Metrics("30.5", "var points-to (to a reflective value) (SENS)", c) :- c = count : { Stats_Simple_Reflection_VarPointsTo(_, _, _, _) }.
Stats_Metrics("31.0", "array index points-to (to a reflective value) (INS)", c) :- c = count : { Stats_Simple_Reflection_InsensArrayIndexPointsTo(_, _) }.
Stats_Metrics("31.5", "array index points-to (to a reflective value) (SENS)", c) :- c = count : { Stats_Simple_Reflection_ArrayIndexPointsTo(_, _, _, _) }.
Stats_Metrics("32.0", "instance field points-to (to a reflective value) (INS)", c) :- c = count : { Stats_Simple_Reflection_InsensInstanceFieldPointsTo(_, _, _) }.
Stats_Metrics("32.5", "instance field points-to (to a reflective value) (SENS)", c) :- c = count : { Stats_Simple_Reflection_InstanceFieldPointsTo(_, _, _, _, _) }.
Stats_Metrics("35.0", "reachable 'forName' (INS)", c) :- c = count : { Stats_Simple_forName(_) }.
Stats_Metrics("36.0", "reachable 'Class.newInstance' (INS)", c) :- c = count : { Stats_Simple_Class_newInstance(_) }.
Stats_Metrics("37.0", "reachable 'Constructor.newInstance' (INS)", c) :- c = count : { Stats_Simple_Constructor_newInstance(_) }.
Stats_Simple_InsensTaintedVarPointsTo(?value, ?var) :-
  TaintedVarPointsTo(?value, _, ?var).
Stats_Simple_Application_InsensTaintedVarPointsTo(?value, ?var),
Stats_Simple_Application_TaintedVarPointsTo(?value, ?ctx, ?var) :-
  ApplicationMethod(?meth),
  Var_DeclaringMethod(?var, ?meth),
  TaintedVarPointsTo(?value, ?ctx, ?var).
Stats_Simple_LeakingTaintedInformation(?invocation, ?objStr) :-
  LeakingTaintedInformation(_, _, _, ?invocation, ?objStr).
Stats_Simple_OriginalTaintedValue(?id) :-
  SourceFromTaintedValue(_, ?id).
Stats_Metrics("40.0", "tainted flows-to (INS)", c) :- c = count : { Stats_Simple_InsensTaintedVarPointsTo(_, _) }.
Stats_Metrics("40.5", "tainted flows-to (SENS)", c) :- c = count : { TaintedVarPointsTo(_, _, _) }.
Stats_Metrics("41.0", "app tainted flows-to (INS)", c) :- c = count : { Stats_Simple_Application_InsensTaintedVarPointsTo(_, _) }.
Stats_Metrics("41.5", "app tainted flows-to (SENS)", c) :- c = count : { Stats_Simple_Application_TaintedVarPointsTo(_, _, _) }.
Stats_Metrics("42.0", "total tainted values", c) :- c = count : { TaintedValue(_) }.
Stats_Metrics("43.0", "original tainted values", c) :- c = count : { Stats_Simple_OriginalTaintedValue(_) }.
Stats_Metrics("44.0", "sink variables (SENS)", c) :- c = count : { LeakingSinkVariable(_, _, _, _) }.
Stats_Metrics("45.0", "total leaks", c) :- c = count : { Stats_Simple_LeakingTaintedInformation(_, _) }.
Stats_Metrics("61.0", "Mock Objects", c) :- c = count : { MockObject(_, _) }.
Stats_Metrics("61.3", "Mock Objects for Fields", c) :- c = count : { MockObjFromField(_) }.
Stats_Metrics("61.4", "Mock Objects for Arrays", c) :- c = count : { MockObjFromArray(_) }.
Stats_Metrics("61.5", "Mock Objects for Formals", c) :- c = count : { MockObjFromFormal(_) }.
.decl Stats_Simple_Application_InsensCallGraphEdge(?invocation:Instruction, ?toMeth:Method)

Stats_Simple_Application_InsensCallGraphEdge(?invocation, ?toMeth) :-
  Stats_Simple_InsensCallGraphEdge(?invocation, ?toMeth),
  ApplicationMethod(?toMeth),
  Instruction_Method(?invocation, ?fromMeth),
  ApplicationMethod(?fromMeth).
.decl Stats_ApplicationHeap(?heap:HeapAllocation)

.decl Stats_VarCount(?ctx:mainAnalysis.configuration.Context, ?var:Var, ?n:number)

.decl Stats_InsensValueVarPointsTo(?value:Value, ?ctx:mainAnalysis.configuration.Context, ?var:Var)

.decl Stats_InsensValueVarCount(?ctx:mainAnalysis.configuration.Context, ?var:Var, ?n:number)

.decl Stats_InsensBaseVarPointsTo(?hctx:mainAnalysis.configuration.HContext, ?value:Value, ?var:Var)

.decl Stats_InsensBaseVarCount(?var:Var, ?n:number)

.decl Stats_InsensVarCount(?var:Var, ?n:number)

.decl Stats_Vars(?n:number)

.decl Stats_InsensVars(?n:number)

.decl Stats_ArrayCount(?basehctx:mainAnalysis.configuration.HContext, ?basevalue:Value, ?n:number)

.decl Stats_InsensValueArrayIndexPointsTo(?value:Value, ?basehctx:mainAnalysis.configuration.HContext, ?basevalue:Value)

.decl Stats_InsensValueArrayCount(?basehctx:mainAnalysis.configuration.HContext, ?basevalue:Value, ?n:number)

.decl Stats_InsensBaseValueArrayIndexPointsTo(?hctx:mainAnalysis.configuration.HContext, ?value:Value, ?basevalue:Value)

.decl Stats_InsensBaseValueArrayCount(?basevalue:Value, ?n:number)

.decl Stats_InsensArrayCount(?basevalue:Value, ?n:number)

.decl Stats_Arrays(?n:number)

.decl Stats_InsensArrays(?n:number)

.decl Stats_FieldCount(?sig:Field, ?basehctx:mainAnalysis.configuration.HContext, ?basevalue:Value, ?n:number)

.decl Stats_InsensValueInstanceFieldPointsTo(?value:Value, ?sig:Field, ?basehctx:mainAnalysis.configuration.HContext, ?basevalue:Value)

.decl Stats_InsensValueFieldCount(?sig:Field, ?basehctx:mainAnalysis.configuration.HContext, ?basevalue:Value, ?n:number)

.decl Stats_InsensBaseValueInstanceFieldPointsTo(?hctx:mainAnalysis.configuration.HContext, ?value:Value, ?sig:Field, ?basevalue:Value)

.decl Stats_InsensBaseValueFieldCount(?sig:Field, ?basevalue:Value, ?n:number)

.decl Stats_InsensFieldCount(?sig:Field, ?basevalue:Value, ?n:number)

.decl Stats_Fields(?n:number)

.decl Stats_InsensFields(?n:number)

.decl Stats_MethodContextCount(?method:Method, ?n:number)

.decl Stats_Methods(?n:number)

.decl Method_NumberOfContexts(?method:Method, ?n:number)

.decl Method_VPTCountPerMethodVariable(?method:Method, ?var:Var, ?n:number)

.decl Method_TotalVPT(?method:Method, Y:number)

.decl Stats_InsensValueThrowPointsTo(?value:Value, ?ctx:mainAnalysis.configuration.Context, ?method:Method)

.decl Stats_InsensThrowPointsTo(?value:Value, ?method:Method)

Stats_ApplicationHeap(?heap) :-
  ApplicationMethod(?method),
  mainAnalysis.AssignNormalHeapAllocation(?heap, _, ?method).
Stats_ApplicationHeap(?heap) :-
  ApplicationMethod(?method),
  mainAnalysis.AssignContextInsensitiveHeapAllocation(?heap, _, ?method).
Stats_VarCount(?ctx, ?var, ?n) :-
 mainAnalysis.VarPointsTo(_, _, ?ctx, ?var),
 ?n = count : mainAnalysis.VarPointsTo(_, _, ?ctx, ?var).
Stats_InsensValueVarPointsTo(?value, ?ctx, ?var) :-
  mainAnalysis.VarPointsTo(_, ?value, ?ctx, ?var).
Stats_InsensValueVarCount(?ctx, ?var, ?n) :-
  Stats_InsensValueVarPointsTo(_, ?ctx, ?var),
  ?n = count : Stats_InsensValueVarPointsTo(_, ?ctx, ?var).
Stats_InsensBaseVarPointsTo(?hctx, ?value, ?var) :-
  mainAnalysis.VarPointsTo(?hctx, ?value, _, ?var).
Stats_InsensBaseVarCount(?var, ?n) :-
  Stats_InsensBaseVarPointsTo(_, _, ?var),
  ?n = count : Stats_InsensBaseVarPointsTo(_, _, ?var).
Stats_InsensVarCount(?var, ?n) :-
  Stats_Simple_InsensVarPointsTo(_, ?var),
  ?n = count : Stats_Simple_InsensVarPointsTo(_, ?var).
Stats_Vars(?n) :-
  ?n = count : Stats_VarCount(_, _, _).
Stats_InsensVars(?n) :-
  ?n = count : Stats_InsensVarCount(_, _).
Stats_ArrayCount(?basehctx, ?basevalue, ?n) :-
  mainAnalysis.ArrayIndexPointsTo(_, _, ?basehctx, ?basevalue),
  ?n = count : mainAnalysis.ArrayIndexPointsTo(_, _, ?basehctx, ?basevalue).
Stats_InsensValueArrayIndexPointsTo(?value, ?basehctx, ?basevalue) :-
  mainAnalysis.ArrayIndexPointsTo(_, ?value, ?basehctx, ?basevalue).
Stats_InsensValueArrayCount(?basehctx, ?basevalue, ?n) :-
  Stats_InsensValueArrayIndexPointsTo(_, ?basehctx, ?basevalue),
  ?n = count : Stats_InsensValueArrayIndexPointsTo(_, ?basehctx, ?basevalue).
Stats_InsensBaseValueArrayIndexPointsTo(?hctx, ?value, ?basevalue) :-
  mainAnalysis.ArrayIndexPointsTo(?hctx, ?value, _, ?basevalue).
Stats_InsensBaseValueArrayCount(?basevalue, ?n) :-
  Stats_InsensBaseValueArrayIndexPointsTo(_, _, ?basevalue),
  ?n = count : Stats_InsensBaseValueArrayIndexPointsTo(_, _, ?basevalue).
Stats_InsensArrayCount(?basevalue, ?n) :-
  Stats_Simple_InsensArrayIndexPointsTo(_, ?basevalue),
  ?n = count : Stats_Simple_InsensArrayIndexPointsTo(_, ?basevalue).
Stats_Arrays(?n) :-
  ?n = count : Stats_ArrayCount(_, _, _).
Stats_InsensArrays(?n) :-
  ?n = count : Stats_InsensArrayCount(_, _).
Stats_FieldCount(?sig, ?basehctx, ?basevalue, ?n) :-
  mainAnalysis.InstanceFieldPointsTo(_, _, ?sig, ?basehctx, ?basevalue),
  ?n = count : mainAnalysis.InstanceFieldPointsTo(_, _, ?sig, ?basehctx, ?basevalue).
Stats_InsensValueInstanceFieldPointsTo(?value, ?sig, ?basehctx, ?basevalue) :-
  mainAnalysis.InstanceFieldPointsTo(_, ?value, ?sig, ?basehctx, ?basevalue).
Stats_InsensValueFieldCount(?sig, ?basehctx, ?basevalue, ?n) :-
  Stats_InsensValueInstanceFieldPointsTo(_, ?sig, ?basehctx, ?basevalue),
  ?n = count : Stats_InsensValueInstanceFieldPointsTo(_, ?sig, ?basehctx, ?basevalue).
Stats_InsensBaseValueInstanceFieldPointsTo(?hctx, ?value, ?sig, ?basevalue) :-
  mainAnalysis.InstanceFieldPointsTo(?hctx, ?value, ?sig, _, ?basevalue).
Stats_InsensBaseValueFieldCount(?sig, ?basevalue, ?n) :-
  Stats_InsensBaseValueInstanceFieldPointsTo(_, _, ?sig, ?basevalue),
  ?n = count : Stats_InsensBaseValueInstanceFieldPointsTo(_, _, ?sig, ?basevalue).
Stats_InsensFieldCount(?sig, ?basevalue, ?n) :-
  Stats_Simple_InsensInstanceFieldPointsTo(_, ?sig, ?basevalue),
  ?n = count : Stats_Simple_InsensInstanceFieldPointsTo(_, ?sig, ?basevalue).
Stats_Fields(?n) :-
  ?n = count : Stats_FieldCount(_, _, _, _).
Stats_InsensFields(?n) :-
  ?n = count : Stats_InsensFieldCount(_, _, _).
Stats_MethodContextCount(?method, ?n) :-
  mainAnalysis.ReachableContext(_, ?method),
  ?n = count : mainAnalysis.ReachableContext(_, ?method).
Stats_Methods(?n) :-
  ?n = count : mainAnalysis.Reachable(_).
Method_NumberOfContexts(?method, ?n) :-
  mainAnalysis.Reachable(?method),
  ?n = count : {mainAnalysis.ReachableContext(_, ?method)}.
Method_VPTCountPerMethodVariable(?method, ?var, Y) :-
  Var_DeclaringMethod(?var, ?method),
  Y = count : {mainAnalysis.VarPointsTo(_, _, _, ?var)}.
Method_TotalVPT(?method, Y) :-
  mainAnalysis.Reachable(?method),
  Y = sum ?n : {Method_VPTCountPerMethodVariable(?method, _, ?n)}.
Method_TotalVPT(?method, 0) :-
  mainAnalysis.Reachable(?method),
  !Var_DeclaringMethod(_, ?method).
Stats_InsensValueThrowPointsTo(?value, ?ctx, ?method) :-
  mainAnalysis.ThrowPointsTo(_, ?value, ?ctx, ?method).
Stats_InsensThrowPointsTo(?value, ?method) :-
  Stats_InsensValueThrowPointsTo(?value, _, ?method).
